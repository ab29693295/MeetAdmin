{"ast":null,"code":"var fs = require('graceful-fs');\n\nvar Writable = require('readable-stream').Writable;\n\nvar util = require('util');\n\nvar MurmurHash3 = require('imurmurhash');\n\nvar iferr = require('iferr');\n\nvar crypto = require('crypto');\n\nfunction murmurhex() {\n  var hash = MurmurHash3('');\n\n  for (var ii = 0; ii < arguments.length; ++ii) {\n    hash.hash('' + arguments[ii]);\n  }\n\n  return hash.result();\n}\n\nvar invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + murmurhex(__filename, process.pid, ++invocations);\n}\n\nvar setImmediate = global.setImmediate || setTimeout;\nmodule.exports = WriteStreamAtomic; // Requirements:\n//   1. Write everything written to the stream to a temp file.\n//   2. If there are no errors:\n//      a. moves the temp file into its final destination\n//      b. emits `finish` & `closed` ONLY after the file is\n//         fully flushed and renamed.\n//   3. If there's an error, removes the temp file.\n\nutil.inherits(WriteStreamAtomic, Writable);\n\nfunction WriteStreamAtomic(path, options) {\n  if (!(this instanceof WriteStreamAtomic)) {\n    return new WriteStreamAtomic(path, options);\n  }\n\n  Writable.call(this, options);\n  this.__isWin = options && options.hasOwnProperty('isWin') ? options.isWin : process.platform === 'win32';\n  this.__atomicTarget = path;\n  this.__atomicTmp = getTmpname(path);\n  this.__atomicChown = options && options.chown;\n  this.__atomicClosed = false;\n  this.__atomicStream = fs.WriteStream(this.__atomicTmp, options);\n\n  this.__atomicStream.once('open', handleOpen(this));\n\n  this.__atomicStream.once('close', handleClose(this));\n\n  this.__atomicStream.once('error', handleError(this));\n} // We have to suppress default finish emitting, because ordinarily it\n// would happen as soon as `end` is called on us and all of the\n// data has been written to our target stream. So we suppress\n// finish from being emitted here, and only emit it after our\n// target stream is closed and we've moved everything around.\n\n\nWriteStreamAtomic.prototype.emit = function (event) {\n  if (event === 'finish') return this.__atomicStream.end();\n  return Writable.prototype.emit.apply(this, arguments);\n};\n\nWriteStreamAtomic.prototype._write = function (buffer, encoding, cb) {\n  var flushed = this.__atomicStream.write(buffer, encoding);\n\n  if (flushed) return cb();\n\n  this.__atomicStream.once('drain', cb);\n};\n\nfunction handleOpen(writeStream) {\n  return function (fd) {\n    writeStream.emit('open', fd);\n  };\n}\n\nfunction handleClose(writeStream) {\n  return function () {\n    if (writeStream.__atomicClosed) return;\n    writeStream.__atomicClosed = true;\n\n    if (writeStream.__atomicChown) {\n      var uid = writeStream.__atomicChown.uid;\n      var gid = writeStream.__atomicChown.gid;\n      return fs.chown(writeStream.__atomicTmp, uid, gid, iferr(cleanup, moveIntoPlace));\n    } else {\n      moveIntoPlace();\n    }\n  };\n\n  function moveIntoPlace() {\n    fs.rename(writeStream.__atomicTmp, writeStream.__atomicTarget, iferr(trapWindowsEPERM, end));\n  }\n\n  function trapWindowsEPERM(err) {\n    if (writeStream.__isWin && err.syscall && err.syscall === 'rename' && err.code && err.code === 'EPERM') {\n      checkFileHashes(err);\n    } else {\n      cleanup(err);\n    }\n  }\n\n  function checkFileHashes(eperm) {\n    var inprocess = 2;\n    var tmpFileHash = crypto.createHash('sha512');\n    var targetFileHash = crypto.createHash('sha512');\n    fs.createReadStream(writeStream.__atomicTmp).on('data', function (data, enc) {\n      tmpFileHash.update(data, enc);\n    }).on('error', fileHashError).on('end', fileHashComplete);\n    fs.createReadStream(writeStream.__atomicTarget).on('data', function (data, enc) {\n      targetFileHash.update(data, enc);\n    }).on('error', fileHashError).on('end', fileHashComplete);\n\n    function fileHashError() {\n      if (inprocess === 0) return;\n      inprocess = 0;\n      cleanup(eperm);\n    }\n\n    function fileHashComplete() {\n      if (inprocess === 0) return;\n      if (--inprocess) return;\n\n      if (tmpFileHash.digest('hex') === targetFileHash.digest('hex')) {\n        return cleanup();\n      } else {\n        return cleanup(eperm);\n      }\n    }\n  }\n\n  function cleanup(err) {\n    fs.unlink(writeStream.__atomicTmp, function () {\n      if (err) {\n        writeStream.emit('error', err);\n        writeStream.emit('close');\n      } else {\n        end();\n      }\n    });\n  }\n\n  function end() {\n    // We have to use our parent class directly because we suppress `finish`\n    // events fired via our own emit method.\n    Writable.prototype.emit.call(writeStream, 'finish'); // Delay the close to provide the same temporal separation a physical\n    // file operation would haveâ€“ that is, the close event is emitted only\n    // after the async close operation completes.\n\n    setImmediate(function () {\n      writeStream.emit('close');\n    });\n  }\n}\n\nfunction handleError(writeStream) {\n  return function (er) {\n    cleanupSync();\n    writeStream.emit('error', er);\n    writeStream.__atomicClosed = true;\n    writeStream.emit('close');\n  };\n\n  function cleanupSync() {\n    try {\n      fs.unlinkSync(writeStream.__atomicTmp);\n    } finally {\n      return;\n    }\n  }\n}","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/fs-write-stream-atomic/index.js"],"names":["fs","require","Writable","util","MurmurHash3","iferr","crypto","murmurhex","hash","ii","arguments","length","result","invocations","getTmpname","filename","__filename","process","pid","setImmediate","global","setTimeout","module","exports","WriteStreamAtomic","inherits","path","options","call","__isWin","hasOwnProperty","isWin","platform","__atomicTarget","__atomicTmp","__atomicChown","chown","__atomicClosed","__atomicStream","WriteStream","once","handleOpen","handleClose","handleError","prototype","emit","event","end","apply","_write","buffer","encoding","cb","flushed","write","writeStream","fd","uid","gid","cleanup","moveIntoPlace","rename","trapWindowsEPERM","err","syscall","code","checkFileHashes","eperm","inprocess","tmpFileHash","createHash","targetFileHash","createReadStream","on","data","enc","update","fileHashError","fileHashComplete","digest","unlink","er","cleanupSync","unlinkSync"],"mappings":"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","sourcesContent":["var fs = require('graceful-fs')\nvar Writable = require('readable-stream').Writable\nvar util = require('util')\nvar MurmurHash3 = require('imurmurhash')\nvar iferr = require('iferr')\nvar crypto = require('crypto')\n\nfunction murmurhex () {\n  var hash = MurmurHash3('')\n  for (var ii = 0; ii < arguments.length; ++ii) {\n    hash.hash('' + arguments[ii])\n  }\n  return hash.result()\n}\n\nvar invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' + murmurhex(__filename, process.pid, ++invocations)\n}\n\nvar setImmediate = global.setImmediate || setTimeout\n\nmodule.exports = WriteStreamAtomic\n\n// Requirements:\n//   1. Write everything written to the stream to a temp file.\n//   2. If there are no errors:\n//      a. moves the temp file into its final destination\n//      b. emits `finish` & `closed` ONLY after the file is\n//         fully flushed and renamed.\n//   3. If there's an error, removes the temp file.\n\nutil.inherits(WriteStreamAtomic, Writable)\nfunction WriteStreamAtomic (path, options) {\n  if (!(this instanceof WriteStreamAtomic)) {\n    return new WriteStreamAtomic(path, options)\n  }\n  Writable.call(this, options)\n\n  this.__isWin = options && options.hasOwnProperty('isWin') ? options.isWin : process.platform === 'win32'\n\n  this.__atomicTarget = path\n  this.__atomicTmp = getTmpname(path)\n\n  this.__atomicChown = options && options.chown\n\n  this.__atomicClosed = false\n\n  this.__atomicStream = fs.WriteStream(this.__atomicTmp, options)\n\n  this.__atomicStream.once('open', handleOpen(this))\n  this.__atomicStream.once('close', handleClose(this))\n  this.__atomicStream.once('error', handleError(this))\n}\n\n// We have to suppress default finish emitting, because ordinarily it\n// would happen as soon as `end` is called on us and all of the\n// data has been written to our target stream. So we suppress\n// finish from being emitted here, and only emit it after our\n// target stream is closed and we've moved everything around.\nWriteStreamAtomic.prototype.emit = function (event) {\n  if (event === 'finish') return this.__atomicStream.end()\n  return Writable.prototype.emit.apply(this, arguments)\n}\n\nWriteStreamAtomic.prototype._write = function (buffer, encoding, cb) {\n  var flushed = this.__atomicStream.write(buffer, encoding)\n  if (flushed) return cb()\n  this.__atomicStream.once('drain', cb)\n}\n\nfunction handleOpen (writeStream) {\n  return function (fd) {\n    writeStream.emit('open', fd)\n  }\n}\n\nfunction handleClose (writeStream) {\n  return function () {\n    if (writeStream.__atomicClosed) return\n    writeStream.__atomicClosed = true\n    if (writeStream.__atomicChown) {\n      var uid = writeStream.__atomicChown.uid\n      var gid = writeStream.__atomicChown.gid\n      return fs.chown(writeStream.__atomicTmp, uid, gid, iferr(cleanup, moveIntoPlace))\n    } else {\n      moveIntoPlace()\n    }\n  }\n\n  function moveIntoPlace () {\n    fs.rename(writeStream.__atomicTmp, writeStream.__atomicTarget, iferr(trapWindowsEPERM, end))\n  }\n\n  function trapWindowsEPERM (err) {\n    if (writeStream.__isWin &&\n        err.syscall && err.syscall === 'rename' &&\n        err.code && err.code === 'EPERM'\n    ) {\n      checkFileHashes(err)\n    } else {\n      cleanup(err)\n    }\n  }\n\n  function checkFileHashes (eperm) {\n    var inprocess = 2\n    var tmpFileHash = crypto.createHash('sha512')\n    var targetFileHash = crypto.createHash('sha512')\n\n    fs.createReadStream(writeStream.__atomicTmp)\n      .on('data', function (data, enc) { tmpFileHash.update(data, enc) })\n      .on('error', fileHashError)\n      .on('end', fileHashComplete)\n    fs.createReadStream(writeStream.__atomicTarget)\n      .on('data', function (data, enc) { targetFileHash.update(data, enc) })\n      .on('error', fileHashError)\n      .on('end', fileHashComplete)\n\n    function fileHashError () {\n      if (inprocess === 0) return\n      inprocess = 0\n      cleanup(eperm)\n    }\n\n    function fileHashComplete () {\n      if (inprocess === 0) return\n      if (--inprocess) return\n      if (tmpFileHash.digest('hex') === targetFileHash.digest('hex')) {\n        return cleanup()\n      } else {\n        return cleanup(eperm)\n      }\n    }\n  }\n\n  function cleanup (err) {\n    fs.unlink(writeStream.__atomicTmp, function () {\n      if (err) {\n        writeStream.emit('error', err)\n        writeStream.emit('close')\n      } else {\n        end()\n      }\n    })\n  }\n\n  function end () {\n    // We have to use our parent class directly because we suppress `finish`\n    // events fired via our own emit method.\n    Writable.prototype.emit.call(writeStream, 'finish')\n\n    // Delay the close to provide the same temporal separation a physical\n    // file operation would haveâ€“ that is, the close event is emitted only\n    // after the async close operation completes.\n    setImmediate(function () {\n      writeStream.emit('close')\n    })\n  }\n}\n\nfunction handleError (writeStream) {\n  return function (er) {\n    cleanupSync()\n    writeStream.emit('error', er)\n    writeStream.__atomicClosed = true\n    writeStream.emit('close')\n  }\n  function cleanupSync () {\n    try {\n      fs.unlinkSync(writeStream.__atomicTmp)\n    } finally {\n      return\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}