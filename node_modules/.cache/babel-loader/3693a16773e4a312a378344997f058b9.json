{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport Header from './Header';\nimport ColGroup from '../ColGroup';\nimport TableContext from '../context/TableContext';\n\nfunction useColumnWidth(colWidths, columCount) {\n  return useMemo(function () {\n    var cloneColumns = [];\n\n    for (var i = 0; i < columCount; i += 1) {\n      var val = colWidths[i];\n\n      if (val) {\n        cloneColumns[i] = val;\n      } else {\n        return null;\n      }\n    }\n\n    return cloneColumns;\n  }, [colWidths.join('_'), columCount]);\n}\n\nfunction FixedHeader(_ref) {\n  var noData = _ref.noData,\n      columns = _ref.columns,\n      flattenColumns = _ref.flattenColumns,\n      colWidths = _ref.colWidths,\n      columCount = _ref.columCount,\n      stickyOffsets = _ref.stickyOffsets,\n      direction = _ref.direction,\n      fixHeader = _ref.fixHeader,\n      props = _objectWithoutProperties(_ref, [\"noData\", \"columns\", \"flattenColumns\", \"colWidths\", \"columCount\", \"stickyOffsets\", \"direction\", \"fixHeader\"]);\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      scrollbarSize = _React$useContext.scrollbarSize,\n      isSticky = _React$useContext.isSticky;\n\n  var combinationScrollBarSize = isSticky && !fixHeader ? 0 : scrollbarSize; // Add scrollbar column\n\n  var lastColumn = flattenColumns[flattenColumns.length - 1];\n  var ScrollBarColumn = {\n    fixed: lastColumn ? lastColumn.fixed : null,\n    onHeaderCell: function onHeaderCell() {\n      return {\n        className: \"\".concat(prefixCls, \"-cell-scrollbar\")\n      };\n    }\n  };\n  var columnsWithScrollbar = useMemo(function () {\n    return combinationScrollBarSize ? [].concat(_toConsumableArray(columns), [ScrollBarColumn]) : columns;\n  }, [combinationScrollBarSize, columns]);\n  var flattenColumnsWithScrollbar = useMemo(function () {\n    return combinationScrollBarSize ? [].concat(_toConsumableArray(flattenColumns), [ScrollBarColumn]) : flattenColumns;\n  }, [combinationScrollBarSize, flattenColumns]); // Calculate the sticky offsets\n\n  var headerStickyOffsets = useMemo(function () {\n    var right = stickyOffsets.right,\n        left = stickyOffsets.left;\n    return _objectSpread(_objectSpread({}, stickyOffsets), {}, {\n      left: direction === 'rtl' ? [].concat(_toConsumableArray(left.map(function (width) {\n        return width + combinationScrollBarSize;\n      })), [0]) : left,\n      right: direction === 'rtl' ? right : [].concat(_toConsumableArray(right.map(function (width) {\n        return width + combinationScrollBarSize;\n      })), [0]),\n      isSticky: isSticky\n    });\n  }, [combinationScrollBarSize, stickyOffsets, isSticky]);\n  var mergedColumnWidth = useColumnWidth(colWidths, columCount);\n  return React.createElement(\"table\", {\n    style: {\n      tableLayout: 'fixed',\n      visibility: noData || mergedColumnWidth ? null : 'hidden'\n    }\n  }, React.createElement(ColGroup, {\n    colWidths: mergedColumnWidth ? [].concat(_toConsumableArray(mergedColumnWidth), [combinationScrollBarSize]) : [],\n    columCount: columCount + 1,\n    columns: flattenColumnsWithScrollbar\n  }), React.createElement(Header, Object.assign({}, props, {\n    stickyOffsets: headerStickyOffsets,\n    columns: columnsWithScrollbar,\n    flattenColumns: flattenColumnsWithScrollbar\n  })));\n}\n\nexport default FixedHeader;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/rc-table/es/Header/FixedHeader.js"],"names":["_objectSpread","_toConsumableArray","_objectWithoutProperties","React","useMemo","Header","ColGroup","TableContext","useColumnWidth","colWidths","columCount","cloneColumns","i","val","join","FixedHeader","_ref","noData","columns","flattenColumns","stickyOffsets","direction","fixHeader","props","_React$useContext","useContext","prefixCls","scrollbarSize","isSticky","combinationScrollBarSize","lastColumn","length","ScrollBarColumn","fixed","onHeaderCell","className","concat","columnsWithScrollbar","flattenColumnsWithScrollbar","headerStickyOffsets","right","left","map","width","mergedColumnWidth","createElement","style","tableLayout","visibility","Object","assign"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport Header from './Header';\nimport ColGroup from '../ColGroup';\nimport TableContext from '../context/TableContext';\n\nfunction useColumnWidth(colWidths, columCount) {\n  return useMemo(function () {\n    var cloneColumns = [];\n\n    for (var i = 0; i < columCount; i += 1) {\n      var val = colWidths[i];\n\n      if (val) {\n        cloneColumns[i] = val;\n      } else {\n        return null;\n      }\n    }\n\n    return cloneColumns;\n  }, [colWidths.join('_'), columCount]);\n}\n\nfunction FixedHeader(_ref) {\n  var noData = _ref.noData,\n      columns = _ref.columns,\n      flattenColumns = _ref.flattenColumns,\n      colWidths = _ref.colWidths,\n      columCount = _ref.columCount,\n      stickyOffsets = _ref.stickyOffsets,\n      direction = _ref.direction,\n      fixHeader = _ref.fixHeader,\n      props = _objectWithoutProperties(_ref, [\"noData\", \"columns\", \"flattenColumns\", \"colWidths\", \"columCount\", \"stickyOffsets\", \"direction\", \"fixHeader\"]);\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      scrollbarSize = _React$useContext.scrollbarSize,\n      isSticky = _React$useContext.isSticky;\n\n  var combinationScrollBarSize = isSticky && !fixHeader ? 0 : scrollbarSize; // Add scrollbar column\n\n  var lastColumn = flattenColumns[flattenColumns.length - 1];\n  var ScrollBarColumn = {\n    fixed: lastColumn ? lastColumn.fixed : null,\n    onHeaderCell: function onHeaderCell() {\n      return {\n        className: \"\".concat(prefixCls, \"-cell-scrollbar\")\n      };\n    }\n  };\n  var columnsWithScrollbar = useMemo(function () {\n    return combinationScrollBarSize ? [].concat(_toConsumableArray(columns), [ScrollBarColumn]) : columns;\n  }, [combinationScrollBarSize, columns]);\n  var flattenColumnsWithScrollbar = useMemo(function () {\n    return combinationScrollBarSize ? [].concat(_toConsumableArray(flattenColumns), [ScrollBarColumn]) : flattenColumns;\n  }, [combinationScrollBarSize, flattenColumns]); // Calculate the sticky offsets\n\n  var headerStickyOffsets = useMemo(function () {\n    var right = stickyOffsets.right,\n        left = stickyOffsets.left;\n    return _objectSpread(_objectSpread({}, stickyOffsets), {}, {\n      left: direction === 'rtl' ? [].concat(_toConsumableArray(left.map(function (width) {\n        return width + combinationScrollBarSize;\n      })), [0]) : left,\n      right: direction === 'rtl' ? right : [].concat(_toConsumableArray(right.map(function (width) {\n        return width + combinationScrollBarSize;\n      })), [0]),\n      isSticky: isSticky\n    });\n  }, [combinationScrollBarSize, stickyOffsets, isSticky]);\n  var mergedColumnWidth = useColumnWidth(colWidths, columCount);\n  return React.createElement(\"table\", {\n    style: {\n      tableLayout: 'fixed',\n      visibility: noData || mergedColumnWidth ? null : 'hidden'\n    }\n  }, React.createElement(ColGroup, {\n    colWidths: mergedColumnWidth ? [].concat(_toConsumableArray(mergedColumnWidth), [combinationScrollBarSize]) : [],\n    columCount: columCount + 1,\n    columns: flattenColumnsWithScrollbar\n  }), React.createElement(Header, Object.assign({}, props, {\n    stickyOffsets: headerStickyOffsets,\n    columns: columnsWithScrollbar,\n    flattenColumns: flattenColumnsWithScrollbar\n  })));\n}\n\nexport default FixedHeader;"]},"metadata":{},"sourceType":"module"}