{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\n\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nconst NullFactory = require(\"../NullFactory\");\n\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\n\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nclass AMDPlugin {\n  constructor(options, amdOptions) {\n    this.amdOptions = amdOptions;\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    const amdOptions = this.amdOptions;\n    compiler.hooks.compilation.tap(\"AMDPlugin\", (compilation, {\n      contextModuleFactory,\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(AMDRequireDependency, new NullFactory());\n      compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireArrayDependency, new NullFactory());\n      compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());\n      compilation.dependencyFactories.set(AMDDefineDependency, new NullFactory());\n      compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());\n      compilation.dependencyFactories.set(UnsupportedDependency, new NullFactory());\n      compilation.dependencyTemplates.set(UnsupportedDependency, new UnsupportedDependency.Template());\n      compilation.dependencyFactories.set(LocalModuleDependency, new NullFactory());\n      compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());\n\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n        const setExpressionToModule = (outerExpr, module) => {\n          parser.hooks.expression.for(outerExpr).tap(\"AMDPlugin\", expr => {\n            const dep = new AMDRequireItemDependency(module, expr.range);\n            dep.userRequest = outerExpr;\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            return true;\n          });\n        };\n\n        new AMDRequireDependenciesBlockParserPlugin(options).apply(parser);\n        new AMDDefineDependencyParserPlugin(options).apply(parser);\n        setExpressionToModule(\"require.amd\", \"!!webpack amd options\");\n        setExpressionToModule(\"define.amd\", \"!!webpack amd options\");\n        setExpressionToModule(\"define\", \"!!webpack amd define\");\n        parser.hooks.expression.for(\"__webpack_amd_options__\").tap(\"AMDPlugin\", () => parser.state.current.addVariable(\"__webpack_amd_options__\", JSON.stringify(amdOptions)));\n        parser.hooks.evaluateTypeof.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n        parser.hooks.evaluateTypeof.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n        parser.hooks.evaluateIdentifier.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"define.amd\", true));\n        parser.hooks.evaluateIdentifier.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"require.amd\", true));\n        parser.hooks.typeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n        parser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.approve);\n        parser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n          const dep = new AMDRequireItemDependency(\"!!webpack amd define\", expr.range);\n          dep.userRequest = \"define\";\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          return false;\n        });\n        parser.hooks.typeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"AMDPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"AMDPlugin\", handler);\n    });\n    compiler.hooks.afterResolvers.tap(\"AMDPlugin\", () => {\n      compiler.resolverFactory.hooks.resolver.for(\"normal\").tap(\"AMDPlugin\", resolver => {\n        new AliasPlugin(\"described-resolve\", {\n          name: \"amdefine\",\n          alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n        }, \"resolve\").apply(resolver);\n        new AliasPlugin(\"described-resolve\", {\n          name: \"webpack amd options\",\n          alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-options.js\")\n        }, \"resolve\").apply(resolver);\n        new AliasPlugin(\"described-resolve\", {\n          name: \"webpack amd define\",\n          alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n        }, \"resolve\").apply(resolver);\n      });\n    });\n  }\n\n}\n\nmodule.exports = AMDPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/dependencies/AMDPlugin.js"],"names":["path","require","AMDRequireDependency","AMDRequireItemDependency","AMDRequireArrayDependency","AMDRequireContextDependency","AMDDefineDependency","UnsupportedDependency","LocalModuleDependency","NullFactory","AMDRequireDependenciesBlockParserPlugin","AMDDefineDependencyParserPlugin","AliasPlugin","ParserHelpers","AMDPlugin","constructor","options","amdOptions","apply","compiler","hooks","compilation","tap","contextModuleFactory","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","handler","parser","parserOptions","amd","undefined","setExpressionToModule","outerExpr","module","expression","for","expr","dep","range","userRequest","loc","state","current","addDependency","addVariable","JSON","stringify","evaluateTypeof","evaluateToString","evaluateIdentifier","evaluateToIdentifier","typeof","toConstantDependency","canRename","approve","rename","afterResolvers","resolverFactory","resolver","name","alias","join","__dirname","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nconst NullFactory = require(\"../NullFactory\");\n\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nclass AMDPlugin {\n\tconstructor(options, amdOptions) {\n\t\tthis.amdOptions = amdOptions;\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst amdOptions = this.amdOptions;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AMDPlugin\",\n\t\t\t(compilation, { contextModuleFactory, normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireDependency,\n\t\t\t\t\tnew AMDRequireDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireItemDependency,\n\t\t\t\t\tnew AMDRequireItemDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireArrayDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireArrayDependency,\n\t\t\t\t\tnew AMDRequireArrayDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tcontextModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDRequireContextDependency,\n\t\t\t\t\tnew AMDRequireContextDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tAMDDefineDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tAMDDefineDependency,\n\t\t\t\t\tnew AMDDefineDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tUnsupportedDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tUnsupportedDependency,\n\t\t\t\t\tnew UnsupportedDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tLocalModuleDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tLocalModuleDependency,\n\t\t\t\t\tnew LocalModuleDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n\t\t\t\t\tconst setExpressionToModule = (outerExpr, module) => {\n\t\t\t\t\t\tparser.hooks.expression.for(outerExpr).tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\t\tconst dep = new AMDRequireItemDependency(module, expr.range);\n\t\t\t\t\t\t\tdep.userRequest = outerExpr;\n\t\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\tnew AMDRequireDependenciesBlockParserPlugin(options).apply(parser);\n\t\t\t\t\tnew AMDDefineDependencyParserPlugin(options).apply(parser);\n\n\t\t\t\t\tsetExpressionToModule(\"require.amd\", \"!!webpack amd options\");\n\t\t\t\t\tsetExpressionToModule(\"define.amd\", \"!!webpack amd options\");\n\t\t\t\t\tsetExpressionToModule(\"define\", \"!!webpack amd define\");\n\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"__webpack_amd_options__\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", () =>\n\t\t\t\t\t\t\tparser.state.current.addVariable(\n\t\t\t\t\t\t\t\t\"__webpack_amd_options__\",\n\t\t\t\t\t\t\t\tJSON.stringify(amdOptions)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"define.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToString(typeof amdOptions)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToString(typeof amdOptions)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"define.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToIdentifier(\"define.amd\", true)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"require.amd\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToIdentifier(\"require.amd\", true)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.toConstantDependency(\n\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\tJSON.stringify(\"function\")\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n\t\t\t\t\tparser.hooks.canRename\n\t\t\t\t\t\t.for(\"define\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", ParserHelpers.approve);\n\t\t\t\t\tparser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n\t\t\t\t\t\tconst dep = new AMDRequireItemDependency(\n\t\t\t\t\t\t\t\"!!webpack amd define\",\n\t\t\t\t\t\t\texpr.range\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.userRequest = \"define\";\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"AMDPlugin\",\n\t\t\t\t\t\t\tParserHelpers.toConstantDependency(\n\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\tJSON.stringify(\"function\")\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require\")\n\t\t\t\t\t\t.tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"AMDPlugin\", handler);\n\t\t\t}\n\t\t);\n\t\tcompiler.hooks.afterResolvers.tap(\"AMDPlugin\", () => {\n\t\t\tcompiler.resolverFactory.hooks.resolver\n\t\t\t\t.for(\"normal\")\n\t\t\t\t.tap(\"AMDPlugin\", resolver => {\n\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"amdefine\",\n\t\t\t\t\t\t\talias: path.join(\n\t\t\t\t\t\t\t\t__dirname,\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"buildin\",\n\t\t\t\t\t\t\t\t\"amd-define.js\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t).apply(resolver);\n\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"webpack amd options\",\n\t\t\t\t\t\t\talias: path.join(\n\t\t\t\t\t\t\t\t__dirname,\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"buildin\",\n\t\t\t\t\t\t\t\t\"amd-options.js\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t).apply(resolver);\n\t\t\t\t\tnew AliasPlugin(\n\t\t\t\t\t\t\"described-resolve\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"webpack amd define\",\n\t\t\t\t\t\t\talias: path.join(\n\t\t\t\t\t\t\t\t__dirname,\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"..\",\n\t\t\t\t\t\t\t\t\"buildin\",\n\t\t\t\t\t\t\t\t\"amd-define.js\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"resolve\"\n\t\t\t\t\t).apply(resolver);\n\t\t\t\t});\n\t\t});\n\t}\n}\nmodule.exports = AMDPlugin;\n"]},"metadata":{},"sourceType":"script"}