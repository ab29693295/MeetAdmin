{"ast":null,"code":"'use strict';\n\nconst BB = require('bluebird');\n\nconst contentPath = require('./path');\n\nconst figgyPudding = require('figgy-pudding');\n\nconst fs = require('graceful-fs');\n\nconst PassThrough = require('stream').PassThrough;\n\nconst pipe = BB.promisify(require('mississippi').pipe);\n\nconst ssri = require('ssri');\n\nconst Y = require('../util/y.js');\n\nconst lstatAsync = BB.promisify(fs.lstat);\nconst readFileAsync = BB.promisify(fs.readFile);\nconst ReadOpts = figgyPudding({\n  size: {}\n});\nmodule.exports = read;\n\nfunction read(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return readFileAsync(cpath, null).then(data => {\n      if (typeof opts.size === 'number' && opts.size !== data.length) {\n        throw sizeError(opts.size, data.length);\n      } else if (ssri.checkData(data, sri)) {\n        return data;\n      } else {\n        throw integrityError(sri, cpath);\n      }\n    });\n  });\n}\n\nmodule.exports.sync = readSync;\n\nfunction readSync(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath);\n\n    if (typeof opts.size === 'number' && opts.size !== data.length) {\n      throw sizeError(opts.size, data.length);\n    } else if (ssri.checkData(data, sri)) {\n      return data;\n    } else {\n      throw integrityError(sri, cpath);\n    }\n  });\n}\n\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\n\nfunction readStream(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  const stream = new PassThrough();\n  withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({\n      cpath,\n      sri,\n      stat\n    }));\n  }).then(({\n    cpath,\n    sri,\n    stat\n  }) => {\n    return pipe(fs.createReadStream(cpath), ssri.integrityStream({\n      integrity: sri,\n      size: opts.size\n    }), stream);\n  }).catch(err => {\n    stream.emit('error', err);\n  });\n  return stream;\n}\n\nlet copyFileAsync;\n\nif (fs.copyFile) {\n  module.exports.copy = copy;\n  module.exports.copy.sync = copySync;\n  copyFileAsync = BB.promisify(fs.copyFile);\n}\n\nfunction copy(cache, integrity, dest, opts) {\n  opts = ReadOpts(opts);\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFileAsync(cpath, dest);\n  });\n}\n\nfunction copySync(cache, integrity, dest, opts) {\n  opts = ReadOpts(opts);\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\n\nmodule.exports.hasContent = hasContent;\n\nfunction hasContent(cache, integrity) {\n  if (!integrity) {\n    return BB.resolve(false);\n  }\n\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({\n      size: stat.size,\n      sri,\n      stat\n    }));\n  }).catch(err => {\n    if (err.code === 'ENOENT') {\n      return false;\n    }\n\n    if (err.code === 'EPERM') {\n      if (process.platform !== 'win32') {\n        throw err;\n      } else {\n        return false;\n      }\n    }\n  });\n}\n\nmodule.exports.hasContent.sync = hasContentSync;\n\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n\n      if (err.code === 'EPERM') {\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n}\n\nfunction withContentSri(cache, integrity, fn) {\n  return BB.try(() => {\n    const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      return BB.any(sri[sri.pickAlgorithm()].map(meta => {\n        return withContentSri(cache, meta, fn);\n      }, {\n        concurrency: 1\n      })).catch(err => {\n        if ([].some.call(err, e => e.code === 'ENOENT')) {\n          throw Object.assign(new Error('No matching content found for ' + sri.toString()), {\n            code: 'ENOENT'\n          });\n        } else {\n          throw err[0];\n        }\n      });\n    }\n  });\n}\n\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n\n    for (const meta of sri[sri.pickAlgorithm()]) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n\n    if (lastErr) {\n      throw lastErr;\n    }\n  }\n}\n\nfunction sizeError(expected, found) {\n  var err = new Error(Y`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction integrityError(sri, path) {\n  var err = new Error(Y`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/node_modules/cacache/lib/content/read.js"],"names":["BB","require","contentPath","figgyPudding","fs","PassThrough","pipe","promisify","ssri","Y","lstatAsync","lstat","readFileAsync","readFile","ReadOpts","size","module","exports","read","cache","integrity","opts","withContentSri","cpath","sri","then","data","length","sizeError","checkData","integrityError","sync","readSync","withContentSriSync","readFileSync","stream","readStream","stat","createReadStream","integrityStream","catch","err","emit","copyFileAsync","copyFile","copy","copySync","dest","copyFileSync","hasContent","resolve","code","process","platform","hasContentSync","lstatSync","fn","try","parse","algo","pickAlgorithm","digests","any","map","meta","concurrency","some","call","e","Object","assign","Error","toString","lastErr","expected","found","path"],"mappings":"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","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst contentPath = require('./path')\nconst figgyPudding = require('figgy-pudding')\nconst fs = require('graceful-fs')\nconst PassThrough = require('stream').PassThrough\nconst pipe = BB.promisify(require('mississippi').pipe)\nconst ssri = require('ssri')\nconst Y = require('../util/y.js')\n\nconst lstatAsync = BB.promisify(fs.lstat)\nconst readFileAsync = BB.promisify(fs.readFile)\n\nconst ReadOpts = figgyPudding({\n  size: {}\n})\n\nmodule.exports = read\nfunction read (cache, integrity, opts) {\n  opts = ReadOpts(opts)\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return readFileAsync(cpath, null).then(data => {\n      if (typeof opts.size === 'number' && opts.size !== data.length) {\n        throw sizeError(opts.size, data.length)\n      } else if (ssri.checkData(data, sri)) {\n        return data\n      } else {\n        throw integrityError(sri, cpath)\n      }\n    })\n  })\n}\n\nmodule.exports.sync = readSync\nfunction readSync (cache, integrity, opts) {\n  opts = ReadOpts(opts)\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath)\n    if (typeof opts.size === 'number' && opts.size !== data.length) {\n      throw sizeError(opts.size, data.length)\n    } else if (ssri.checkData(data, sri)) {\n      return data\n    } else {\n      throw integrityError(sri, cpath)\n    }\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\nfunction readStream (cache, integrity, opts) {\n  opts = ReadOpts(opts)\n  const stream = new PassThrough()\n  withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({ cpath, sri, stat }))\n  }).then(({ cpath, sri, stat }) => {\n    return pipe(\n      fs.createReadStream(cpath),\n      ssri.integrityStream({\n        integrity: sri,\n        size: opts.size\n      }),\n      stream\n    )\n  }).catch(err => {\n    stream.emit('error', err)\n  })\n  return stream\n}\n\nlet copyFileAsync\nif (fs.copyFile) {\n  module.exports.copy = copy\n  module.exports.copy.sync = copySync\n  copyFileAsync = BB.promisify(fs.copyFile)\n}\n\nfunction copy (cache, integrity, dest, opts) {\n  opts = ReadOpts(opts)\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFileAsync(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest, opts) {\n  opts = ReadOpts(opts)\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\nfunction hasContent (cache, integrity) {\n  if (!integrity) { return BB.resolve(false) }\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({ size: stat.size, sri, stat }))\n  }).catch(err => {\n    if (err.code === 'ENOENT') { return false }\n    if (err.code === 'EPERM') {\n      if (process.platform !== 'win32') {\n        throw err\n      } else {\n        return false\n      }\n    }\n  })\n}\n\nmodule.exports.hasContent.sync = hasContentSync\nfunction hasContentSync (cache, integrity) {\n  if (!integrity) { return false }\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT') { return false }\n      if (err.code === 'EPERM') {\n        if (process.platform !== 'win32') {\n          throw err\n        } else {\n          return false\n        }\n      }\n    }\n  })\n}\n\nfunction withContentSri (cache, integrity, fn) {\n  return BB.try(() => {\n    const sri = ssri.parse(integrity)\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm()\n    const digests = sri[algo]\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0])\n      return fn(cpath, digests[0])\n    } else {\n      return BB.any(sri[sri.pickAlgorithm()].map(meta => {\n        return withContentSri(cache, meta, fn)\n      }, { concurrency: 1 }))\n        .catch(err => {\n          if ([].some.call(err, e => e.code === 'ENOENT')) {\n            throw Object.assign(\n              new Error('No matching content found for ' + sri.toString()),\n              { code: 'ENOENT' }\n            )\n          } else {\n            throw err[0]\n          }\n        })\n    }\n  })\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of sri[sri.pickAlgorithm()]) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    if (lastErr) { throw lastErr }\n  }\n}\n\nfunction sizeError (expected, found) {\n  var err = new Error(Y`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  var err = new Error(Y`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"]},"metadata":{},"sourceType":"script"}