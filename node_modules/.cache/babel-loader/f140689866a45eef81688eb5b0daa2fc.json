{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class ModulesInRootPlugin {\n  constructor(source, path, target) {\n    this.source = source;\n    this.path = path;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ModulesInRootPlugin\", (request, resolveContext, callback) => {\n      const obj = Object.assign({}, request, {\n        path: this.path,\n        request: \"./\" + request.request\n      });\n      resolver.doResolve(target, obj, \"looking for modules in \" + this.path, resolveContext, callback);\n    });\n  }\n\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/enhanced-resolve/lib/ModulesInRootPlugin.js"],"names":["module","exports","ModulesInRootPlugin","constructor","source","path","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","obj","Object","assign","doResolve"],"mappings":"AAAA;;;;AAIA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,mBAAN,CAA0B;AAC1CC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,MAAf,EAAuB;AACjC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACAE,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKN,MADf,EAEEO,QAFF,CAEW,qBAFX,EAEkC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACvE,YAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAlB,EAA2B;AACtCP,QAAAA,IAAI,EAAE,KAAKA,IAD2B;AAEtCO,QAAAA,OAAO,EAAE,OAAOA,OAAO,CAACA;AAFc,OAA3B,CAAZ;AAIAJ,MAAAA,QAAQ,CAACU,SAAT,CACCZ,MADD,EAECS,GAFD,EAGC,4BAA4B,KAAKV,IAHlC,EAICQ,cAJD,EAKCC,QALD;AAOA,KAdF;AAeA;;AAxByC,CAA3C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nmodule.exports = class ModulesInRootPlugin {\n\tconstructor(source, path, target) {\n\t\tthis.source = source;\n\t\tthis.path = path;\n\t\tthis.target = target;\n\t}\n\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"ModulesInRootPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst obj = Object.assign({}, request, {\n\t\t\t\t\tpath: this.path,\n\t\t\t\t\trequest: \"./\" + request.request\n\t\t\t\t});\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"looking for modules in \" + this.path,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}