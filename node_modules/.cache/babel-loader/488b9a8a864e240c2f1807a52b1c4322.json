{"ast":null,"code":"const cache = new Map();\n\nconst fs = require('fs');\n\nconst {\n  dirname,\n  resolve\n} = require('path');\n\nconst lstat = path => new Promise((res, rej) => fs.lstat(path, (er, st) => er ? rej(er) : res(st)));\n\nconst inferOwner = path => {\n  path = resolve(path);\n  if (cache.has(path)) return Promise.resolve(cache.get(path));\n\n  const statThen = st => {\n    const {\n      uid,\n      gid\n    } = st;\n    cache.set(path, {\n      uid,\n      gid\n    });\n    return {\n      uid,\n      gid\n    };\n  };\n\n  const parent = dirname(path);\n  const parentTrap = parent === path ? null : er => {\n    return inferOwner(parent).then(owner => {\n      cache.set(path, owner);\n      return owner;\n    });\n  };\n  return lstat(path).then(statThen, parentTrap);\n};\n\nconst inferOwnerSync = path => {\n  path = resolve(path);\n  if (cache.has(path)) return cache.get(path);\n  const parent = dirname(path); // avoid obscuring call site by re-throwing\n  // \"catch\" the error by returning from a finally,\n  // only if we're not at the root, and the parent call works.\n\n  let threw = true;\n\n  try {\n    const st = fs.lstatSync(path);\n    threw = false;\n    const {\n      uid,\n      gid\n    } = st;\n    cache.set(path, {\n      uid,\n      gid\n    });\n    return {\n      uid,\n      gid\n    };\n  } finally {\n    if (threw && parent !== path) {\n      const owner = inferOwnerSync(parent);\n      cache.set(path, owner);\n      return owner; // eslint-disable-line no-unsafe-finally\n    }\n  }\n};\n\nconst inflight = new Map();\n\nmodule.exports = path => {\n  path = resolve(path);\n  if (inflight.has(path)) return Promise.resolve(inflight.get(path));\n  const p = inferOwner(path).then(owner => {\n    inflight.delete(path);\n    return owner;\n  });\n  inflight.set(path, p);\n  return p;\n};\n\nmodule.exports.sync = inferOwnerSync;\n\nmodule.exports.clearCache = () => {\n  cache.clear();\n  inflight.clear();\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/infer-owner/index.js"],"names":["cache","Map","fs","require","dirname","resolve","lstat","path","Promise","res","rej","er","st","inferOwner","has","get","statThen","uid","gid","set","parent","parentTrap","then","owner","inferOwnerSync","threw","lstatSync","inflight","module","exports","p","delete","sync","clearCache","clear"],"mappings":"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","sourcesContent":["const cache = new Map()\nconst fs = require('fs')\nconst { dirname, resolve } = require('path')\n\n\nconst lstat = path => new Promise((res, rej) =>\n  fs.lstat(path, (er, st) => er ? rej(er) : res(st)))\n\nconst inferOwner = path => {\n  path = resolve(path)\n  if (cache.has(path))\n    return Promise.resolve(cache.get(path))\n\n  const statThen = st => {\n    const { uid, gid } = st\n    cache.set(path, { uid, gid })\n    return { uid, gid }\n  }\n  const parent = dirname(path)\n  const parentTrap = parent === path ? null : er => {\n    return inferOwner(parent).then((owner) => {\n      cache.set(path, owner)\n      return owner\n    })\n  }\n  return lstat(path).then(statThen, parentTrap)\n}\n\nconst inferOwnerSync = path => {\n  path = resolve(path)\n  if (cache.has(path))\n    return cache.get(path)\n\n  const parent = dirname(path)\n\n  // avoid obscuring call site by re-throwing\n  // \"catch\" the error by returning from a finally,\n  // only if we're not at the root, and the parent call works.\n  let threw = true\n  try {\n    const st = fs.lstatSync(path)\n    threw = false\n    const { uid, gid } = st\n    cache.set(path, { uid, gid })\n    return { uid, gid }\n  } finally {\n    if (threw && parent !== path) {\n      const owner = inferOwnerSync(parent)\n      cache.set(path, owner)\n      return owner // eslint-disable-line no-unsafe-finally\n    }\n  }\n}\n\nconst inflight = new Map()\nmodule.exports = path => {\n  path = resolve(path)\n  if (inflight.has(path))\n    return Promise.resolve(inflight.get(path))\n  const p = inferOwner(path).then(owner => {\n    inflight.delete(path)\n    return owner\n  })\n  inflight.set(path, p)\n  return p\n}\nmodule.exports.sync = inferOwnerSync\nmodule.exports.clearCache = () => {\n  cache.clear()\n  inflight.clear()\n}\n"]},"metadata":{},"sourceType":"script"}