{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  OriginalSource,\n  RawSource\n} = require(\"webpack-sources\");\n\nconst Module = require(\"./Module\");\n\nconst WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\n\nconst Template = require(\"./Template\");\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n\nclass ExternalModule extends Module {\n  constructor(request, type, userRequest) {\n    super(\"javascript/dynamic\", null); // Info from Factory\n\n    this.request = request;\n    this.externalType = type;\n    this.userRequest = userRequest;\n    this.external = true;\n  }\n\n  libIdent() {\n    return this.userRequest;\n  }\n\n  chunkCondition(chunk) {\n    return chunk.hasEntryModule();\n  }\n\n  identifier() {\n    return \"external \" + JSON.stringify(this.request);\n  }\n\n  readableIdentifier() {\n    return \"external \" + JSON.stringify(this.request);\n  }\n\n  needRebuild() {\n    return false;\n  }\n\n  build(options, compilation, resolver, fs, callback) {\n    this.built = true;\n    this.buildMeta = {};\n    this.buildInfo = {};\n    callback();\n  }\n\n  getSourceForGlobalVariableExternal(variableName, type) {\n    if (!Array.isArray(variableName)) {\n      // make it an array as the look up works the same basically\n      variableName = [variableName];\n    } // needed for e.g. window[\"some\"][\"thing\"]\n\n\n    const objectLookup = variableName.map(r => `[${JSON.stringify(r)}]`).join(\"\");\n    return `(function() { module.exports = ${type}${objectLookup}; }());`;\n  }\n\n  getSourceForCommonJsExternal(moduleAndSpecifiers) {\n    if (!Array.isArray(moduleAndSpecifiers)) {\n      return `module.exports = require(${JSON.stringify(moduleAndSpecifiers)});`;\n    }\n\n    const moduleName = moduleAndSpecifiers[0];\n    const objectLookup = moduleAndSpecifiers.slice(1).map(r => `[${JSON.stringify(r)}]`).join(\"\");\n    return `module.exports = require(${JSON.stringify(moduleName)})${objectLookup};`;\n  }\n\n  checkExternalVariable(variableToCheck, request) {\n    return `if(typeof ${variableToCheck} === 'undefined') {${WebpackMissingModule.moduleCode(request)}}\\n`;\n  }\n\n  getSourceForAmdOrUmdExternal(id, optional, request) {\n    const externalVariable = `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${id}`)}__`;\n    const missingModuleError = optional ? this.checkExternalVariable(externalVariable, request) : \"\";\n    return `${missingModuleError}module.exports = ${externalVariable};`;\n  }\n\n  getSourceForDefaultCase(optional, request) {\n    if (!Array.isArray(request)) {\n      // make it an array as the look up works the same basically\n      request = [request];\n    }\n\n    const variableName = request[0];\n    const missingModuleError = optional ? this.checkExternalVariable(variableName, request.join(\".\")) : \"\";\n    const objectLookup = request.slice(1).map(r => `[${JSON.stringify(r)}]`).join(\"\");\n    return `${missingModuleError}module.exports = ${variableName}${objectLookup};`;\n  }\n\n  getSourceString(runtime) {\n    const request = typeof this.request === \"object\" && !Array.isArray(this.request) ? this.request[this.externalType] : this.request;\n\n    switch (this.externalType) {\n      case \"this\":\n      case \"window\":\n      case \"self\":\n        return this.getSourceForGlobalVariableExternal(request, this.externalType);\n\n      case \"global\":\n        return this.getSourceForGlobalVariableExternal(request, runtime.outputOptions.globalObject);\n\n      case \"commonjs\":\n      case \"commonjs2\":\n        return this.getSourceForCommonJsExternal(request);\n\n      case \"amd\":\n      case \"amd-require\":\n      case \"umd\":\n      case \"umd2\":\n      case \"system\":\n        return this.getSourceForAmdOrUmdExternal(this.id, this.optional, request);\n\n      default:\n        return this.getSourceForDefaultCase(this.optional, request);\n    }\n  }\n\n  getSource(sourceString) {\n    if (this.useSourceMap) {\n      return new OriginalSource(sourceString, this.identifier());\n    }\n\n    return new RawSource(sourceString);\n  }\n\n  source(dependencyTemplates, runtime) {\n    return this.getSource(this.getSourceString(runtime));\n  }\n\n  size() {\n    return 42;\n  }\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @returns {void}\n   */\n\n\n  updateHash(hash) {\n    hash.update(this.externalType);\n    hash.update(JSON.stringify(this.request));\n    hash.update(JSON.stringify(Boolean(this.optional)));\n    super.updateHash(hash);\n  }\n\n}\n\nmodule.exports = ExternalModule;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/ExternalModule.js"],"names":["OriginalSource","RawSource","require","Module","WebpackMissingModule","Template","ExternalModule","constructor","request","type","userRequest","externalType","external","libIdent","chunkCondition","chunk","hasEntryModule","identifier","JSON","stringify","readableIdentifier","needRebuild","build","options","compilation","resolver","fs","callback","built","buildMeta","buildInfo","getSourceForGlobalVariableExternal","variableName","Array","isArray","objectLookup","map","r","join","getSourceForCommonJsExternal","moduleAndSpecifiers","moduleName","slice","checkExternalVariable","variableToCheck","moduleCode","getSourceForAmdOrUmdExternal","id","optional","externalVariable","toIdentifier","missingModuleError","getSourceForDefaultCase","getSourceString","runtime","outputOptions","globalObject","getSource","sourceString","useSourceMap","source","dependencyTemplates","size","updateHash","hash","update","Boolean","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { OriginalSource, RawSource } = require(\"webpack-sources\");\nconst Module = require(\"./Module\");\nconst WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\nconst Template = require(\"./Template\");\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\nclass ExternalModule extends Module {\n\tconstructor(request, type, userRequest) {\n\t\tsuper(\"javascript/dynamic\", null);\n\n\t\t// Info from Factory\n\t\tthis.request = request;\n\t\tthis.externalType = type;\n\t\tthis.userRequest = userRequest;\n\t\tthis.external = true;\n\t}\n\n\tlibIdent() {\n\t\treturn this.userRequest;\n\t}\n\n\tchunkCondition(chunk) {\n\t\treturn chunk.hasEntryModule();\n\t}\n\n\tidentifier() {\n\t\treturn \"external \" + JSON.stringify(this.request);\n\t}\n\n\treadableIdentifier() {\n\t\treturn \"external \" + JSON.stringify(this.request);\n\t}\n\n\tneedRebuild() {\n\t\treturn false;\n\t}\n\n\tbuild(options, compilation, resolver, fs, callback) {\n\t\tthis.built = true;\n\t\tthis.buildMeta = {};\n\t\tthis.buildInfo = {};\n\t\tcallback();\n\t}\n\n\tgetSourceForGlobalVariableExternal(variableName, type) {\n\t\tif (!Array.isArray(variableName)) {\n\t\t\t// make it an array as the look up works the same basically\n\t\t\tvariableName = [variableName];\n\t\t}\n\n\t\t// needed for e.g. window[\"some\"][\"thing\"]\n\t\tconst objectLookup = variableName\n\t\t\t.map(r => `[${JSON.stringify(r)}]`)\n\t\t\t.join(\"\");\n\t\treturn `(function() { module.exports = ${type}${objectLookup}; }());`;\n\t}\n\n\tgetSourceForCommonJsExternal(moduleAndSpecifiers) {\n\t\tif (!Array.isArray(moduleAndSpecifiers)) {\n\t\t\treturn `module.exports = require(${JSON.stringify(\n\t\t\t\tmoduleAndSpecifiers\n\t\t\t)});`;\n\t\t}\n\n\t\tconst moduleName = moduleAndSpecifiers[0];\n\t\tconst objectLookup = moduleAndSpecifiers\n\t\t\t.slice(1)\n\t\t\t.map(r => `[${JSON.stringify(r)}]`)\n\t\t\t.join(\"\");\n\t\treturn `module.exports = require(${JSON.stringify(\n\t\t\tmoduleName\n\t\t)})${objectLookup};`;\n\t}\n\n\tcheckExternalVariable(variableToCheck, request) {\n\t\treturn `if(typeof ${variableToCheck} === 'undefined') {${WebpackMissingModule.moduleCode(\n\t\t\trequest\n\t\t)}}\\n`;\n\t}\n\n\tgetSourceForAmdOrUmdExternal(id, optional, request) {\n\t\tconst externalVariable = `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(\n\t\t\t`${id}`\n\t\t)}__`;\n\t\tconst missingModuleError = optional\n\t\t\t? this.checkExternalVariable(externalVariable, request)\n\t\t\t: \"\";\n\t\treturn `${missingModuleError}module.exports = ${externalVariable};`;\n\t}\n\n\tgetSourceForDefaultCase(optional, request) {\n\t\tif (!Array.isArray(request)) {\n\t\t\t// make it an array as the look up works the same basically\n\t\t\trequest = [request];\n\t\t}\n\n\t\tconst variableName = request[0];\n\t\tconst missingModuleError = optional\n\t\t\t? this.checkExternalVariable(variableName, request.join(\".\"))\n\t\t\t: \"\";\n\t\tconst objectLookup = request\n\t\t\t.slice(1)\n\t\t\t.map(r => `[${JSON.stringify(r)}]`)\n\t\t\t.join(\"\");\n\t\treturn `${missingModuleError}module.exports = ${variableName}${objectLookup};`;\n\t}\n\n\tgetSourceString(runtime) {\n\t\tconst request =\n\t\t\ttypeof this.request === \"object\" && !Array.isArray(this.request)\n\t\t\t\t? this.request[this.externalType]\n\t\t\t\t: this.request;\n\t\tswitch (this.externalType) {\n\t\t\tcase \"this\":\n\t\t\tcase \"window\":\n\t\t\tcase \"self\":\n\t\t\t\treturn this.getSourceForGlobalVariableExternal(\n\t\t\t\t\trequest,\n\t\t\t\t\tthis.externalType\n\t\t\t\t);\n\t\t\tcase \"global\":\n\t\t\t\treturn this.getSourceForGlobalVariableExternal(\n\t\t\t\t\trequest,\n\t\t\t\t\truntime.outputOptions.globalObject\n\t\t\t\t);\n\t\t\tcase \"commonjs\":\n\t\t\tcase \"commonjs2\":\n\t\t\t\treturn this.getSourceForCommonJsExternal(request);\n\t\t\tcase \"amd\":\n\t\t\tcase \"amd-require\":\n\t\t\tcase \"umd\":\n\t\t\tcase \"umd2\":\n\t\t\tcase \"system\":\n\t\t\t\treturn this.getSourceForAmdOrUmdExternal(\n\t\t\t\t\tthis.id,\n\t\t\t\t\tthis.optional,\n\t\t\t\t\trequest\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\treturn this.getSourceForDefaultCase(this.optional, request);\n\t\t}\n\t}\n\n\tgetSource(sourceString) {\n\t\tif (this.useSourceMap) {\n\t\t\treturn new OriginalSource(sourceString, this.identifier());\n\t\t}\n\n\t\treturn new RawSource(sourceString);\n\t}\n\n\tsource(dependencyTemplates, runtime) {\n\t\treturn this.getSource(this.getSourceString(runtime));\n\t}\n\n\tsize() {\n\t\treturn 42;\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @returns {void}\n\t */\n\tupdateHash(hash) {\n\t\thash.update(this.externalType);\n\t\thash.update(JSON.stringify(this.request));\n\t\thash.update(JSON.stringify(Boolean(this.optional)));\n\t\tsuper.updateHash(hash);\n\t}\n}\n\nmodule.exports = ExternalModule;\n"]},"metadata":{},"sourceType":"script"}