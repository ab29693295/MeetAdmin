{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n\nclass SetVarMainTemplatePlugin {\n  /**\n   * @param {string} varExpression the accessor where the library is exported\n   * @param {boolean} copyObject specify copying the exports\n   */\n  constructor(varExpression, copyObject) {\n    /** @type {string} */\n    this.varExpression = varExpression;\n    /** @type {boolean} */\n\n    this.copyObject = copyObject;\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  apply(compilation) {\n    const {\n      mainTemplate,\n      chunkTemplate\n    } = compilation;\n\n    const onRenderWithEntry = (source, chunk, hash) => {\n      const varExpression = mainTemplate.getAssetPath(this.varExpression, {\n        hash,\n        chunk\n      });\n\n      if (this.copyObject) {\n        return new ConcatSource(`(function(e, a) { for(var i in a) e[i] = a[i]; }(${varExpression}, `, source, \"))\");\n      } else {\n        const prefix = `${varExpression} =\\n`;\n        return new ConcatSource(prefix, source);\n      }\n    };\n\n    for (const template of [mainTemplate, chunkTemplate]) {\n      template.hooks.renderWithEntry.tap(\"SetVarMainTemplatePlugin\", onRenderWithEntry);\n    }\n\n    mainTemplate.hooks.globalHashPaths.tap(\"SetVarMainTemplatePlugin\", paths => {\n      if (this.varExpression) paths.push(this.varExpression);\n      return paths;\n    });\n    mainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", hash => {\n      hash.update(\"set var\");\n      hash.update(`${this.varExpression}`);\n      hash.update(`${this.copyObject}`);\n    });\n  }\n\n}\n\nmodule.exports = SetVarMainTemplatePlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/SetVarMainTemplatePlugin.js"],"names":["ConcatSource","require","SetVarMainTemplatePlugin","constructor","varExpression","copyObject","apply","compilation","mainTemplate","chunkTemplate","onRenderWithEntry","source","chunk","hash","getAssetPath","prefix","template","hooks","renderWithEntry","tap","globalHashPaths","paths","push","update","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,iBAAD,CAAhC;AAEA;;;AAEA,MAAMC,wBAAN,CAA+B;AAC9B;;;;AAIAC,EAAAA,WAAW,CAACC,aAAD,EAAgBC,UAAhB,EAA4B;AACtC;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACA;;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA;AAED;;;;;;AAIAC,EAAAA,KAAK,CAACC,WAAD,EAAc;AAClB,UAAM;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAkCF,WAAxC;;AAEA,UAAMG,iBAAiB,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBC,IAAhB,KAAyB;AAClD,YAAMT,aAAa,GAAGI,YAAY,CAACM,YAAb,CAA0B,KAAKV,aAA/B,EAA8C;AACnES,QAAAA,IADmE;AAEnED,QAAAA;AAFmE,OAA9C,CAAtB;;AAIA,UAAI,KAAKP,UAAT,EAAqB;AACpB,eAAO,IAAIL,YAAJ,CACL,oDAAmDI,aAAc,IAD5D,EAENO,MAFM,EAGN,IAHM,CAAP;AAKA,OAND,MAMO;AACN,cAAMI,MAAM,GAAI,GAAEX,aAAc,MAAhC;AACA,eAAO,IAAIJ,YAAJ,CAAiBe,MAAjB,EAAyBJ,MAAzB,CAAP;AACA;AACD,KAfD;;AAiBA,SAAK,MAAMK,QAAX,IAAuB,CAACR,YAAD,EAAeC,aAAf,CAAvB,EAAsD;AACrDO,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,0BADD,EAECT,iBAFD;AAIA;;AAEDF,IAAAA,YAAY,CAACS,KAAb,CAAmBG,eAAnB,CAAmCD,GAAnC,CACC,0BADD,EAECE,KAAK,IAAI;AACR,UAAI,KAAKjB,aAAT,EAAwBiB,KAAK,CAACC,IAAN,CAAW,KAAKlB,aAAhB;AACxB,aAAOiB,KAAP;AACA,KALF;AAOAb,IAAAA,YAAY,CAACS,KAAb,CAAmBJ,IAAnB,CAAwBM,GAAxB,CAA4B,0BAA5B,EAAwDN,IAAI,IAAI;AAC/DA,MAAAA,IAAI,CAACU,MAAL,CAAY,SAAZ;AACAV,MAAAA,IAAI,CAACU,MAAL,CAAa,GAAE,KAAKnB,aAAc,EAAlC;AACAS,MAAAA,IAAI,CAACU,MAAL,CAAa,GAAE,KAAKlB,UAAW,EAA/B;AACA,KAJD;AAKA;;AAvD6B;;AA0D/BmB,MAAM,CAACC,OAAP,GAAiBvB,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\nclass SetVarMainTemplatePlugin {\n\t/**\n\t * @param {string} varExpression the accessor where the library is exported\n\t * @param {boolean} copyObject specify copying the exports\n\t */\n\tconstructor(varExpression, copyObject) {\n\t\t/** @type {string} */\n\t\tthis.varExpression = varExpression;\n\t\t/** @type {boolean} */\n\t\tthis.copyObject = copyObject;\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation instance\n\t * @returns {void}\n\t */\n\tapply(compilation) {\n\t\tconst { mainTemplate, chunkTemplate } = compilation;\n\n\t\tconst onRenderWithEntry = (source, chunk, hash) => {\n\t\t\tconst varExpression = mainTemplate.getAssetPath(this.varExpression, {\n\t\t\t\thash,\n\t\t\t\tchunk\n\t\t\t});\n\t\t\tif (this.copyObject) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`(function(e, a) { for(var i in a) e[i] = a[i]; }(${varExpression}, `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"))\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst prefix = `${varExpression} =\\n`;\n\t\t\t\treturn new ConcatSource(prefix, source);\n\t\t\t}\n\t\t};\n\n\t\tfor (const template of [mainTemplate, chunkTemplate]) {\n\t\t\ttemplate.hooks.renderWithEntry.tap(\n\t\t\t\t\"SetVarMainTemplatePlugin\",\n\t\t\t\tonRenderWithEntry\n\t\t\t);\n\t\t}\n\n\t\tmainTemplate.hooks.globalHashPaths.tap(\n\t\t\t\"SetVarMainTemplatePlugin\",\n\t\t\tpaths => {\n\t\t\t\tif (this.varExpression) paths.push(this.varExpression);\n\t\t\t\treturn paths;\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"set var\");\n\t\t\thash.update(`${this.varExpression}`);\n\t\t\thash.update(`${this.copyObject}`);\n\t\t});\n\t}\n}\n\nmodule.exports = SetVarMainTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}