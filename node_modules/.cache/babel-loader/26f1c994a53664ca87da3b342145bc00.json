{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ContextDependencyHelpers = exports;\n/**\n * Escapes regular expression metacharacters\n * @param {string} str String to quote\n * @returns {string} Escaped string\n */\n\nconst quotemeta = str => {\n  return str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\n\nconst splitContextFromPrefix = prefix => {\n  const idx = prefix.lastIndexOf(\"/\");\n  let context = \".\";\n\n  if (idx >= 0) {\n    context = prefix.substr(0, idx);\n    prefix = `.${prefix.substr(idx)}`;\n  }\n\n  return {\n    context,\n    prefix\n  };\n};\n\nconst splitQueryFromPostfix = postfix => {\n  const idx = postfix.indexOf(\"?\");\n  let query = \"\";\n\n  if (idx >= 0) {\n    query = postfix.substr(idx);\n    postfix = postfix.substr(0, idx);\n  }\n\n  return {\n    postfix,\n    query\n  };\n};\n\nContextDependencyHelpers.create = (Dep, range, param, expr, options, contextOptions, // when parser is not passed in, expressions won't be walked\nparser = null) => {\n  if (param.isTemplateString()) {\n    let prefixRaw = param.quasis[0].string;\n    let postfixRaw = param.quasis.length > 1 ? param.quasis[param.quasis.length - 1].string : \"\";\n    const valueRange = param.range;\n    const {\n      context,\n      prefix\n    } = splitContextFromPrefix(prefixRaw);\n    const {\n      postfix,\n      query\n    } = splitQueryFromPostfix(postfixRaw); // When there are more than two quasis, the generated RegExp can be more precise\n    // We join the quasis with the expression regexp\n\n    const innerQuasis = param.quasis.slice(1, param.quasis.length - 1);\n    const innerRegExp = options.wrappedContextRegExp.source + innerQuasis.map(q => quotemeta(q.string) + options.wrappedContextRegExp.source).join(\"\"); // Example: `./context/pre${e}inner${e}inner2${e}post?query`\n    // context: \"./context\"\n    // prefix: \"./pre\"\n    // innerQuasis: [BEE(\"inner\"), BEE(\"inner2\")]\n    // (BEE = BasicEvaluatedExpression)\n    // postfix: \"post\"\n    // query: \"?query\"\n    // regExp: /^\\.\\/pre.*inner.*inner2.*post$/\n\n    const regExp = new RegExp(`^${quotemeta(prefix)}${innerRegExp}${quotemeta(postfix)}$`);\n    const dep = new Dep(Object.assign({\n      request: context + query,\n      recursive: options.wrappedContextRecursive,\n      regExp,\n      mode: \"sync\"\n    }, contextOptions), range, valueRange);\n    dep.loc = expr.loc;\n    const replaces = [];\n    param.parts.forEach((part, i) => {\n      if (i % 2 === 0) {\n        // Quasis or merged quasi\n        let range = part.range;\n        let value = part.string;\n\n        if (param.templateStringKind === \"cooked\") {\n          value = JSON.stringify(value);\n          value = value.slice(1, value.length - 1);\n        }\n\n        if (i === 0) {\n          // prefix\n          value = prefix;\n          range = [param.range[0], part.range[1]];\n          value = (param.templateStringKind === \"cooked\" ? \"`\" : \"String.raw`\") + value;\n        } else if (i === param.parts.length - 1) {\n          // postfix\n          value = postfix;\n          range = [part.range[0], param.range[1]];\n          value = value + \"`\";\n        } else if (part.expression && part.expression.type === \"TemplateElement\" && part.expression.value.raw === value) {\n          // Shortcut when it's a single quasi and doesn't need to be replaced\n          return;\n        }\n\n        replaces.push({\n          range,\n          value\n        });\n      } else {\n        // Expression\n        if (parser) {\n          parser.walkExpression(part.expression);\n        }\n      }\n    });\n    dep.replaces = replaces;\n    dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n    return dep;\n  } else if (param.isWrapped() && (param.prefix && param.prefix.isString() || param.postfix && param.postfix.isString())) {\n    let prefixRaw = param.prefix && param.prefix.isString() ? param.prefix.string : \"\";\n    let postfixRaw = param.postfix && param.postfix.isString() ? param.postfix.string : \"\";\n    const prefixRange = param.prefix && param.prefix.isString() ? param.prefix.range : null;\n    const postfixRange = param.postfix && param.postfix.isString() ? param.postfix.range : null;\n    const valueRange = param.range;\n    const {\n      context,\n      prefix\n    } = splitContextFromPrefix(prefixRaw);\n    const {\n      postfix,\n      query\n    } = splitQueryFromPostfix(postfixRaw);\n    const regExp = new RegExp(`^${quotemeta(prefix)}${options.wrappedContextRegExp.source}${quotemeta(postfix)}$`);\n    const dep = new Dep(Object.assign({\n      request: context + query,\n      recursive: options.wrappedContextRecursive,\n      regExp,\n      mode: \"sync\"\n    }, contextOptions), range, valueRange);\n    dep.loc = expr.loc;\n    const replaces = [];\n\n    if (prefixRange) {\n      replaces.push({\n        range: prefixRange,\n        value: JSON.stringify(prefix)\n      });\n    }\n\n    if (postfixRange) {\n      replaces.push({\n        range: postfixRange,\n        value: JSON.stringify(postfix)\n      });\n    }\n\n    dep.replaces = replaces;\n    dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n\n    if (parser && param.wrappedInnerExpressions) {\n      for (const part of param.wrappedInnerExpressions) {\n        if (part.expression) parser.walkExpression(part.expression);\n      }\n    }\n\n    return dep;\n  } else {\n    const dep = new Dep(Object.assign({\n      request: options.exprContextRequest,\n      recursive: options.exprContextRecursive,\n      regExp: options.exprContextRegExp,\n      mode: \"sync\"\n    }, contextOptions), range, param.range);\n    dep.loc = expr.loc;\n    dep.critical = options.exprContextCritical && \"the request of a dependency is an expression\";\n\n    if (parser) {\n      parser.walkExpression(param.expression);\n    }\n\n    return dep;\n  }\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/dependencies/ContextDependencyHelpers.js"],"names":["ContextDependencyHelpers","exports","quotemeta","str","replace","splitContextFromPrefix","prefix","idx","lastIndexOf","context","substr","splitQueryFromPostfix","postfix","indexOf","query","create","Dep","range","param","expr","options","contextOptions","parser","isTemplateString","prefixRaw","quasis","string","postfixRaw","length","valueRange","innerQuasis","slice","innerRegExp","wrappedContextRegExp","source","map","q","join","regExp","RegExp","dep","Object","assign","request","recursive","wrappedContextRecursive","mode","loc","replaces","parts","forEach","part","i","value","templateStringKind","JSON","stringify","expression","type","raw","push","walkExpression","critical","wrappedContextCritical","isWrapped","isString","prefixRange","postfixRange","wrappedInnerExpressions","exprContextRequest","exprContextRecursive","exprContextRegExp","exprContextCritical"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ContextDependencyHelpers = exports;\n\n/**\n * Escapes regular expression metacharacters\n * @param {string} str String to quote\n * @returns {string} Escaped string\n */\nconst quotemeta = str => {\n\treturn str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\n\nconst splitContextFromPrefix = prefix => {\n\tconst idx = prefix.lastIndexOf(\"/\");\n\tlet context = \".\";\n\tif (idx >= 0) {\n\t\tcontext = prefix.substr(0, idx);\n\t\tprefix = `.${prefix.substr(idx)}`;\n\t}\n\treturn {\n\t\tcontext,\n\t\tprefix\n\t};\n};\n\nconst splitQueryFromPostfix = postfix => {\n\tconst idx = postfix.indexOf(\"?\");\n\tlet query = \"\";\n\tif (idx >= 0) {\n\t\tquery = postfix.substr(idx);\n\t\tpostfix = postfix.substr(0, idx);\n\t}\n\treturn {\n\t\tpostfix,\n\t\tquery\n\t};\n};\n\nContextDependencyHelpers.create = (\n\tDep,\n\trange,\n\tparam,\n\texpr,\n\toptions,\n\tcontextOptions,\n\t// when parser is not passed in, expressions won't be walked\n\tparser = null\n) => {\n\tif (param.isTemplateString()) {\n\t\tlet prefixRaw = param.quasis[0].string;\n\t\tlet postfixRaw =\n\t\t\tparam.quasis.length > 1\n\t\t\t\t? param.quasis[param.quasis.length - 1].string\n\t\t\t\t: \"\";\n\n\t\tconst valueRange = param.range;\n\t\tconst { context, prefix } = splitContextFromPrefix(prefixRaw);\n\t\tconst { postfix, query } = splitQueryFromPostfix(postfixRaw);\n\n\t\t// When there are more than two quasis, the generated RegExp can be more precise\n\t\t// We join the quasis with the expression regexp\n\t\tconst innerQuasis = param.quasis.slice(1, param.quasis.length - 1);\n\t\tconst innerRegExp =\n\t\t\toptions.wrappedContextRegExp.source +\n\t\t\tinnerQuasis\n\t\t\t\t.map(q => quotemeta(q.string) + options.wrappedContextRegExp.source)\n\t\t\t\t.join(\"\");\n\n\t\t// Example: `./context/pre${e}inner${e}inner2${e}post?query`\n\t\t// context: \"./context\"\n\t\t// prefix: \"./pre\"\n\t\t// innerQuasis: [BEE(\"inner\"), BEE(\"inner2\")]\n\t\t// (BEE = BasicEvaluatedExpression)\n\t\t// postfix: \"post\"\n\t\t// query: \"?query\"\n\t\t// regExp: /^\\.\\/pre.*inner.*inner2.*post$/\n\t\tconst regExp = new RegExp(\n\t\t\t`^${quotemeta(prefix)}${innerRegExp}${quotemeta(postfix)}$`\n\t\t);\n\t\tconst dep = new Dep(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\trequest: context + query,\n\t\t\t\t\trecursive: options.wrappedContextRecursive,\n\t\t\t\t\tregExp,\n\t\t\t\t\tmode: \"sync\"\n\t\t\t\t},\n\t\t\t\tcontextOptions\n\t\t\t),\n\t\t\trange,\n\t\t\tvalueRange\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tconst replaces = [];\n\n\t\tparam.parts.forEach((part, i) => {\n\t\t\tif (i % 2 === 0) {\n\t\t\t\t// Quasis or merged quasi\n\t\t\t\tlet range = part.range;\n\t\t\t\tlet value = part.string;\n\t\t\t\tif (param.templateStringKind === \"cooked\") {\n\t\t\t\t\tvalue = JSON.stringify(value);\n\t\t\t\t\tvalue = value.slice(1, value.length - 1);\n\t\t\t\t}\n\t\t\t\tif (i === 0) {\n\t\t\t\t\t// prefix\n\t\t\t\t\tvalue = prefix;\n\t\t\t\t\trange = [param.range[0], part.range[1]];\n\t\t\t\t\tvalue =\n\t\t\t\t\t\t(param.templateStringKind === \"cooked\" ? \"`\" : \"String.raw`\") +\n\t\t\t\t\t\tvalue;\n\t\t\t\t} else if (i === param.parts.length - 1) {\n\t\t\t\t\t// postfix\n\t\t\t\t\tvalue = postfix;\n\t\t\t\t\trange = [part.range[0], param.range[1]];\n\t\t\t\t\tvalue = value + \"`\";\n\t\t\t\t} else if (\n\t\t\t\t\tpart.expression &&\n\t\t\t\t\tpart.expression.type === \"TemplateElement\" &&\n\t\t\t\t\tpart.expression.value.raw === value\n\t\t\t\t) {\n\t\t\t\t\t// Shortcut when it's a single quasi and doesn't need to be replaced\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treplaces.push({\n\t\t\t\t\trange,\n\t\t\t\t\tvalue\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Expression\n\t\t\t\tif (parser) {\n\t\t\t\t\tparser.walkExpression(part.expression);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tdep.replaces = replaces;\n\t\tdep.critical =\n\t\t\toptions.wrappedContextCritical &&\n\t\t\t\"a part of the request of a dependency is an expression\";\n\t\treturn dep;\n\t} else if (\n\t\tparam.isWrapped() &&\n\t\t((param.prefix && param.prefix.isString()) ||\n\t\t\t(param.postfix && param.postfix.isString()))\n\t) {\n\t\tlet prefixRaw =\n\t\t\tparam.prefix && param.prefix.isString() ? param.prefix.string : \"\";\n\t\tlet postfixRaw =\n\t\t\tparam.postfix && param.postfix.isString() ? param.postfix.string : \"\";\n\t\tconst prefixRange =\n\t\t\tparam.prefix && param.prefix.isString() ? param.prefix.range : null;\n\t\tconst postfixRange =\n\t\t\tparam.postfix && param.postfix.isString() ? param.postfix.range : null;\n\t\tconst valueRange = param.range;\n\t\tconst { context, prefix } = splitContextFromPrefix(prefixRaw);\n\t\tconst { postfix, query } = splitQueryFromPostfix(postfixRaw);\n\t\tconst regExp = new RegExp(\n\t\t\t`^${quotemeta(prefix)}${options.wrappedContextRegExp.source}${quotemeta(\n\t\t\t\tpostfix\n\t\t\t)}$`\n\t\t);\n\t\tconst dep = new Dep(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\trequest: context + query,\n\t\t\t\t\trecursive: options.wrappedContextRecursive,\n\t\t\t\t\tregExp,\n\t\t\t\t\tmode: \"sync\"\n\t\t\t\t},\n\t\t\t\tcontextOptions\n\t\t\t),\n\t\t\trange,\n\t\t\tvalueRange\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tconst replaces = [];\n\t\tif (prefixRange) {\n\t\t\treplaces.push({\n\t\t\t\trange: prefixRange,\n\t\t\t\tvalue: JSON.stringify(prefix)\n\t\t\t});\n\t\t}\n\t\tif (postfixRange) {\n\t\t\treplaces.push({\n\t\t\t\trange: postfixRange,\n\t\t\t\tvalue: JSON.stringify(postfix)\n\t\t\t});\n\t\t}\n\t\tdep.replaces = replaces;\n\t\tdep.critical =\n\t\t\toptions.wrappedContextCritical &&\n\t\t\t\"a part of the request of a dependency is an expression\";\n\n\t\tif (parser && param.wrappedInnerExpressions) {\n\t\t\tfor (const part of param.wrappedInnerExpressions) {\n\t\t\t\tif (part.expression) parser.walkExpression(part.expression);\n\t\t\t}\n\t\t}\n\n\t\treturn dep;\n\t} else {\n\t\tconst dep = new Dep(\n\t\t\tObject.assign(\n\t\t\t\t{\n\t\t\t\t\trequest: options.exprContextRequest,\n\t\t\t\t\trecursive: options.exprContextRecursive,\n\t\t\t\t\tregExp: options.exprContextRegExp,\n\t\t\t\t\tmode: \"sync\"\n\t\t\t\t},\n\t\t\t\tcontextOptions\n\t\t\t),\n\t\t\trange,\n\t\t\tparam.range\n\t\t);\n\t\tdep.loc = expr.loc;\n\t\tdep.critical =\n\t\t\toptions.exprContextCritical &&\n\t\t\t\"the request of a dependency is an expression\";\n\n\t\tif (parser) {\n\t\t\tparser.walkExpression(param.expression);\n\t\t}\n\n\t\treturn dep;\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}