{"ast":null,"code":"'use strict';\n\nconst BB = require('bluebird');\n\nconst chownr = BB.promisify(require('chownr'));\nconst mkdirp = BB.promisify(require('mkdirp'));\n\nconst inflight = require('promise-inflight');\n\nconst inferOwner = require('infer-owner'); // Memoize getuid()/getgid() calls.\n// patch process.setuid/setgid to invalidate cached value on change\n\n\nconst self = {\n  uid: null,\n  gid: null\n};\n\nconst getSelf = () => {\n  if (typeof self.uid !== 'number') {\n    self.uid = process.getuid();\n    const setuid = process.setuid;\n\n    process.setuid = uid => {\n      self.uid = null;\n      process.setuid = setuid;\n      return process.setuid(uid);\n    };\n  }\n\n  if (typeof self.gid !== 'number') {\n    self.gid = process.getgid();\n    const setgid = process.setgid;\n\n    process.setgid = gid => {\n      self.gid = null;\n      process.setgid = setgid;\n      return process.setgid(gid);\n    };\n  }\n};\n\nmodule.exports.chownr = fixOwner;\n\nfunction fixOwner(cache, filepath) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return BB.resolve();\n  }\n\n  getSelf();\n\n  if (self.uid !== 0) {\n    // almost certainly can't chown anyway\n    return BB.resolve();\n  }\n\n  return BB.resolve(inferOwner(cache)).then(owner => {\n    const {\n      uid,\n      gid\n    } = owner; // No need to override if it's already what we used.\n\n    if (self.uid === uid && self.gid === gid) {\n      return;\n    }\n\n    return inflight('fixOwner: fixing ownership on ' + filepath, () => chownr(filepath, typeof uid === 'number' ? uid : self.uid, typeof gid === 'number' ? gid : self.gid).catch({\n      code: 'ENOENT'\n    }, () => null));\n  });\n}\n\nmodule.exports.chownr.sync = fixOwnerSync;\n\nfunction fixOwnerSync(cache, filepath) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return;\n  }\n\n  const {\n    uid,\n    gid\n  } = inferOwner.sync(cache);\n  getSelf();\n\n  if (self.uid === uid && self.gid === gid) {\n    // No need to override if it's already what we used.\n    return;\n  }\n\n  try {\n    chownr.sync(filepath, typeof uid === 'number' ? uid : self.uid, typeof gid === 'number' ? gid : self.gid);\n  } catch (err) {\n    // only catch ENOENT, any other error is a problem.\n    if (err.code === 'ENOENT') {\n      return null;\n    }\n\n    throw err;\n  }\n}\n\nmodule.exports.mkdirfix = mkdirfix;\n\nfunction mkdirfix(cache, p, cb) {\n  // we have to infer the owner _before_ making the directory, even though\n  // we aren't going to use the results, since the cache itself might not\n  // exist yet.  If we mkdirp it, then our current uid/gid will be assumed\n  // to be correct if it creates the cache folder in the process.\n  return BB.resolve(inferOwner(cache)).then(() => {\n    return mkdirp(p).then(made => {\n      if (made) {\n        return fixOwner(cache, made).then(() => made);\n      }\n    }).catch({\n      code: 'EEXIST'\n    }, () => {\n      // There's a race in mkdirp!\n      return fixOwner(cache, p).then(() => null);\n    });\n  });\n}\n\nmodule.exports.mkdirfix.sync = mkdirfixSync;\n\nfunction mkdirfixSync(cache, p) {\n  try {\n    inferOwner.sync(cache);\n    const made = mkdirp.sync(p);\n\n    if (made) {\n      fixOwnerSync(cache, made);\n      return made;\n    }\n  } catch (err) {\n    if (err.code === 'EEXIST') {\n      fixOwnerSync(cache, p);\n      return null;\n    } else {\n      throw err;\n    }\n  }\n}","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/node_modules/cacache/lib/util/fix-owner.js"],"names":["BB","require","chownr","promisify","mkdirp","inflight","inferOwner","self","uid","gid","getSelf","process","getuid","setuid","getgid","setgid","module","exports","fixOwner","cache","filepath","resolve","then","owner","catch","code","sync","fixOwnerSync","err","mkdirfix","p","cb","made","mkdirfixSync"],"mappings":"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","sourcesContent":["'use strict'\n\nconst BB = require('bluebird')\n\nconst chownr = BB.promisify(require('chownr'))\nconst mkdirp = BB.promisify(require('mkdirp'))\nconst inflight = require('promise-inflight')\nconst inferOwner = require('infer-owner')\n\n// Memoize getuid()/getgid() calls.\n// patch process.setuid/setgid to invalidate cached value on change\nconst self = { uid: null, gid: null }\nconst getSelf = () => {\n  if (typeof self.uid !== 'number') {\n    self.uid = process.getuid()\n    const setuid = process.setuid\n    process.setuid = (uid) => {\n      self.uid = null\n      process.setuid = setuid\n      return process.setuid(uid)\n    }\n  }\n  if (typeof self.gid !== 'number') {\n    self.gid = process.getgid()\n    const setgid = process.setgid\n    process.setgid = (gid) => {\n      self.gid = null\n      process.setgid = setgid\n      return process.setgid(gid)\n    }\n  }\n}\n\nmodule.exports.chownr = fixOwner\nfunction fixOwner (cache, filepath) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return BB.resolve()\n  }\n\n  getSelf()\n  if (self.uid !== 0) {\n    // almost certainly can't chown anyway\n    return BB.resolve()\n  }\n\n  return BB.resolve(inferOwner(cache)).then(owner => {\n    const { uid, gid } = owner\n\n    // No need to override if it's already what we used.\n    if (self.uid === uid && self.gid === gid) {\n      return\n    }\n\n    return inflight(\n      'fixOwner: fixing ownership on ' + filepath,\n      () => chownr(\n        filepath,\n        typeof uid === 'number' ? uid : self.uid,\n        typeof gid === 'number' ? gid : self.gid\n      ).catch({ code: 'ENOENT' }, () => null)\n    )\n  })\n}\n\nmodule.exports.chownr.sync = fixOwnerSync\nfunction fixOwnerSync (cache, filepath) {\n  if (!process.getuid) {\n    // This platform doesn't need ownership fixing\n    return\n  }\n  const { uid, gid } = inferOwner.sync(cache)\n  getSelf()\n  if (self.uid === uid && self.gid === gid) {\n    // No need to override if it's already what we used.\n    return\n  }\n  try {\n    chownr.sync(\n      filepath,\n      typeof uid === 'number' ? uid : self.uid,\n      typeof gid === 'number' ? gid : self.gid\n    )\n  } catch (err) {\n    // only catch ENOENT, any other error is a problem.\n    if (err.code === 'ENOENT') {\n      return null\n    }\n    throw err\n  }\n}\n\nmodule.exports.mkdirfix = mkdirfix\nfunction mkdirfix (cache, p, cb) {\n  // we have to infer the owner _before_ making the directory, even though\n  // we aren't going to use the results, since the cache itself might not\n  // exist yet.  If we mkdirp it, then our current uid/gid will be assumed\n  // to be correct if it creates the cache folder in the process.\n  return BB.resolve(inferOwner(cache)).then(() => {\n    return mkdirp(p).then(made => {\n      if (made) {\n        return fixOwner(cache, made).then(() => made)\n      }\n    }).catch({ code: 'EEXIST' }, () => {\n      // There's a race in mkdirp!\n      return fixOwner(cache, p).then(() => null)\n    })\n  })\n}\n\nmodule.exports.mkdirfix.sync = mkdirfixSync\nfunction mkdirfixSync (cache, p) {\n  try {\n    inferOwner.sync(cache)\n    const made = mkdirp.sync(p)\n    if (made) {\n      fixOwnerSync(cache, made)\n      return made\n    }\n  } catch (err) {\n    if (err.code === 'EEXIST') {\n      fixOwnerSync(cache, p)\n      return null\n    } else {\n      throw err\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}