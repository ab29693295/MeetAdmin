{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\n\nconst {\n  decode\n} = require(\"@webassemblyjs/wasm-parser\");\n\nconst {\n  moduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\n\nconst {\n  Tapable\n} = require(\"tapable\");\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\nconst getJsIncompatibleType = signature => {\n  for (const param of signature.params) {\n    if (!JS_COMPAT_TYPES.has(param.valtype)) {\n      return `${param.valtype} as parameter`;\n    }\n  }\n\n  for (const type of signature.results) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n\n  return null;\n};\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\n\n\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\n  for (const param of signature.args) {\n    if (!JS_COMPAT_TYPES.has(param)) {\n      return `${param} as parameter`;\n    }\n  }\n\n  for (const type of signature.result) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n\n  return null;\n};\n\nconst decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\n\nclass WebAssemblyParser extends Tapable {\n  constructor(options) {\n    super();\n    this.hooks = {};\n    this.options = options;\n  }\n\n  parse(binary, state) {\n    // flag it as ESM\n    state.module.buildMeta.exportsType = \"namespace\"; // parse it\n\n    const program = decode(binary, decoderOpts);\n    const module = program.body[0];\n    const moduleContext = moduleContextFromModuleAST(module); // extract imports and exports\n\n    const exports = state.module.buildMeta.providedExports = [];\n    const jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = [];\n    const importedGlobals = [];\n    t.traverse(module, {\n      ModuleExport({\n        node\n      }) {\n        const descriptor = node.descr;\n\n        if (descriptor.exportType === \"Func\") {\n          const funcidx = descriptor.id.value;\n          /** @type {t.FuncSignature} */\n\n          const funcSignature = moduleContext.getFunction(funcidx);\n          const incompatibleType = getJsIncompatibleTypeOfFuncSignature(funcSignature);\n\n          if (incompatibleType) {\n            jsIncompatibleExports[node.name] = incompatibleType;\n          }\n        }\n\n        exports.push(node.name);\n\n        if (node.descr && node.descr.exportType === \"Global\") {\n          const refNode = importedGlobals[node.descr.id.value];\n\n          if (refNode) {\n            const dep = new WebAssemblyExportImportedDependency(node.name, refNode.module, refNode.name, refNode.descr.valtype);\n            state.module.addDependency(dep);\n          }\n        }\n      },\n\n      Global({\n        node\n      }) {\n        const init = node.init[0];\n        let importNode = null;\n\n        if (init.id === \"get_global\") {\n          const globalIdx = init.args[0].value;\n\n          if (globalIdx < importedGlobals.length) {\n            importNode = importedGlobals[globalIdx];\n          }\n        }\n\n        importedGlobals.push(importNode);\n      },\n\n      ModuleImport({\n        node\n      }) {\n        /** @type {false | string} */\n        let onlyDirectImport = false;\n\n        if (t.isMemory(node.descr) === true) {\n          onlyDirectImport = \"Memory\";\n        } else if (t.isTable(node.descr) === true) {\n          onlyDirectImport = \"Table\";\n        } else if (t.isFuncImportDescr(node.descr) === true) {\n          const incompatibleType = getJsIncompatibleType(node.descr.signature);\n\n          if (incompatibleType) {\n            onlyDirectImport = `Non-JS-compatible Func Sigurature (${incompatibleType})`;\n          }\n        } else if (t.isGlobalType(node.descr) === true) {\n          const type = node.descr.valtype;\n\n          if (!JS_COMPAT_TYPES.has(type)) {\n            onlyDirectImport = `Non-JS-compatible Global Type (${type})`;\n          }\n        }\n\n        const dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, onlyDirectImport);\n        state.module.addDependency(dep);\n\n        if (t.isGlobalType(node.descr)) {\n          importedGlobals.push(node);\n        }\n      }\n\n    });\n    return state;\n  }\n\n}\n\nmodule.exports = WebAssemblyParser;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/wasm/WebAssemblyParser.js"],"names":["t","require","decode","moduleContextFromModuleAST","Tapable","WebAssemblyImportDependency","WebAssemblyExportImportedDependency","JS_COMPAT_TYPES","Set","getJsIncompatibleType","signature","param","params","has","valtype","type","results","getJsIncompatibleTypeOfFuncSignature","args","result","decoderOpts","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","WebAssemblyParser","constructor","options","hooks","parse","binary","state","module","buildMeta","exportsType","program","body","moduleContext","exports","providedExports","jsIncompatibleExports","importedGlobals","traverse","ModuleExport","node","descriptor","descr","exportType","funcidx","id","value","funcSignature","getFunction","incompatibleType","name","push","refNode","dep","addDependency","Global","init","importNode","globalIdx","length","ModuleImport","onlyDirectImport","isMemory","isTable","isFuncImportDescr","isGlobalType"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst {\n\tmoduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\n\nconst { Tapable } = require(\"tapable\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"f32\", \"f64\"]);\n\n/**\n * @param {t.Signature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleType = signature => {\n\tfor (const param of signature.params) {\n\t\tif (!JS_COMPAT_TYPES.has(param.valtype)) {\n\t\t\treturn `${param.valtype} as parameter`;\n\t\t}\n\t}\n\tfor (const type of signature.results) {\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n\t}\n\treturn null;\n};\n\n/**\n * TODO why are there two different Signature types?\n * @param {t.FuncSignature} signature the func signature\n * @returns {null | string} the type incompatible with js types\n */\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\n\tfor (const param of signature.args) {\n\t\tif (!JS_COMPAT_TYPES.has(param)) {\n\t\t\treturn `${param} as parameter`;\n\t\t}\n\t}\n\tfor (const type of signature.result) {\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n\t}\n\treturn null;\n};\n\nconst decoderOpts = {\n\tignoreCodeSection: true,\n\tignoreDataSection: true,\n\n\t// this will avoid having to lookup with identifiers in the ModuleContext\n\tignoreCustomNameSection: true\n};\n\nclass WebAssemblyParser extends Tapable {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.hooks = {};\n\t\tthis.options = options;\n\t}\n\n\tparse(binary, state) {\n\t\t// flag it as ESM\n\t\tstate.module.buildMeta.exportsType = \"namespace\";\n\n\t\t// parse it\n\t\tconst program = decode(binary, decoderOpts);\n\t\tconst module = program.body[0];\n\n\t\tconst moduleContext = moduleContextFromModuleAST(module);\n\n\t\t// extract imports and exports\n\t\tconst exports = (state.module.buildMeta.providedExports = []);\n\t\tconst jsIncompatibleExports = (state.module.buildMeta.jsIncompatibleExports = []);\n\n\t\tconst importedGlobals = [];\n\t\tt.traverse(module, {\n\t\t\tModuleExport({ node }) {\n\t\t\t\tconst descriptor = node.descr;\n\n\t\t\t\tif (descriptor.exportType === \"Func\") {\n\t\t\t\t\tconst funcidx = descriptor.id.value;\n\n\t\t\t\t\t/** @type {t.FuncSignature} */\n\t\t\t\t\tconst funcSignature = moduleContext.getFunction(funcidx);\n\n\t\t\t\t\tconst incompatibleType = getJsIncompatibleTypeOfFuncSignature(\n\t\t\t\t\t\tfuncSignature\n\t\t\t\t\t);\n\n\t\t\t\t\tif (incompatibleType) {\n\t\t\t\t\t\tjsIncompatibleExports[node.name] = incompatibleType;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\texports.push(node.name);\n\n\t\t\t\tif (node.descr && node.descr.exportType === \"Global\") {\n\t\t\t\t\tconst refNode = importedGlobals[node.descr.id.value];\n\t\t\t\t\tif (refNode) {\n\t\t\t\t\t\tconst dep = new WebAssemblyExportImportedDependency(\n\t\t\t\t\t\t\tnode.name,\n\t\t\t\t\t\t\trefNode.module,\n\t\t\t\t\t\t\trefNode.name,\n\t\t\t\t\t\t\trefNode.descr.valtype\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tstate.module.addDependency(dep);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tGlobal({ node }) {\n\t\t\t\tconst init = node.init[0];\n\n\t\t\t\tlet importNode = null;\n\n\t\t\t\tif (init.id === \"get_global\") {\n\t\t\t\t\tconst globalIdx = init.args[0].value;\n\n\t\t\t\t\tif (globalIdx < importedGlobals.length) {\n\t\t\t\t\t\timportNode = importedGlobals[globalIdx];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\timportedGlobals.push(importNode);\n\t\t\t},\n\n\t\t\tModuleImport({ node }) {\n\t\t\t\t/** @type {false | string} */\n\t\t\t\tlet onlyDirectImport = false;\n\n\t\t\t\tif (t.isMemory(node.descr) === true) {\n\t\t\t\t\tonlyDirectImport = \"Memory\";\n\t\t\t\t} else if (t.isTable(node.descr) === true) {\n\t\t\t\t\tonlyDirectImport = \"Table\";\n\t\t\t\t} else if (t.isFuncImportDescr(node.descr) === true) {\n\t\t\t\t\tconst incompatibleType = getJsIncompatibleType(node.descr.signature);\n\t\t\t\t\tif (incompatibleType) {\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Func Sigurature (${incompatibleType})`;\n\t\t\t\t\t}\n\t\t\t\t} else if (t.isGlobalType(node.descr) === true) {\n\t\t\t\t\tconst type = node.descr.valtype;\n\t\t\t\t\tif (!JS_COMPAT_TYPES.has(type)) {\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Global Type (${type})`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst dep = new WebAssemblyImportDependency(\n\t\t\t\t\tnode.module,\n\t\t\t\t\tnode.name,\n\t\t\t\t\tnode.descr,\n\t\t\t\t\tonlyDirectImport\n\t\t\t\t);\n\n\t\t\t\tstate.module.addDependency(dep);\n\n\t\t\t\tif (t.isGlobalType(node.descr)) {\n\t\t\t\t\timportedGlobals.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = WebAssemblyParser;\n"]},"metadata":{},"sourceType":"script"}