{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  RawSource,\n  ReplaceSource\n} = require(\"webpack-sources\");\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/** @typedef {Map<Function, DependencyTemplate>} DependencyTemplates */\n\n\nclass DependenciesBlockVariable {\n  /**\n   * Creates an instance of DependenciesBlockVariable.\n   * @param {string} name name of DependenciesBlockVariable\n   * @param {string} expression expression string\n   * @param {Dependency[]=} dependencies dependencies tied to this varaiable\n   */\n  constructor(name, expression, dependencies) {\n    this.name = name;\n    this.expression = expression;\n    this.dependencies = dependencies || [];\n  }\n  /**\n   * @param {Hash} hash hash for instance to update\n   * @returns {void}\n   */\n\n\n  updateHash(hash) {\n    hash.update(this.name);\n    hash.update(this.expression);\n\n    for (const d of this.dependencies) {\n      d.updateHash(hash);\n    }\n  }\n  /**\n   * @param {DependencyTemplates} dependencyTemplates Dependency constructors and templates Map.\n   * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate to generate expression souce\n   * @returns {ReplaceSource} returns constructed source for expression via templates\n   */\n\n\n  expressionSource(dependencyTemplates, runtimeTemplate) {\n    const source = new ReplaceSource(new RawSource(this.expression));\n\n    for (const dep of this.dependencies) {\n      const template = dependencyTemplates.get(dep.constructor);\n\n      if (!template) {\n        throw new Error(`No template for dependency: ${dep.constructor.name}`);\n      }\n\n      template.apply(dep, source, runtimeTemplate, dependencyTemplates);\n    }\n\n    return source;\n  }\n\n  disconnect() {\n    for (const d of this.dependencies) {\n      d.disconnect();\n    }\n  }\n\n  hasDependencies(filter) {\n    if (filter) {\n      return this.dependencies.some(filter);\n    }\n\n    return this.dependencies.length > 0;\n  }\n\n}\n\nmodule.exports = DependenciesBlockVariable;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/DependenciesBlockVariable.js"],"names":["RawSource","ReplaceSource","require","DependenciesBlockVariable","constructor","name","expression","dependencies","updateHash","hash","update","d","expressionSource","dependencyTemplates","runtimeTemplate","source","dep","template","get","Error","apply","disconnect","hasDependencies","filter","some","length","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAM;AAAEA,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAA+BC,OAAO,CAAC,iBAAD,CAA5C;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMC,yBAAN,CAAgC;AAC/B;;;;;;AAMAC,EAAAA,WAAW,CAACC,IAAD,EAAOC,UAAP,EAAmBC,YAAnB,EAAiC;AAC3C,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,YAAL,GAAoBA,YAAY,IAAI,EAApC;AACA;AAED;;;;;;AAIAC,EAAAA,UAAU,CAACC,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAACC,MAAL,CAAY,KAAKL,IAAjB;AACAI,IAAAA,IAAI,CAACC,MAAL,CAAY,KAAKJ,UAAjB;;AACA,SAAK,MAAMK,CAAX,IAAgB,KAAKJ,YAArB,EAAmC;AAClCI,MAAAA,CAAC,CAACH,UAAF,CAAaC,IAAb;AACA;AACD;AAED;;;;;;;AAKAG,EAAAA,gBAAgB,CAACC,mBAAD,EAAsBC,eAAtB,EAAuC;AACtD,UAAMC,MAAM,GAAG,IAAId,aAAJ,CAAkB,IAAID,SAAJ,CAAc,KAAKM,UAAnB,CAAlB,CAAf;;AACA,SAAK,MAAMU,GAAX,IAAkB,KAAKT,YAAvB,EAAqC;AACpC,YAAMU,QAAQ,GAAGJ,mBAAmB,CAACK,GAApB,CAAwBF,GAAG,CAACZ,WAA5B,CAAjB;;AACA,UAAI,CAACa,QAAL,EAAe;AACd,cAAM,IAAIE,KAAJ,CAAW,+BAA8BH,GAAG,CAACZ,WAAJ,CAAgBC,IAAK,EAA9D,CAAN;AACA;;AACDY,MAAAA,QAAQ,CAACG,KAAT,CAAeJ,GAAf,EAAoBD,MAApB,EAA4BD,eAA5B,EAA6CD,mBAA7C;AACA;;AACD,WAAOE,MAAP;AACA;;AAEDM,EAAAA,UAAU,GAAG;AACZ,SAAK,MAAMV,CAAX,IAAgB,KAAKJ,YAArB,EAAmC;AAClCI,MAAAA,CAAC,CAACU,UAAF;AACA;AACD;;AAEDC,EAAAA,eAAe,CAACC,MAAD,EAAS;AACvB,QAAIA,MAAJ,EAAY;AACX,aAAO,KAAKhB,YAAL,CAAkBiB,IAAlB,CAAuBD,MAAvB,CAAP;AACA;;AACD,WAAO,KAAKhB,YAAL,CAAkBkB,MAAlB,GAA2B,CAAlC;AACA;;AArD8B;;AAwDhCC,MAAM,CAACC,OAAP,GAAiBxB,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { RawSource, ReplaceSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n/** @typedef {Map<Function, DependencyTemplate>} DependencyTemplates */\n\nclass DependenciesBlockVariable {\n\t/**\n\t * Creates an instance of DependenciesBlockVariable.\n\t * @param {string} name name of DependenciesBlockVariable\n\t * @param {string} expression expression string\n\t * @param {Dependency[]=} dependencies dependencies tied to this varaiable\n\t */\n\tconstructor(name, expression, dependencies) {\n\t\tthis.name = name;\n\t\tthis.expression = expression;\n\t\tthis.dependencies = dependencies || [];\n\t}\n\n\t/**\n\t * @param {Hash} hash hash for instance to update\n\t * @returns {void}\n\t */\n\tupdateHash(hash) {\n\t\thash.update(this.name);\n\t\thash.update(this.expression);\n\t\tfor (const d of this.dependencies) {\n\t\t\td.updateHash(hash);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DependencyTemplates} dependencyTemplates Dependency constructors and templates Map.\n\t * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate to generate expression souce\n\t * @returns {ReplaceSource} returns constructed source for expression via templates\n\t */\n\texpressionSource(dependencyTemplates, runtimeTemplate) {\n\t\tconst source = new ReplaceSource(new RawSource(this.expression));\n\t\tfor (const dep of this.dependencies) {\n\t\t\tconst template = dependencyTemplates.get(dep.constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(`No template for dependency: ${dep.constructor.name}`);\n\t\t\t}\n\t\t\ttemplate.apply(dep, source, runtimeTemplate, dependencyTemplates);\n\t\t}\n\t\treturn source;\n\t}\n\n\tdisconnect() {\n\t\tfor (const d of this.dependencies) {\n\t\t\td.disconnect();\n\t\t}\n\t}\n\n\thasDependencies(filter) {\n\t\tif (filter) {\n\t\t\treturn this.dependencies.some(filter);\n\t\t}\n\t\treturn this.dependencies.length > 0;\n\t}\n}\n\nmodule.exports = DependenciesBlockVariable;\n"]},"metadata":{},"sourceType":"script"}