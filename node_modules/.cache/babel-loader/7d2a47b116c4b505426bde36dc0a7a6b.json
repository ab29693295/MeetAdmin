{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nclass FetchCompileWasmTemplatePlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"FetchCompileWasmTemplatePlugin\", compilation => {\n      const mainTemplate = compilation.mainTemplate;\n\n      const generateLoadBinaryCode = path => `fetch(${mainTemplate.requireFn}.p + ${path})`;\n\n      const plugin = new WasmMainTemplatePlugin(Object.assign({\n        generateLoadBinaryCode,\n        supportsStreaming: true\n      }, this.options));\n      plugin.apply(mainTemplate);\n    });\n  }\n\n}\n\nmodule.exports = FetchCompileWasmTemplatePlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/web/FetchCompileWasmTemplatePlugin.js"],"names":["WasmMainTemplatePlugin","require","FetchCompileWasmTemplatePlugin","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","mainTemplate","generateLoadBinaryCode","path","requireFn","plugin","Object","assign","supportsStreaming","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,gCAAD,CAAtC;;AAEA,MAAMC,8BAAN,CAAqC;AACpCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,gCADD,EAECC,WAAW,IAAI;AACd,YAAMC,YAAY,GAAGD,WAAW,CAACC,YAAjC;;AACA,YAAMC,sBAAsB,GAAGC,IAAI,IACjC,SAAQF,YAAY,CAACG,SAAU,QAAOD,IAAK,GAD7C;;AAGA,YAAME,MAAM,GAAG,IAAIf,sBAAJ,CACdgB,MAAM,CAACC,MAAP,CACC;AACCL,QAAAA,sBADD;AAECM,QAAAA,iBAAiB,EAAE;AAFpB,OADD,EAKC,KAAKd,OALN,CADc,CAAf;AASAW,MAAAA,MAAM,CAACV,KAAP,CAAaM,YAAb;AACA,KAjBF;AAmBA;;AAzBmC;;AA4BrCQ,MAAM,CAACC,OAAP,GAAiBlB,8BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst WasmMainTemplatePlugin = require(\"../wasm/WasmMainTemplatePlugin\");\n\nclass FetchCompileWasmTemplatePlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileWasmTemplatePlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst mainTemplate = compilation.mainTemplate;\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${mainTemplate.requireFn}.p + ${path})`;\n\n\t\t\t\tconst plugin = new WasmMainTemplatePlugin(\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\tsupportsStreaming: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tthis.options\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tplugin.apply(mainTemplate);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileWasmTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}