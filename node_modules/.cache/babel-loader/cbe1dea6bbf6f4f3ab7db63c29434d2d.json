{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass SingleEntryPlugin {\n  /**\n   * An entry plugin which will handle\n   * creation of the SingleEntryDependency\n   *\n   * @param {string} context context path\n   * @param {string} entry entry path\n   * @param {string} name entry key name\n   */\n  constructor(context, entry, name) {\n    this.context = context;\n    this.entry = entry;\n    this.name = name;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"SingleEntryPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n    });\n    compiler.hooks.make.tapAsync(\"SingleEntryPlugin\", (compilation, callback) => {\n      const {\n        entry,\n        name,\n        context\n      } = this;\n      const dep = SingleEntryPlugin.createDependency(entry, name);\n      compilation.addEntry(context, dep, name, callback);\n    });\n  }\n  /**\n   * @param {string} entry entry request\n   * @param {string} name entry name\n   * @returns {SingleEntryDependency} the dependency\n   */\n\n\n  static createDependency(entry, name) {\n    const dep = new SingleEntryDependency(entry);\n    dep.loc = {\n      name\n    };\n    return dep;\n  }\n\n}\n\nmodule.exports = SingleEntryPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/SingleEntryPlugin.js"],"names":["SingleEntryDependency","require","SingleEntryPlugin","constructor","context","entry","name","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","make","tapAsync","callback","dep","createDependency","addEntry","loc","module","exports"],"mappings":"AAAA;;;;AAIA;;AACA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,sCAAD,CAArC;AAEA;;;AAEA,MAAMC,iBAAN,CAAwB;AACvB;;;;;;;;AAQAC,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACjC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA;AAED;;;;;;AAIAC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,mBADD,EAEC,CAACD,WAAD,EAAc;AAAEE,MAAAA;AAAF,KAAd,KAA0C;AACzCF,MAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCd,qBADD,EAECY,mBAFD;AAIA,KAPF;AAUAJ,IAAAA,QAAQ,CAACC,KAAT,CAAeM,IAAf,CAAoBC,QAApB,CACC,mBADD,EAEC,CAACN,WAAD,EAAcO,QAAd,KAA2B;AAC1B,YAAM;AAAEZ,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAeF,QAAAA;AAAf,UAA2B,IAAjC;AAEA,YAAMc,GAAG,GAAGhB,iBAAiB,CAACiB,gBAAlB,CAAmCd,KAAnC,EAA0CC,IAA1C,CAAZ;AACAI,MAAAA,WAAW,CAACU,QAAZ,CAAqBhB,OAArB,EAA8Bc,GAA9B,EAAmCZ,IAAnC,EAAyCW,QAAzC;AACA,KAPF;AASA;AAED;;;;;;;AAKA,SAAOE,gBAAP,CAAwBd,KAAxB,EAA+BC,IAA/B,EAAqC;AACpC,UAAMY,GAAG,GAAG,IAAIlB,qBAAJ,CAA0BK,KAA1B,CAAZ;AACAa,IAAAA,GAAG,CAACG,GAAJ,GAAU;AAAEf,MAAAA;AAAF,KAAV;AACA,WAAOY,GAAP;AACA;;AAlDsB;;AAqDxBI,MAAM,CAACC,OAAP,GAAiBrB,iBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass SingleEntryPlugin {\n\t/**\n\t * An entry plugin which will handle\n\t * creation of the SingleEntryDependency\n\t *\n\t * @param {string} context context path\n\t * @param {string} entry entry path\n\t * @param {string} name entry key name\n\t */\n\tconstructor(context, entry, name) {\n\t\tthis.context = context;\n\t\tthis.entry = entry;\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"SingleEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"SingleEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst { entry, name, context } = this;\n\n\t\t\t\tconst dep = SingleEntryPlugin.createDependency(entry, name);\n\t\t\t\tcompilation.addEntry(context, dep, name, callback);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} entry entry request\n\t * @param {string} name entry name\n\t * @returns {SingleEntryDependency} the dependency\n\t */\n\tstatic createDependency(entry, name) {\n\t\tconst dep = new SingleEntryDependency(entry);\n\t\tdep.loc = { name };\n\t\treturn dep;\n\t}\n}\n\nmodule.exports = SingleEntryPlugin;\n"]},"metadata":{},"sourceType":"script"}