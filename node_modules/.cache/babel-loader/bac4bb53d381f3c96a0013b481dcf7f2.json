{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\"; // TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\n\nclass OccurrenceOrderPlugin {\n  constructor(preferEntry) {\n    if (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n      throw new Error(\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\");\n    }\n\n    this.preferEntry = preferEntry;\n  }\n\n  apply(compiler) {\n    const preferEntry = this.preferEntry;\n    compiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", compilation => {\n      compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderPlugin\", modules => {\n        const occursInInitialChunksMap = new Map();\n        const occursInAllChunksMap = new Map();\n        const initialChunkChunkMap = new Map();\n        const entryCountMap = new Map();\n\n        for (const m of modules) {\n          let initial = 0;\n          let entry = 0;\n\n          for (const c of m.chunksIterable) {\n            if (c.canBeInitial()) initial++;\n            if (c.entryModule === m) entry++;\n          }\n\n          initialChunkChunkMap.set(m, initial);\n          entryCountMap.set(m, entry);\n        }\n\n        const countOccursInEntry = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n\n          return sum + initialChunkChunkMap.get(r.module);\n        };\n\n        const countOccurs = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n\n          let factor = 1;\n\n          if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n            factor = r.dependency.getNumberOfIdOccurrences();\n          }\n\n          if (factor === 0) {\n            return sum;\n          }\n\n          return sum + factor * r.module.getNumberOfChunks();\n        };\n\n        if (preferEntry) {\n          for (const m of modules) {\n            const result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n            occursInInitialChunksMap.set(m, result);\n          }\n        }\n\n        const originalOrder = new Map();\n        let i = 0;\n\n        for (const m of modules) {\n          const result = m.reasons.reduce(countOccurs, 0) + m.getNumberOfChunks() + entryCountMap.get(m);\n          occursInAllChunksMap.set(m, result);\n          originalOrder.set(m, i++);\n        }\n\n        modules.sort((a, b) => {\n          if (preferEntry) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n\n          const aOccurs = occursInAllChunksMap.get(a);\n          const bOccurs = occursInAllChunksMap.get(b);\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n      compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderPlugin\", chunks => {\n        const occursInInitialChunksMap = new Map();\n        const originalOrder = new Map();\n        let i = 0;\n\n        for (const c of chunks) {\n          let occurs = 0;\n\n          for (const chunkGroup of c.groupsIterable) {\n            for (const parent of chunkGroup.parentsIterable) {\n              if (parent.isInitial()) occurs++;\n            }\n          }\n\n          occursInInitialChunksMap.set(c, occurs);\n          originalOrder.set(c, i++);\n        }\n\n        chunks.sort((a, b) => {\n          const aEntryOccurs = occursInInitialChunksMap.get(a);\n          const bEntryOccurs = occursInInitialChunksMap.get(b);\n          if (aEntryOccurs > bEntryOccurs) return -1;\n          if (aEntryOccurs < bEntryOccurs) return 1;\n          const aOccurs = a.getNumberOfGroups();\n          const bOccurs = b.getNumberOfGroups();\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = OccurrenceOrderPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/optimize/OccurrenceOrderPlugin.js"],"names":["OccurrenceOrderPlugin","constructor","preferEntry","undefined","Error","apply","compiler","hooks","compilation","tap","optimizeModuleOrder","modules","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","c","chunksIterable","canBeInitial","entryModule","set","countOccursInEntry","sum","r","module","get","countOccurs","factor","dependency","getNumberOfIdOccurrences","getNumberOfChunks","result","reasons","reduce","originalOrder","i","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","orgA","orgB","optimizeChunkOrder","chunks","occurs","chunkGroup","groupsIterable","parent","parentsIterable","isInitial","getNumberOfGroups","exports"],"mappings":"AAAA;;;;AAIA,a,CAEA;AACA;;AACA,MAAMA,qBAAN,CAA4B;AAC3BC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACxB,QAAIA,WAAW,KAAKC,SAAhB,IAA6B,OAAOD,WAAP,KAAuB,SAAxD,EAAmE;AAClE,YAAM,IAAIE,KAAJ,CACL,kGADK,CAAN;AAGA;;AACD,SAAKF,WAAL,GAAmBA,WAAnB;AACA;;AACDG,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMJ,WAAW,GAAG,KAAKA,WAAzB;AACAI,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,uBAA/B,EAAwDD,WAAW,IAAI;AACtEA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,mBAAlB,CAAsCD,GAAtC,CACC,uBADD,EAECE,OAAO,IAAI;AACV,cAAMC,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;AACA,cAAMC,oBAAoB,GAAG,IAAID,GAAJ,EAA7B;AAEA,cAAME,oBAAoB,GAAG,IAAIF,GAAJ,EAA7B;AACA,cAAMG,aAAa,GAAG,IAAIH,GAAJ,EAAtB;;AACA,aAAK,MAAMI,CAAX,IAAgBN,OAAhB,EAAyB;AACxB,cAAIO,OAAO,GAAG,CAAd;AACA,cAAIC,KAAK,GAAG,CAAZ;;AACA,eAAK,MAAMC,CAAX,IAAgBH,CAAC,CAACI,cAAlB,EAAkC;AACjC,gBAAID,CAAC,CAACE,YAAF,EAAJ,EAAsBJ,OAAO;AAC7B,gBAAIE,CAAC,CAACG,WAAF,KAAkBN,CAAtB,EAAyBE,KAAK;AAC9B;;AACDJ,UAAAA,oBAAoB,CAACS,GAArB,CAAyBP,CAAzB,EAA4BC,OAA5B;AACAF,UAAAA,aAAa,CAACQ,GAAd,CAAkBP,CAAlB,EAAqBE,KAArB;AACA;;AAED,cAAMM,kBAAkB,GAAG,CAACC,GAAD,EAAMC,CAAN,KAAY;AACtC,cAAI,CAACA,CAAC,CAACC,MAAP,EAAe;AACd,mBAAOF,GAAP;AACA;;AACD,iBAAOA,GAAG,GAAGX,oBAAoB,CAACc,GAArB,CAAyBF,CAAC,CAACC,MAA3B,CAAb;AACA,SALD;;AAMA,cAAME,WAAW,GAAG,CAACJ,GAAD,EAAMC,CAAN,KAAY;AAC/B,cAAI,CAACA,CAAC,CAACC,MAAP,EAAe;AACd,mBAAOF,GAAP;AACA;;AACD,cAAIK,MAAM,GAAG,CAAb;;AACA,cAAI,OAAOJ,CAAC,CAACK,UAAF,CAAaC,wBAApB,KAAiD,UAArD,EAAiE;AAChEF,YAAAA,MAAM,GAAGJ,CAAC,CAACK,UAAF,CAAaC,wBAAb,EAAT;AACA;;AACD,cAAIF,MAAM,KAAK,CAAf,EAAkB;AACjB,mBAAOL,GAAP;AACA;;AACD,iBAAOA,GAAG,GAAGK,MAAM,GAAGJ,CAAC,CAACC,MAAF,CAASM,iBAAT,EAAtB;AACA,SAZD;;AAcA,YAAIhC,WAAJ,EAAiB;AAChB,eAAK,MAAMe,CAAX,IAAgBN,OAAhB,EAAyB;AACxB,kBAAMwB,MAAM,GACXlB,CAAC,CAACmB,OAAF,CAAUC,MAAV,CAAiBZ,kBAAjB,EAAqC,CAArC,IACAV,oBAAoB,CAACc,GAArB,CAAyBZ,CAAzB,CADA,GAEAD,aAAa,CAACa,GAAd,CAAkBZ,CAAlB,CAHD;AAIAL,YAAAA,wBAAwB,CAACY,GAAzB,CAA6BP,CAA7B,EAAgCkB,MAAhC;AACA;AACD;;AAED,cAAMG,aAAa,GAAG,IAAIzB,GAAJ,EAAtB;AACA,YAAI0B,CAAC,GAAG,CAAR;;AACA,aAAK,MAAMtB,CAAX,IAAgBN,OAAhB,EAAyB;AACxB,gBAAMwB,MAAM,GACXlB,CAAC,CAACmB,OAAF,CAAUC,MAAV,CAAiBP,WAAjB,EAA8B,CAA9B,IACAb,CAAC,CAACiB,iBAAF,EADA,GAEAlB,aAAa,CAACa,GAAd,CAAkBZ,CAAlB,CAHD;AAIAH,UAAAA,oBAAoB,CAACU,GAArB,CAAyBP,CAAzB,EAA4BkB,MAA5B;AACAG,UAAAA,aAAa,CAACd,GAAd,CAAkBP,CAAlB,EAAqBsB,CAAC,EAAtB;AACA;;AAED5B,QAAAA,OAAO,CAAC6B,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtB,cAAIxC,WAAJ,EAAiB;AAChB,kBAAMyC,YAAY,GAAG/B,wBAAwB,CAACiB,GAAzB,CAA6BY,CAA7B,CAArB;AACA,kBAAMG,YAAY,GAAGhC,wBAAwB,CAACiB,GAAzB,CAA6Ba,CAA7B,CAArB;AACA,gBAAIC,YAAY,GAAGC,YAAnB,EAAiC,OAAO,CAAC,CAAR;AACjC,gBAAID,YAAY,GAAGC,YAAnB,EAAiC,OAAO,CAAP;AACjC;;AACD,gBAAMC,OAAO,GAAG/B,oBAAoB,CAACe,GAArB,CAAyBY,CAAzB,CAAhB;AACA,gBAAMK,OAAO,GAAGhC,oBAAoB,CAACe,GAArB,CAAyBa,CAAzB,CAAhB;AACA,cAAIG,OAAO,GAAGC,OAAd,EAAuB,OAAO,CAAC,CAAR;AACvB,cAAID,OAAO,GAAGC,OAAd,EAAuB,OAAO,CAAP;AACvB,gBAAMC,IAAI,GAAGT,aAAa,CAACT,GAAd,CAAkBY,CAAlB,CAAb;AACA,gBAAMO,IAAI,GAAGV,aAAa,CAACT,GAAd,CAAkBa,CAAlB,CAAb;AACA,iBAAOK,IAAI,GAAGC,IAAd;AACA,SAdD;AAeA,OA3EF;AA6EAxC,MAAAA,WAAW,CAACD,KAAZ,CAAkB0C,kBAAlB,CAAqCxC,GAArC,CACC,uBADD,EAECyC,MAAM,IAAI;AACT,cAAMtC,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;AACA,cAAMyB,aAAa,GAAG,IAAIzB,GAAJ,EAAtB;AAEA,YAAI0B,CAAC,GAAG,CAAR;;AACA,aAAK,MAAMnB,CAAX,IAAgB8B,MAAhB,EAAwB;AACvB,cAAIC,MAAM,GAAG,CAAb;;AACA,eAAK,MAAMC,UAAX,IAAyBhC,CAAC,CAACiC,cAA3B,EAA2C;AAC1C,iBAAK,MAAMC,MAAX,IAAqBF,UAAU,CAACG,eAAhC,EAAiD;AAChD,kBAAID,MAAM,CAACE,SAAP,EAAJ,EAAwBL,MAAM;AAC9B;AACD;;AACDvC,UAAAA,wBAAwB,CAACY,GAAzB,CAA6BJ,CAA7B,EAAgC+B,MAAhC;AACAb,UAAAA,aAAa,CAACd,GAAd,CAAkBJ,CAAlB,EAAqBmB,CAAC,EAAtB;AACA;;AAEDW,QAAAA,MAAM,CAACV,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,gBAAMC,YAAY,GAAG/B,wBAAwB,CAACiB,GAAzB,CAA6BY,CAA7B,CAArB;AACA,gBAAMG,YAAY,GAAGhC,wBAAwB,CAACiB,GAAzB,CAA6Ba,CAA7B,CAArB;AACA,cAAIC,YAAY,GAAGC,YAAnB,EAAiC,OAAO,CAAC,CAAR;AACjC,cAAID,YAAY,GAAGC,YAAnB,EAAiC,OAAO,CAAP;AACjC,gBAAMC,OAAO,GAAGJ,CAAC,CAACgB,iBAAF,EAAhB;AACA,gBAAMX,OAAO,GAAGJ,CAAC,CAACe,iBAAF,EAAhB;AACA,cAAIZ,OAAO,GAAGC,OAAd,EAAuB,OAAO,CAAC,CAAR;AACvB,cAAID,OAAO,GAAGC,OAAd,EAAuB,OAAO,CAAP;AACvB,gBAAMC,IAAI,GAAGT,aAAa,CAACT,GAAd,CAAkBY,CAAlB,CAAb;AACA,gBAAMO,IAAI,GAAGV,aAAa,CAACT,GAAd,CAAkBa,CAAlB,CAAb;AACA,iBAAOK,IAAI,GAAGC,IAAd;AACA,SAZD;AAaA,OA/BF;AAiCA,KA/GD;AAgHA;;AA3H0B;;AA8H5BpB,MAAM,CAAC8B,OAAP,GAAiB1D,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n// TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\nclass OccurrenceOrderPlugin {\n\tconstructor(preferEntry) {\n\t\tif (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.preferEntry = preferEntry;\n\t}\n\tapply(compiler) {\n\t\tconst preferEntry = this.preferEntry;\n\t\tcompiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeModuleOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tlet initial = 0;\n\t\t\t\t\t\tlet entry = 0;\n\t\t\t\t\t\tfor (const c of m.chunksIterable) {\n\t\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\t\tif (c.entryModule === m) entry++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst countOccursInEntry = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + initialChunkChunkMap.get(r.module);\n\t\t\t\t\t};\n\t\t\t\t\tconst countOccurs = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet factor = 1;\n\t\t\t\t\t\tif (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n\t\t\t\t\t\t\tfactor = r.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (factor === 0) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + factor * r.module.getNumberOfChunks();\n\t\t\t\t\t};\n\n\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tm.reasons.reduce(countOccursInEntry, 0) +\n\t\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst originalOrder = new Map();\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tm.reasons.reduce(countOccurs, 0) +\n\t\t\t\t\t\t\tm.getNumberOfChunks() +\n\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t\t\toriginalOrder.set(m, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tmodules.sort((a, b) => {\n\t\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.optimizeChunkOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst originalOrder = new Map();\n\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t\t\toriginalOrder.set(c, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tchunks.sort((a, b) => {\n\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = OccurrenceOrderPlugin;\n"]},"metadata":{},"sourceType":"script"}