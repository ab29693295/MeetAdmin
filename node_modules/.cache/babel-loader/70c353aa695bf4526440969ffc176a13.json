{"ast":null,"code":"/*\nMIT License http://www.opensource.org/licenses/mit-license.php\nAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n\nconst SortableSet = require(\"./util/SortableSet\");\n\nconst intersect = require(\"./util/SetHelpers\").intersect;\n\nconst GraphHelpers = require(\"./GraphHelpers\");\n\nconst Entrypoint = require(\"./Entrypoint\");\n\nlet debugId = 1000;\nconst ERR_CHUNK_ENTRY = \"Chunk.entry was removed. Use hasRuntime()\";\nconst ERR_CHUNK_INITIAL = \"Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\";\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/**\n *  @typedef {Object} WithId an object who has an id property *\n *  @property {string | number} id the id of the object\n */\n\n/**\n * Compare two Modules based on their ids for sorting\n * @param {Module} a module\n * @param {Module} b module\n * @returns {-1|0|1} sort value\n */\n// TODO use @callback\n\n/** @typedef {(a: Module, b: Module) => -1|0|1} ModuleSortPredicate */\n\n/** @typedef {(m: Module) => boolean} ModuleFilterPredicate */\n\n/** @typedef {(c: Chunk) => boolean} ChunkFilterPredicate */\n\nconst sortModuleById = (a, b) => {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * Compare two ChunkGroups based on their ids for sorting\n * @param {ChunkGroup} a chunk group\n * @param {ChunkGroup} b chunk group\n * @returns {-1|0|1} sort value\n */\n\n\nconst sortChunkGroupById = (a, b) => {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * Compare two Identifiables , based on their ids for sorting\n * @param {Module} a first object with ident fn\n * @param {Module} b second object with ident fn\n * @returns {-1|0|1} The order number of the sort\n */\n\n\nconst sortByIdentifier = (a, b) => {\n  if (a.identifier() > b.identifier()) return 1;\n  if (a.identifier() < b.identifier()) return -1;\n  return 0;\n};\n/**\n * @returns {string} a concatenation of module identifiers sorted\n * @param {SortableSet} set to pull module identifiers from\n */\n\n\nconst getModulesIdent = set => {\n  set.sort();\n  let str = \"\";\n\n  for (const m of set) {\n    str += m.identifier() + \"#\";\n  }\n\n  return str;\n};\n/**\n * @template T\n * @param {SortableSet<T>} set the sortable set to convert to array\n * @returns {Array<T>} the array returned from Array.from(set)\n */\n\n\nconst getArray = set => Array.from(set);\n/**\n * @param {SortableSet<Module>} set the sortable Set to get the count/size of\n * @returns {number} the size of the modules\n */\n\n\nconst getModulesSize = set => {\n  let size = 0;\n\n  for (const module of set) {\n    size += module.size();\n  }\n\n  return size;\n};\n/**\n * A Chunk is a unit of encapsulation for Modules.\n * Chunks are \"rendered\" into bundles that get emitted when the build completes.\n */\n\n\nclass Chunk {\n  /**\n   * @param {string=} name of chunk being created, is optional (for subclasses)\n   */\n  constructor(name) {\n    /** @type {number | null} */\n    this.id = null;\n    /** @type {number[] | null} */\n\n    this.ids = null;\n    /** @type {number} */\n\n    this.debugId = debugId++;\n    /** @type {string} */\n\n    this.name = name;\n    /** @type {boolean} */\n\n    this.preventIntegration = false;\n    /** @type {Module=} */\n\n    this.entryModule = undefined;\n    /** @private @type {SortableSet<Module>} */\n\n    this._modules = new SortableSet(undefined, sortByIdentifier);\n    /** @type {string?} */\n\n    this.filenameTemplate = undefined;\n    /** @private @type {SortableSet<ChunkGroup>} */\n\n    this._groups = new SortableSet(undefined, sortChunkGroupById);\n    /** @type {string[]} */\n\n    this.files = [];\n    /** @type {boolean} */\n\n    this.rendered = false;\n    /** @type {string=} */\n\n    this.hash = undefined;\n    /** @type {Object} */\n\n    this.contentHash = Object.create(null);\n    /** @type {string=} */\n\n    this.renderedHash = undefined;\n    /** @type {string=} */\n\n    this.chunkReason = undefined;\n    /** @type {boolean} */\n\n    this.extraAsync = false;\n    this.removedModules = undefined;\n  }\n  /**\n   * @deprecated Chunk.entry has been deprecated. Please use .hasRuntime() instead\n   * @returns {never} Throws an error trying to access this property\n   */\n\n\n  get entry() {\n    throw new Error(ERR_CHUNK_ENTRY);\n  }\n  /**\n   * @deprecated .entry has been deprecated. Please use .hasRuntime() instead\n   * @param {never} data The data that was attempting to be set\n   * @returns {never} Throws an error trying to access this property\n   */\n\n\n  set entry(data) {\n    throw new Error(ERR_CHUNK_ENTRY);\n  }\n  /**\n   * @deprecated Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\n   * @returns {never} Throws an error trying to access this property\n   */\n\n\n  get initial() {\n    throw new Error(ERR_CHUNK_INITIAL);\n  }\n  /**\n   * @deprecated Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\n   * @param {never} data The data attempting to be set\n   * @returns {never} Throws an error trying to access this property\n   */\n\n\n  set initial(data) {\n    throw new Error(ERR_CHUNK_INITIAL);\n  }\n  /**\n   * @returns {boolean} whether or not the Chunk will have a runtime\n   */\n\n\n  hasRuntime() {\n    for (const chunkGroup of this._groups) {\n      if (chunkGroup.isInitial() && chunkGroup instanceof Entrypoint && chunkGroup.getRuntimeChunk() === this) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * @returns {boolean} whether or not this chunk can be an initial chunk\n   */\n\n\n  canBeInitial() {\n    for (const chunkGroup of this._groups) {\n      if (chunkGroup.isInitial()) return true;\n    }\n\n    return false;\n  }\n  /**\n   * @returns {boolean} whether this chunk can only be an initial chunk\n   */\n\n\n  isOnlyInitial() {\n    if (this._groups.size <= 0) return false;\n\n    for (const chunkGroup of this._groups) {\n      if (!chunkGroup.isInitial()) return false;\n    }\n\n    return true;\n  }\n  /**\n   * @returns {boolean} if this chunk contains the entry module\n   */\n\n\n  hasEntryModule() {\n    return !!this.entryModule;\n  }\n  /**\n   * @param {Module} module the module that will be added to this chunk.\n   * @returns {boolean} returns true if the chunk doesn't have the module and it was added\n   */\n\n\n  addModule(module) {\n    if (!this._modules.has(module)) {\n      this._modules.add(module);\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @param {Module} module the module that will be removed from this chunk\n   * @returns {boolean} returns true if chunk exists and is successfully deleted\n   */\n\n\n  removeModule(module) {\n    if (this._modules.delete(module)) {\n      module.removeChunk(this);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @param {Module[]} modules the new modules to be set\n   * @returns {void} set new modules to this chunk and return nothing\n   */\n\n\n  setModules(modules) {\n    this._modules = new SortableSet(modules, sortByIdentifier);\n  }\n  /**\n   * @returns {number} the amount of modules in chunk\n   */\n\n\n  getNumberOfModules() {\n    return this._modules.size;\n  }\n  /**\n   * @returns {SortableSet} return the modules SortableSet for this chunk\n   */\n\n\n  get modulesIterable() {\n    return this._modules;\n  }\n  /**\n   * @param {ChunkGroup} chunkGroup the chunkGroup the chunk is being added\n   * @returns {boolean} returns true if chunk is not apart of chunkGroup and is added successfully\n   */\n\n\n  addGroup(chunkGroup) {\n    if (this._groups.has(chunkGroup)) return false;\n\n    this._groups.add(chunkGroup);\n\n    return true;\n  }\n  /**\n   * @param {ChunkGroup} chunkGroup the chunkGroup the chunk is being removed from\n   * @returns {boolean} returns true if chunk does exist in chunkGroup and is removed\n   */\n\n\n  removeGroup(chunkGroup) {\n    if (!this._groups.has(chunkGroup)) return false;\n\n    this._groups.delete(chunkGroup);\n\n    return true;\n  }\n  /**\n   * @param {ChunkGroup} chunkGroup the chunkGroup to check\n   * @returns {boolean} returns true if chunk has chunkGroup reference and exists in chunkGroup\n   */\n\n\n  isInGroup(chunkGroup) {\n    return this._groups.has(chunkGroup);\n  }\n  /**\n   * @returns {number} the amount of groups said chunk is in\n   */\n\n\n  getNumberOfGroups() {\n    return this._groups.size;\n  }\n  /**\n   * @returns {SortableSet<ChunkGroup>} the chunkGroups that said chunk is referenced in\n   */\n\n\n  get groupsIterable() {\n    return this._groups;\n  }\n  /**\n   * @param {Chunk} otherChunk the chunk to compare itself with\n   * @returns {-1|0|1} this is a comparitor function like sort and returns -1, 0, or 1 based on sort order\n   */\n\n\n  compareTo(otherChunk) {\n    if (this.name && !otherChunk.name) return -1;\n    if (!this.name && otherChunk.name) return 1;\n    if (this.name < otherChunk.name) return -1;\n    if (this.name > otherChunk.name) return 1;\n    if (this._modules.size > otherChunk._modules.size) return -1;\n    if (this._modules.size < otherChunk._modules.size) return 1;\n\n    this._modules.sort();\n\n    otherChunk._modules.sort();\n\n    const a = this._modules[Symbol.iterator]();\n\n    const b = otherChunk._modules[Symbol.iterator](); // eslint-disable-next-line no-constant-condition\n\n\n    while (true) {\n      const aItem = a.next();\n      if (aItem.done) return 0;\n      const bItem = b.next();\n      const aModuleIdentifier = aItem.value.identifier();\n      const bModuleIdentifier = bItem.value.identifier();\n      if (aModuleIdentifier < bModuleIdentifier) return -1;\n      if (aModuleIdentifier > bModuleIdentifier) return 1;\n    }\n  }\n  /**\n   * @param {Module} module Module to check\n   * @returns {boolean} returns true if module does exist in this chunk\n   */\n\n\n  containsModule(module) {\n    return this._modules.has(module);\n  }\n  /**\n   * @returns {Module[]} an array of modules (do not modify)\n   */\n\n\n  getModules() {\n    return this._modules.getFromCache(getArray);\n  }\n\n  getModulesIdent() {\n    return this._modules.getFromUnorderedCache(getModulesIdent);\n  }\n  /**\n   * @param {string=} reason reason why chunk is removed\n   * @returns {void}\n   */\n\n\n  remove(reason) {\n    // cleanup modules\n    // Array.from is used here to create a clone, because removeChunk modifies this._modules\n    for (const module of Array.from(this._modules)) {\n      module.removeChunk(this);\n    }\n\n    for (const chunkGroup of this._groups) {\n      chunkGroup.removeChunk(this);\n    }\n  }\n  /**\n   *\n   * @param {Module} module module to move\n   * @param {Chunk} otherChunk other chunk to move it to\n   * @returns {void}\n   */\n\n\n  moveModule(module, otherChunk) {\n    GraphHelpers.disconnectChunkAndModule(this, module);\n    GraphHelpers.connectChunkAndModule(otherChunk, module);\n    module.rewriteChunkInReasons(this, [otherChunk]);\n  }\n  /**\n   *\n   * @param {Chunk} otherChunk the chunk to integrate with\n   * @param {string} reason reason why the module is being integrated\n   * @returns {boolean} returns true or false if integration succeeds or fails\n   */\n\n\n  integrate(otherChunk, reason) {\n    if (!this.canBeIntegrated(otherChunk)) {\n      return false;\n    } // Pick a new name for the integrated chunk\n\n\n    if (this.name && otherChunk.name) {\n      if (this.hasEntryModule() === otherChunk.hasEntryModule()) {\n        // When both chunks have entry modules or none have one, use\n        // shortest name\n        if (this.name.length !== otherChunk.name.length) {\n          this.name = this.name.length < otherChunk.name.length ? this.name : otherChunk.name;\n        } else {\n          this.name = this.name < otherChunk.name ? this.name : otherChunk.name;\n        }\n      } else if (otherChunk.hasEntryModule()) {\n        // Pick the name of the chunk with the entry module\n        this.name = otherChunk.name;\n      }\n    } else if (otherChunk.name) {\n      this.name = otherChunk.name;\n    } // Array.from is used here to create a clone, because moveModule modifies otherChunk._modules\n\n\n    for (const module of Array.from(otherChunk._modules)) {\n      otherChunk.moveModule(module, this);\n    }\n\n    otherChunk._modules.clear();\n\n    if (otherChunk.entryModule) {\n      this.entryModule = otherChunk.entryModule;\n    }\n\n    for (const chunkGroup of otherChunk._groups) {\n      chunkGroup.replaceChunk(otherChunk, this);\n      this.addGroup(chunkGroup);\n    }\n\n    otherChunk._groups.clear();\n\n    return true;\n  }\n  /**\n   * @param {Chunk} newChunk the new chunk that will be split out of the current chunk\n   * @returns {void}\n   */\n\n\n  split(newChunk) {\n    for (const chunkGroup of this._groups) {\n      chunkGroup.insertChunk(newChunk, this);\n      newChunk.addGroup(chunkGroup);\n    }\n  }\n\n  isEmpty() {\n    return this._modules.size === 0;\n  }\n\n  updateHash(hash) {\n    hash.update(`${this.id} `);\n    hash.update(this.ids ? this.ids.join(\",\") : \"\");\n    hash.update(`${this.name || \"\"} `);\n\n    for (const m of this._modules) {\n      hash.update(m.hash);\n    }\n  }\n\n  canBeIntegrated(otherChunk) {\n    if (this.preventIntegration || otherChunk.preventIntegration) {\n      return false;\n    }\n    /**\n     * @param {Chunk} a chunk\n     * @param {Chunk} b chunk\n     * @returns {boolean} true, if a is always available when b is reached\n     */\n\n\n    const isAvailable = (a, b) => {\n      const queue = new Set(b.groupsIterable);\n\n      for (const chunkGroup of queue) {\n        if (a.isInGroup(chunkGroup)) continue;\n        if (chunkGroup.isInitial()) return false;\n\n        for (const parent of chunkGroup.parentsIterable) {\n          queue.add(parent);\n        }\n      }\n\n      return true;\n    };\n\n    const selfHasRuntime = this.hasRuntime();\n    const otherChunkHasRuntime = otherChunk.hasRuntime();\n\n    if (selfHasRuntime !== otherChunkHasRuntime) {\n      if (selfHasRuntime) {\n        return isAvailable(this, otherChunk);\n      } else if (otherChunkHasRuntime) {\n        return isAvailable(otherChunk, this);\n      } else {\n        return false;\n      }\n    }\n\n    if (this.hasEntryModule() || otherChunk.hasEntryModule()) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   *\n   * @param {number} size the size\n   * @param {Object} options the options passed in\n   * @returns {number} the multiplier returned\n   */\n\n\n  addMultiplierAndOverhead(size, options) {\n    const overhead = typeof options.chunkOverhead === \"number\" ? options.chunkOverhead : 10000;\n    const multiplicator = this.canBeInitial() ? options.entryChunkMultiplicator || 10 : 1;\n    return size * multiplicator + overhead;\n  }\n  /**\n   * @returns {number} the size of all modules\n   */\n\n\n  modulesSize() {\n    return this._modules.getFromUnorderedCache(getModulesSize);\n  }\n  /**\n   * @param {Object} options the size display options\n   * @returns {number} the chunk size\n   */\n\n\n  size(options = {}) {\n    return this.addMultiplierAndOverhead(this.modulesSize(), options);\n  }\n  /**\n   * @param {Chunk} otherChunk the other chunk\n   * @param {TODO} options the options for this function\n   * @returns {number | false} the size, or false if it can't be integrated\n   */\n\n\n  integratedSize(otherChunk, options) {\n    // Chunk if it's possible to integrate this chunk\n    if (!this.canBeIntegrated(otherChunk)) {\n      return false;\n    }\n\n    let integratedModulesSize = this.modulesSize(); // only count modules that do not exist in this chunk!\n\n    for (const otherModule of otherChunk._modules) {\n      if (!this._modules.has(otherModule)) {\n        integratedModulesSize += otherModule.size();\n      }\n    }\n\n    return this.addMultiplierAndOverhead(integratedModulesSize, options);\n  }\n  /**\n   * @param {function(Module, Module): -1|0|1=} sortByFn a predicate function used to sort modules\n   * @returns {void}\n   */\n\n\n  sortModules(sortByFn) {\n    this._modules.sortWith(sortByFn || sortModuleById);\n  }\n\n  sortItems() {\n    this.sortModules();\n  }\n  /**\n   * @returns {Set<Chunk>} a set of all the async chunks\n   */\n\n\n  getAllAsyncChunks() {\n    const queue = new Set();\n    const chunks = new Set();\n    const initialChunks = intersect(Array.from(this.groupsIterable, g => new Set(g.chunks)));\n\n    for (const chunkGroup of this.groupsIterable) {\n      for (const child of chunkGroup.childrenIterable) {\n        queue.add(child);\n      }\n    }\n\n    for (const chunkGroup of queue) {\n      for (const chunk of chunkGroup.chunks) {\n        if (!initialChunks.has(chunk)) {\n          chunks.add(chunk);\n        }\n      }\n\n      for (const child of chunkGroup.childrenIterable) {\n        queue.add(child);\n      }\n    }\n\n    return chunks;\n  }\n  /**\n   * @typedef {Object} ChunkMaps\n   * @property {Record<string|number, string>} hash\n   * @property {Record<string|number, Record<string, string>>} contentHash\n   * @property {Record<string|number, string>} name\n   */\n\n  /**\n   * @param {boolean} realHash should the full hash or the rendered hash be used\n   * @returns {ChunkMaps} the chunk map information\n   */\n\n\n  getChunkMaps(realHash) {\n    /** @type {Record<string|number, string>} */\n    const chunkHashMap = Object.create(null);\n    /** @type {Record<string|number, Record<string, string>>} */\n\n    const chunkContentHashMap = Object.create(null);\n    /** @type {Record<string|number, string>} */\n\n    const chunkNameMap = Object.create(null);\n\n    for (const chunk of this.getAllAsyncChunks()) {\n      chunkHashMap[chunk.id] = realHash ? chunk.hash : chunk.renderedHash;\n\n      for (const key of Object.keys(chunk.contentHash)) {\n        if (!chunkContentHashMap[key]) {\n          chunkContentHashMap[key] = Object.create(null);\n        }\n\n        chunkContentHashMap[key][chunk.id] = chunk.contentHash[key];\n      }\n\n      if (chunk.name) {\n        chunkNameMap[chunk.id] = chunk.name;\n      }\n    }\n\n    return {\n      hash: chunkHashMap,\n      contentHash: chunkContentHashMap,\n      name: chunkNameMap\n    };\n  }\n  /**\n   * @returns {Record<string, Set<TODO>[]>} a record object of names to lists of child ids(?)\n   */\n\n\n  getChildIdsByOrders() {\n    const lists = new Map();\n\n    for (const group of this.groupsIterable) {\n      if (group.chunks[group.chunks.length - 1] === this) {\n        for (const childGroup of group.childrenIterable) {\n          // TODO webpack 5 remove this check for options\n          if (typeof childGroup.options === \"object\") {\n            for (const key of Object.keys(childGroup.options)) {\n              if (key.endsWith(\"Order\")) {\n                const name = key.substr(0, key.length - \"Order\".length);\n                let list = lists.get(name);\n                if (list === undefined) lists.set(name, list = []);\n                list.push({\n                  order: childGroup.options[key],\n                  group: childGroup\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n\n    const result = Object.create(null);\n\n    for (const [name, list] of lists) {\n      list.sort((a, b) => {\n        const cmp = b.order - a.order;\n        if (cmp !== 0) return cmp; // TODO webpack 5 remove this check of compareTo\n\n        if (a.group.compareTo) {\n          return a.group.compareTo(b.group);\n        }\n\n        return 0;\n      });\n      result[name] = Array.from(list.reduce((set, item) => {\n        for (const chunk of item.group.chunks) {\n          set.add(chunk.id);\n        }\n\n        return set;\n      }, new Set()));\n    }\n\n    return result;\n  }\n\n  getChildIdsByOrdersMap(includeDirectChildren) {\n    const chunkMaps = Object.create(null);\n\n    const addChildIdsByOrdersToMap = chunk => {\n      const data = chunk.getChildIdsByOrders();\n\n      for (const key of Object.keys(data)) {\n        let chunkMap = chunkMaps[key];\n\n        if (chunkMap === undefined) {\n          chunkMaps[key] = chunkMap = Object.create(null);\n        }\n\n        chunkMap[chunk.id] = data[key];\n      }\n    };\n\n    if (includeDirectChildren) {\n      const chunks = new Set();\n\n      for (const chunkGroup of this.groupsIterable) {\n        for (const chunk of chunkGroup.chunks) {\n          chunks.add(chunk);\n        }\n      }\n\n      for (const chunk of chunks) {\n        addChildIdsByOrdersToMap(chunk);\n      }\n    }\n\n    for (const chunk of this.getAllAsyncChunks()) {\n      addChildIdsByOrdersToMap(chunk);\n    }\n\n    return chunkMaps;\n  }\n  /**\n   * @typedef {Object} ChunkModuleMaps\n   * @property {Record<string|number, (string|number)[]>} id\n   * @property {Record<string|number, string>} hash\n   */\n\n  /**\n   * @param {ModuleFilterPredicate} filterFn function used to filter modules\n   * @returns {ChunkModuleMaps} module map information\n   */\n\n\n  getChunkModuleMaps(filterFn) {\n    /** @type {Record<string|number, (string|number)[]>} */\n    const chunkModuleIdMap = Object.create(null);\n    /** @type {Record<string|number, string>} */\n\n    const chunkModuleHashMap = Object.create(null);\n\n    for (const chunk of this.getAllAsyncChunks()) {\n      /** @type {(string|number)[]} */\n      let array;\n\n      for (const module of chunk.modulesIterable) {\n        if (filterFn(module)) {\n          if (array === undefined) {\n            array = [];\n            chunkModuleIdMap[chunk.id] = array;\n          }\n\n          array.push(module.id);\n          chunkModuleHashMap[module.id] = module.renderedHash;\n        }\n      }\n\n      if (array !== undefined) {\n        array.sort();\n      }\n    }\n\n    return {\n      id: chunkModuleIdMap,\n      hash: chunkModuleHashMap\n    };\n  }\n  /**\n   *\n   * @param {function(Module): boolean} filterFn predicate function used to filter modules\n   * @param {function(Chunk): boolean} filterChunkFn predicate function used to filter chunks\n   * @returns {boolean} return true if module exists in graph\n   */\n\n\n  hasModuleInGraph(filterFn, filterChunkFn) {\n    const queue = new Set(this.groupsIterable);\n    const chunksProcessed = new Set();\n\n    for (const chunkGroup of queue) {\n      for (const chunk of chunkGroup.chunks) {\n        if (!chunksProcessed.has(chunk)) {\n          chunksProcessed.add(chunk);\n\n          if (!filterChunkFn || filterChunkFn(chunk)) {\n            for (const module of chunk.modulesIterable) {\n              if (filterFn(module)) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n\n      for (const child of chunkGroup.childrenIterable) {\n        queue.add(child);\n      }\n    }\n\n    return false;\n  }\n\n  toString() {\n    return `Chunk[${Array.from(this._modules).join()}]`;\n  }\n\n} // TODO remove in webpack 5\n\n\nObject.defineProperty(Chunk.prototype, \"forEachModule\", {\n  configurable: false,\n  value: util.deprecate(\n  /**\n   * @deprecated\n   * @this {Chunk}\n   * @typedef {function(any, any, Set<any>): void} ForEachModuleCallback\n   * @param {ForEachModuleCallback} fn Callback function\n   * @returns {void}\n   */\n  function (fn) {\n    this._modules.forEach(fn);\n  }, \"Chunk.forEachModule: Use for(const module of chunk.modulesIterable) instead\")\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"mapModules\", {\n  configurable: false,\n  value: util.deprecate(\n  /**\n   * @deprecated\n   * @this {Chunk}\n   * @typedef {function(any, number): any} MapModulesCallback\n   * @param {MapModulesCallback} fn Callback function\n   * @returns {TODO[]} result of mapped modules\n   */\n  function (fn) {\n    return Array.from(this._modules, fn);\n  }, \"Chunk.mapModules: Use Array.from(chunk.modulesIterable, fn) instead\")\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"chunks\", {\n  configurable: false,\n\n  get() {\n    throw new Error(\"Chunk.chunks: Use ChunkGroup.getChildren() instead\");\n  },\n\n  set() {\n    throw new Error(\"Chunk.chunks: Use ChunkGroup.add/removeChild() instead\");\n  }\n\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"parents\", {\n  configurable: false,\n\n  get() {\n    throw new Error(\"Chunk.parents: Use ChunkGroup.getParents() instead\");\n  },\n\n  set() {\n    throw new Error(\"Chunk.parents: Use ChunkGroup.add/removeParent() instead\");\n  }\n\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"blocks\", {\n  configurable: false,\n\n  get() {\n    throw new Error(\"Chunk.blocks: Use ChunkGroup.getBlocks() instead\");\n  },\n\n  set() {\n    throw new Error(\"Chunk.blocks: Use ChunkGroup.add/removeBlock() instead\");\n  }\n\n}); // TODO remove in webpack 5\n\nObject.defineProperty(Chunk.prototype, \"entrypoints\", {\n  configurable: false,\n\n  get() {\n    throw new Error(\"Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead\");\n  },\n\n  set() {\n    throw new Error(\"Chunk.entrypoints: Use Chunks.addGroup instead\");\n  }\n\n});\nmodule.exports = Chunk;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/Chunk.js"],"names":["util","require","SortableSet","intersect","GraphHelpers","Entrypoint","debugId","ERR_CHUNK_ENTRY","ERR_CHUNK_INITIAL","sortModuleById","a","b","id","sortChunkGroupById","sortByIdentifier","identifier","getModulesIdent","set","sort","str","m","getArray","Array","from","getModulesSize","size","module","Chunk","constructor","name","ids","preventIntegration","entryModule","undefined","_modules","filenameTemplate","_groups","files","rendered","hash","contentHash","Object","create","renderedHash","chunkReason","extraAsync","removedModules","entry","Error","data","initial","hasRuntime","chunkGroup","isInitial","getRuntimeChunk","canBeInitial","isOnlyInitial","hasEntryModule","addModule","has","add","removeModule","delete","removeChunk","setModules","modules","getNumberOfModules","modulesIterable","addGroup","removeGroup","isInGroup","getNumberOfGroups","groupsIterable","compareTo","otherChunk","Symbol","iterator","aItem","next","done","bItem","aModuleIdentifier","value","bModuleIdentifier","containsModule","getModules","getFromCache","getFromUnorderedCache","remove","reason","moveModule","disconnectChunkAndModule","connectChunkAndModule","rewriteChunkInReasons","integrate","canBeIntegrated","length","clear","replaceChunk","split","newChunk","insertChunk","isEmpty","updateHash","update","join","isAvailable","queue","Set","parent","parentsIterable","selfHasRuntime","otherChunkHasRuntime","addMultiplierAndOverhead","options","overhead","chunkOverhead","multiplicator","entryChunkMultiplicator","modulesSize","integratedSize","integratedModulesSize","otherModule","sortModules","sortByFn","sortWith","sortItems","getAllAsyncChunks","chunks","initialChunks","g","child","childrenIterable","chunk","getChunkMaps","realHash","chunkHashMap","chunkContentHashMap","chunkNameMap","key","keys","getChildIdsByOrders","lists","Map","group","childGroup","endsWith","substr","list","get","push","order","result","cmp","reduce","item","getChildIdsByOrdersMap","includeDirectChildren","chunkMaps","addChildIdsByOrdersToMap","chunkMap","getChunkModuleMaps","filterFn","chunkModuleIdMap","chunkModuleHashMap","array","hasModuleInGraph","filterChunkFn","chunksProcessed","toString","defineProperty","prototype","configurable","deprecate","fn","forEach","exports"],"mappings":"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","sourcesContent":["/*\nMIT License http://www.opensource.org/licenses/mit-license.php\nAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\nconst SortableSet = require(\"./util/SortableSet\");\nconst intersect = require(\"./util/SetHelpers\").intersect;\nconst GraphHelpers = require(\"./GraphHelpers\");\nconst Entrypoint = require(\"./Entrypoint\");\nlet debugId = 1000;\nconst ERR_CHUNK_ENTRY = \"Chunk.entry was removed. Use hasRuntime()\";\nconst ERR_CHUNK_INITIAL =\n\t\"Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\";\n\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/**\n *  @typedef {Object} WithId an object who has an id property *\n *  @property {string | number} id the id of the object\n */\n\n/**\n * Compare two Modules based on their ids for sorting\n * @param {Module} a module\n * @param {Module} b module\n * @returns {-1|0|1} sort value\n */\n\n// TODO use @callback\n/** @typedef {(a: Module, b: Module) => -1|0|1} ModuleSortPredicate */\n/** @typedef {(m: Module) => boolean} ModuleFilterPredicate */\n/** @typedef {(c: Chunk) => boolean} ChunkFilterPredicate */\n\nconst sortModuleById = (a, b) => {\n\tif (a.id < b.id) return -1;\n\tif (b.id < a.id) return 1;\n\treturn 0;\n};\n\n/**\n * Compare two ChunkGroups based on their ids for sorting\n * @param {ChunkGroup} a chunk group\n * @param {ChunkGroup} b chunk group\n * @returns {-1|0|1} sort value\n */\nconst sortChunkGroupById = (a, b) => {\n\tif (a.id < b.id) return -1;\n\tif (b.id < a.id) return 1;\n\treturn 0;\n};\n\n/**\n * Compare two Identifiables , based on their ids for sorting\n * @param {Module} a first object with ident fn\n * @param {Module} b second object with ident fn\n * @returns {-1|0|1} The order number of the sort\n */\nconst sortByIdentifier = (a, b) => {\n\tif (a.identifier() > b.identifier()) return 1;\n\tif (a.identifier() < b.identifier()) return -1;\n\treturn 0;\n};\n\n/**\n * @returns {string} a concatenation of module identifiers sorted\n * @param {SortableSet} set to pull module identifiers from\n */\nconst getModulesIdent = set => {\n\tset.sort();\n\tlet str = \"\";\n\tfor (const m of set) {\n\t\tstr += m.identifier() + \"#\";\n\t}\n\treturn str;\n};\n\n/**\n * @template T\n * @param {SortableSet<T>} set the sortable set to convert to array\n * @returns {Array<T>} the array returned from Array.from(set)\n */\nconst getArray = set => Array.from(set);\n\n/**\n * @param {SortableSet<Module>} set the sortable Set to get the count/size of\n * @returns {number} the size of the modules\n */\nconst getModulesSize = set => {\n\tlet size = 0;\n\tfor (const module of set) {\n\t\tsize += module.size();\n\t}\n\treturn size;\n};\n\n/**\n * A Chunk is a unit of encapsulation for Modules.\n * Chunks are \"rendered\" into bundles that get emitted when the build completes.\n */\nclass Chunk {\n\t/**\n\t * @param {string=} name of chunk being created, is optional (for subclasses)\n\t */\n\tconstructor(name) {\n\t\t/** @type {number | null} */\n\t\tthis.id = null;\n\t\t/** @type {number[] | null} */\n\t\tthis.ids = null;\n\t\t/** @type {number} */\n\t\tthis.debugId = debugId++;\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\t\t/** @type {boolean} */\n\t\tthis.preventIntegration = false;\n\t\t/** @type {Module=} */\n\t\tthis.entryModule = undefined;\n\t\t/** @private @type {SortableSet<Module>} */\n\t\tthis._modules = new SortableSet(undefined, sortByIdentifier);\n\t\t/** @type {string?} */\n\t\tthis.filenameTemplate = undefined;\n\t\t/** @private @type {SortableSet<ChunkGroup>} */\n\t\tthis._groups = new SortableSet(undefined, sortChunkGroupById);\n\t\t/** @type {string[]} */\n\t\tthis.files = [];\n\t\t/** @type {boolean} */\n\t\tthis.rendered = false;\n\t\t/** @type {string=} */\n\t\tthis.hash = undefined;\n\t\t/** @type {Object} */\n\t\tthis.contentHash = Object.create(null);\n\t\t/** @type {string=} */\n\t\tthis.renderedHash = undefined;\n\t\t/** @type {string=} */\n\t\tthis.chunkReason = undefined;\n\t\t/** @type {boolean} */\n\t\tthis.extraAsync = false;\n\t\tthis.removedModules = undefined;\n\t}\n\n\t/**\n\t * @deprecated Chunk.entry has been deprecated. Please use .hasRuntime() instead\n\t * @returns {never} Throws an error trying to access this property\n\t */\n\tget entry() {\n\t\tthrow new Error(ERR_CHUNK_ENTRY);\n\t}\n\n\t/**\n\t * @deprecated .entry has been deprecated. Please use .hasRuntime() instead\n\t * @param {never} data The data that was attempting to be set\n\t * @returns {never} Throws an error trying to access this property\n\t */\n\tset entry(data) {\n\t\tthrow new Error(ERR_CHUNK_ENTRY);\n\t}\n\n\t/**\n\t * @deprecated Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\n\t * @returns {never} Throws an error trying to access this property\n\t */\n\tget initial() {\n\t\tthrow new Error(ERR_CHUNK_INITIAL);\n\t}\n\n\t/**\n\t * @deprecated Chunk.initial was removed. Use canBeInitial/isOnlyInitial()\n\t * @param {never} data The data attempting to be set\n\t * @returns {never} Throws an error trying to access this property\n\t */\n\tset initial(data) {\n\t\tthrow new Error(ERR_CHUNK_INITIAL);\n\t}\n\n\t/**\n\t * @returns {boolean} whether or not the Chunk will have a runtime\n\t */\n\thasRuntime() {\n\t\tfor (const chunkGroup of this._groups) {\n\t\t\tif (\n\t\t\t\tchunkGroup.isInitial() &&\n\t\t\t\tchunkGroup instanceof Entrypoint &&\n\t\t\t\tchunkGroup.getRuntimeChunk() === this\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @returns {boolean} whether or not this chunk can be an initial chunk\n\t */\n\tcanBeInitial() {\n\t\tfor (const chunkGroup of this._groups) {\n\t\t\tif (chunkGroup.isInitial()) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @returns {boolean} whether this chunk can only be an initial chunk\n\t */\n\tisOnlyInitial() {\n\t\tif (this._groups.size <= 0) return false;\n\t\tfor (const chunkGroup of this._groups) {\n\t\t\tif (!chunkGroup.isInitial()) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @returns {boolean} if this chunk contains the entry module\n\t */\n\thasEntryModule() {\n\t\treturn !!this.entryModule;\n\t}\n\n\t/**\n\t * @param {Module} module the module that will be added to this chunk.\n\t * @returns {boolean} returns true if the chunk doesn't have the module and it was added\n\t */\n\taddModule(module) {\n\t\tif (!this._modules.has(module)) {\n\t\t\tthis._modules.add(module);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module} module the module that will be removed from this chunk\n\t * @returns {boolean} returns true if chunk exists and is successfully deleted\n\t */\n\tremoveModule(module) {\n\t\tif (this._modules.delete(module)) {\n\t\t\tmodule.removeChunk(this);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module[]} modules the new modules to be set\n\t * @returns {void} set new modules to this chunk and return nothing\n\t */\n\tsetModules(modules) {\n\t\tthis._modules = new SortableSet(modules, sortByIdentifier);\n\t}\n\n\t/**\n\t * @returns {number} the amount of modules in chunk\n\t */\n\tgetNumberOfModules() {\n\t\treturn this._modules.size;\n\t}\n\n\t/**\n\t * @returns {SortableSet} return the modules SortableSet for this chunk\n\t */\n\tget modulesIterable() {\n\t\treturn this._modules;\n\t}\n\n\t/**\n\t * @param {ChunkGroup} chunkGroup the chunkGroup the chunk is being added\n\t * @returns {boolean} returns true if chunk is not apart of chunkGroup and is added successfully\n\t */\n\taddGroup(chunkGroup) {\n\t\tif (this._groups.has(chunkGroup)) return false;\n\t\tthis._groups.add(chunkGroup);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {ChunkGroup} chunkGroup the chunkGroup the chunk is being removed from\n\t * @returns {boolean} returns true if chunk does exist in chunkGroup and is removed\n\t */\n\tremoveGroup(chunkGroup) {\n\t\tif (!this._groups.has(chunkGroup)) return false;\n\t\tthis._groups.delete(chunkGroup);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {ChunkGroup} chunkGroup the chunkGroup to check\n\t * @returns {boolean} returns true if chunk has chunkGroup reference and exists in chunkGroup\n\t */\n\tisInGroup(chunkGroup) {\n\t\treturn this._groups.has(chunkGroup);\n\t}\n\n\t/**\n\t * @returns {number} the amount of groups said chunk is in\n\t */\n\tgetNumberOfGroups() {\n\t\treturn this._groups.size;\n\t}\n\n\t/**\n\t * @returns {SortableSet<ChunkGroup>} the chunkGroups that said chunk is referenced in\n\t */\n\tget groupsIterable() {\n\t\treturn this._groups;\n\t}\n\n\t/**\n\t * @param {Chunk} otherChunk the chunk to compare itself with\n\t * @returns {-1|0|1} this is a comparitor function like sort and returns -1, 0, or 1 based on sort order\n\t */\n\tcompareTo(otherChunk) {\n\t\tif (this.name && !otherChunk.name) return -1;\n\t\tif (!this.name && otherChunk.name) return 1;\n\t\tif (this.name < otherChunk.name) return -1;\n\t\tif (this.name > otherChunk.name) return 1;\n\t\tif (this._modules.size > otherChunk._modules.size) return -1;\n\t\tif (this._modules.size < otherChunk._modules.size) return 1;\n\t\tthis._modules.sort();\n\t\totherChunk._modules.sort();\n\t\tconst a = this._modules[Symbol.iterator]();\n\t\tconst b = otherChunk._modules[Symbol.iterator]();\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tconst aItem = a.next();\n\t\t\tif (aItem.done) return 0;\n\t\t\tconst bItem = b.next();\n\t\t\tconst aModuleIdentifier = aItem.value.identifier();\n\t\t\tconst bModuleIdentifier = bItem.value.identifier();\n\t\t\tif (aModuleIdentifier < bModuleIdentifier) return -1;\n\t\t\tif (aModuleIdentifier > bModuleIdentifier) return 1;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} module Module to check\n\t * @returns {boolean} returns true if module does exist in this chunk\n\t */\n\tcontainsModule(module) {\n\t\treturn this._modules.has(module);\n\t}\n\n\t/**\n\t * @returns {Module[]} an array of modules (do not modify)\n\t */\n\tgetModules() {\n\t\treturn this._modules.getFromCache(getArray);\n\t}\n\n\tgetModulesIdent() {\n\t\treturn this._modules.getFromUnorderedCache(getModulesIdent);\n\t}\n\n\t/**\n\t * @param {string=} reason reason why chunk is removed\n\t * @returns {void}\n\t */\n\tremove(reason) {\n\t\t// cleanup modules\n\t\t// Array.from is used here to create a clone, because removeChunk modifies this._modules\n\t\tfor (const module of Array.from(this._modules)) {\n\t\t\tmodule.removeChunk(this);\n\t\t}\n\t\tfor (const chunkGroup of this._groups) {\n\t\t\tchunkGroup.removeChunk(this);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {Module} module module to move\n\t * @param {Chunk} otherChunk other chunk to move it to\n\t * @returns {void}\n\t */\n\tmoveModule(module, otherChunk) {\n\t\tGraphHelpers.disconnectChunkAndModule(this, module);\n\t\tGraphHelpers.connectChunkAndModule(otherChunk, module);\n\t\tmodule.rewriteChunkInReasons(this, [otherChunk]);\n\t}\n\n\t/**\n\t *\n\t * @param {Chunk} otherChunk the chunk to integrate with\n\t * @param {string} reason reason why the module is being integrated\n\t * @returns {boolean} returns true or false if integration succeeds or fails\n\t */\n\tintegrate(otherChunk, reason) {\n\t\tif (!this.canBeIntegrated(otherChunk)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pick a new name for the integrated chunk\n\t\tif (this.name && otherChunk.name) {\n\t\t\tif (this.hasEntryModule() === otherChunk.hasEntryModule()) {\n\t\t\t\t// When both chunks have entry modules or none have one, use\n\t\t\t\t// shortest name\n\t\t\t\tif (this.name.length !== otherChunk.name.length) {\n\t\t\t\t\tthis.name =\n\t\t\t\t\t\tthis.name.length < otherChunk.name.length\n\t\t\t\t\t\t\t? this.name\n\t\t\t\t\t\t\t: otherChunk.name;\n\t\t\t\t} else {\n\t\t\t\t\tthis.name = this.name < otherChunk.name ? this.name : otherChunk.name;\n\t\t\t\t}\n\t\t\t} else if (otherChunk.hasEntryModule()) {\n\t\t\t\t// Pick the name of the chunk with the entry module\n\t\t\t\tthis.name = otherChunk.name;\n\t\t\t}\n\t\t} else if (otherChunk.name) {\n\t\t\tthis.name = otherChunk.name;\n\t\t}\n\n\t\t// Array.from is used here to create a clone, because moveModule modifies otherChunk._modules\n\t\tfor (const module of Array.from(otherChunk._modules)) {\n\t\t\totherChunk.moveModule(module, this);\n\t\t}\n\t\totherChunk._modules.clear();\n\n\t\tif (otherChunk.entryModule) {\n\t\t\tthis.entryModule = otherChunk.entryModule;\n\t\t}\n\n\t\tfor (const chunkGroup of otherChunk._groups) {\n\t\t\tchunkGroup.replaceChunk(otherChunk, this);\n\t\t\tthis.addGroup(chunkGroup);\n\t\t}\n\t\totherChunk._groups.clear();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Chunk} newChunk the new chunk that will be split out of the current chunk\n\t * @returns {void}\n\t */\n\tsplit(newChunk) {\n\t\tfor (const chunkGroup of this._groups) {\n\t\t\tchunkGroup.insertChunk(newChunk, this);\n\t\t\tnewChunk.addGroup(chunkGroup);\n\t\t}\n\t}\n\n\tisEmpty() {\n\t\treturn this._modules.size === 0;\n\t}\n\n\tupdateHash(hash) {\n\t\thash.update(`${this.id} `);\n\t\thash.update(this.ids ? this.ids.join(\",\") : \"\");\n\t\thash.update(`${this.name || \"\"} `);\n\t\tfor (const m of this._modules) {\n\t\t\thash.update(m.hash);\n\t\t}\n\t}\n\n\tcanBeIntegrated(otherChunk) {\n\t\tif (this.preventIntegration || otherChunk.preventIntegration) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * @param {Chunk} a chunk\n\t\t * @param {Chunk} b chunk\n\t\t * @returns {boolean} true, if a is always available when b is reached\n\t\t */\n\t\tconst isAvailable = (a, b) => {\n\t\t\tconst queue = new Set(b.groupsIterable);\n\t\t\tfor (const chunkGroup of queue) {\n\t\t\t\tif (a.isInGroup(chunkGroup)) continue;\n\t\t\t\tif (chunkGroup.isInitial()) return false;\n\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\tqueue.add(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\tconst selfHasRuntime = this.hasRuntime();\n\t\tconst otherChunkHasRuntime = otherChunk.hasRuntime();\n\n\t\tif (selfHasRuntime !== otherChunkHasRuntime) {\n\t\t\tif (selfHasRuntime) {\n\t\t\t\treturn isAvailable(this, otherChunk);\n\t\t\t} else if (otherChunkHasRuntime) {\n\t\t\t\treturn isAvailable(otherChunk, this);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this.hasEntryModule() || otherChunk.hasEntryModule()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @param {number} size the size\n\t * @param {Object} options the options passed in\n\t * @returns {number} the multiplier returned\n\t */\n\taddMultiplierAndOverhead(size, options) {\n\t\tconst overhead =\n\t\t\ttypeof options.chunkOverhead === \"number\" ? options.chunkOverhead : 10000;\n\t\tconst multiplicator = this.canBeInitial()\n\t\t\t? options.entryChunkMultiplicator || 10\n\t\t\t: 1;\n\n\t\treturn size * multiplicator + overhead;\n\t}\n\n\t/**\n\t * @returns {number} the size of all modules\n\t */\n\tmodulesSize() {\n\t\treturn this._modules.getFromUnorderedCache(getModulesSize);\n\t}\n\n\t/**\n\t * @param {Object} options the size display options\n\t * @returns {number} the chunk size\n\t */\n\tsize(options = {}) {\n\t\treturn this.addMultiplierAndOverhead(this.modulesSize(), options);\n\t}\n\n\t/**\n\t * @param {Chunk} otherChunk the other chunk\n\t * @param {TODO} options the options for this function\n\t * @returns {number | false} the size, or false if it can't be integrated\n\t */\n\tintegratedSize(otherChunk, options) {\n\t\t// Chunk if it's possible to integrate this chunk\n\t\tif (!this.canBeIntegrated(otherChunk)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet integratedModulesSize = this.modulesSize();\n\t\t// only count modules that do not exist in this chunk!\n\t\tfor (const otherModule of otherChunk._modules) {\n\t\t\tif (!this._modules.has(otherModule)) {\n\t\t\t\tintegratedModulesSize += otherModule.size();\n\t\t\t}\n\t\t}\n\n\t\treturn this.addMultiplierAndOverhead(integratedModulesSize, options);\n\t}\n\n\t/**\n\t * @param {function(Module, Module): -1|0|1=} sortByFn a predicate function used to sort modules\n\t * @returns {void}\n\t */\n\tsortModules(sortByFn) {\n\t\tthis._modules.sortWith(sortByFn || sortModuleById);\n\t}\n\n\tsortItems() {\n\t\tthis.sortModules();\n\t}\n\n\t/**\n\t * @returns {Set<Chunk>} a set of all the async chunks\n\t */\n\tgetAllAsyncChunks() {\n\t\tconst queue = new Set();\n\t\tconst chunks = new Set();\n\n\t\tconst initialChunks = intersect(\n\t\t\tArray.from(this.groupsIterable, g => new Set(g.chunks))\n\t\t);\n\n\t\tfor (const chunkGroup of this.groupsIterable) {\n\t\t\tfor (const child of chunkGroup.childrenIterable) {\n\t\t\t\tqueue.add(child);\n\t\t\t}\n\t\t}\n\n\t\tfor (const chunkGroup of queue) {\n\t\t\tfor (const chunk of chunkGroup.chunks) {\n\t\t\t\tif (!initialChunks.has(chunk)) {\n\t\t\t\t\tchunks.add(chunk);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const child of chunkGroup.childrenIterable) {\n\t\t\t\tqueue.add(child);\n\t\t\t}\n\t\t}\n\n\t\treturn chunks;\n\t}\n\n\t/**\n\t * @typedef {Object} ChunkMaps\n\t * @property {Record<string|number, string>} hash\n\t * @property {Record<string|number, Record<string, string>>} contentHash\n\t * @property {Record<string|number, string>} name\n\t */\n\n\t/**\n\t * @param {boolean} realHash should the full hash or the rendered hash be used\n\t * @returns {ChunkMaps} the chunk map information\n\t */\n\tgetChunkMaps(realHash) {\n\t\t/** @type {Record<string|number, string>} */\n\t\tconst chunkHashMap = Object.create(null);\n\t\t/** @type {Record<string|number, Record<string, string>>} */\n\t\tconst chunkContentHashMap = Object.create(null);\n\t\t/** @type {Record<string|number, string>} */\n\t\tconst chunkNameMap = Object.create(null);\n\n\t\tfor (const chunk of this.getAllAsyncChunks()) {\n\t\t\tchunkHashMap[chunk.id] = realHash ? chunk.hash : chunk.renderedHash;\n\t\t\tfor (const key of Object.keys(chunk.contentHash)) {\n\t\t\t\tif (!chunkContentHashMap[key]) {\n\t\t\t\t\tchunkContentHashMap[key] = Object.create(null);\n\t\t\t\t}\n\t\t\t\tchunkContentHashMap[key][chunk.id] = chunk.contentHash[key];\n\t\t\t}\n\t\t\tif (chunk.name) {\n\t\t\t\tchunkNameMap[chunk.id] = chunk.name;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\thash: chunkHashMap,\n\t\t\tcontentHash: chunkContentHashMap,\n\t\t\tname: chunkNameMap\n\t\t};\n\t}\n\n\t/**\n\t * @returns {Record<string, Set<TODO>[]>} a record object of names to lists of child ids(?)\n\t */\n\tgetChildIdsByOrders() {\n\t\tconst lists = new Map();\n\t\tfor (const group of this.groupsIterable) {\n\t\t\tif (group.chunks[group.chunks.length - 1] === this) {\n\t\t\t\tfor (const childGroup of group.childrenIterable) {\n\t\t\t\t\t// TODO webpack 5 remove this check for options\n\t\t\t\t\tif (typeof childGroup.options === \"object\") {\n\t\t\t\t\t\tfor (const key of Object.keys(childGroup.options)) {\n\t\t\t\t\t\t\tif (key.endsWith(\"Order\")) {\n\t\t\t\t\t\t\t\tconst name = key.substr(0, key.length - \"Order\".length);\n\t\t\t\t\t\t\t\tlet list = lists.get(name);\n\t\t\t\t\t\t\t\tif (list === undefined) lists.set(name, (list = []));\n\t\t\t\t\t\t\t\tlist.push({\n\t\t\t\t\t\t\t\t\torder: childGroup.options[key],\n\t\t\t\t\t\t\t\t\tgroup: childGroup\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst result = Object.create(null);\n\t\tfor (const [name, list] of lists) {\n\t\t\tlist.sort((a, b) => {\n\t\t\t\tconst cmp = b.order - a.order;\n\t\t\t\tif (cmp !== 0) return cmp;\n\t\t\t\t// TODO webpack 5 remove this check of compareTo\n\t\t\t\tif (a.group.compareTo) {\n\t\t\t\t\treturn a.group.compareTo(b.group);\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t\tresult[name] = Array.from(\n\t\t\t\tlist.reduce((set, item) => {\n\t\t\t\t\tfor (const chunk of item.group.chunks) {\n\t\t\t\t\t\tset.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t\treturn set;\n\t\t\t\t}, new Set())\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetChildIdsByOrdersMap(includeDirectChildren) {\n\t\tconst chunkMaps = Object.create(null);\n\n\t\tconst addChildIdsByOrdersToMap = chunk => {\n\t\t\tconst data = chunk.getChildIdsByOrders();\n\t\t\tfor (const key of Object.keys(data)) {\n\t\t\t\tlet chunkMap = chunkMaps[key];\n\t\t\t\tif (chunkMap === undefined) {\n\t\t\t\t\tchunkMaps[key] = chunkMap = Object.create(null);\n\t\t\t\t}\n\t\t\t\tchunkMap[chunk.id] = data[key];\n\t\t\t}\n\t\t};\n\n\t\tif (includeDirectChildren) {\n\t\t\tconst chunks = new Set();\n\t\t\tfor (const chunkGroup of this.groupsIterable) {\n\t\t\t\tfor (const chunk of chunkGroup.chunks) {\n\t\t\t\t\tchunks.add(chunk);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const chunk of chunks) {\n\t\t\t\taddChildIdsByOrdersToMap(chunk);\n\t\t\t}\n\t\t}\n\n\t\tfor (const chunk of this.getAllAsyncChunks()) {\n\t\t\taddChildIdsByOrdersToMap(chunk);\n\t\t}\n\n\t\treturn chunkMaps;\n\t}\n\n\t/**\n\t * @typedef {Object} ChunkModuleMaps\n\t * @property {Record<string|number, (string|number)[]>} id\n\t * @property {Record<string|number, string>} hash\n\t */\n\n\t/**\n\t * @param {ModuleFilterPredicate} filterFn function used to filter modules\n\t * @returns {ChunkModuleMaps} module map information\n\t */\n\tgetChunkModuleMaps(filterFn) {\n\t\t/** @type {Record<string|number, (string|number)[]>} */\n\t\tconst chunkModuleIdMap = Object.create(null);\n\t\t/** @type {Record<string|number, string>} */\n\t\tconst chunkModuleHashMap = Object.create(null);\n\n\t\tfor (const chunk of this.getAllAsyncChunks()) {\n\t\t\t/** @type {(string|number)[]} */\n\t\t\tlet array;\n\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\tif (filterFn(module)) {\n\t\t\t\t\tif (array === undefined) {\n\t\t\t\t\t\tarray = [];\n\t\t\t\t\t\tchunkModuleIdMap[chunk.id] = array;\n\t\t\t\t\t}\n\t\t\t\t\tarray.push(module.id);\n\t\t\t\t\tchunkModuleHashMap[module.id] = module.renderedHash;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (array !== undefined) {\n\t\t\t\tarray.sort();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tid: chunkModuleIdMap,\n\t\t\thash: chunkModuleHashMap\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * @param {function(Module): boolean} filterFn predicate function used to filter modules\n\t * @param {function(Chunk): boolean} filterChunkFn predicate function used to filter chunks\n\t * @returns {boolean} return true if module exists in graph\n\t */\n\thasModuleInGraph(filterFn, filterChunkFn) {\n\t\tconst queue = new Set(this.groupsIterable);\n\t\tconst chunksProcessed = new Set();\n\n\t\tfor (const chunkGroup of queue) {\n\t\t\tfor (const chunk of chunkGroup.chunks) {\n\t\t\t\tif (!chunksProcessed.has(chunk)) {\n\t\t\t\t\tchunksProcessed.add(chunk);\n\t\t\t\t\tif (!filterChunkFn || filterChunkFn(chunk)) {\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\tif (filterFn(module)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const child of chunkGroup.childrenIterable) {\n\t\t\t\tqueue.add(child);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\ttoString() {\n\t\treturn `Chunk[${Array.from(this._modules).join()}]`;\n\t}\n}\n\n// TODO remove in webpack 5\nObject.defineProperty(Chunk.prototype, \"forEachModule\", {\n\tconfigurable: false,\n\tvalue: util.deprecate(\n\t\t/**\n\t\t * @deprecated\n\t\t * @this {Chunk}\n\t\t * @typedef {function(any, any, Set<any>): void} ForEachModuleCallback\n\t\t * @param {ForEachModuleCallback} fn Callback function\n\t\t * @returns {void}\n\t\t */\n\t\tfunction(fn) {\n\t\t\tthis._modules.forEach(fn);\n\t\t},\n\t\t\"Chunk.forEachModule: Use for(const module of chunk.modulesIterable) instead\"\n\t)\n});\n\n// TODO remove in webpack 5\nObject.defineProperty(Chunk.prototype, \"mapModules\", {\n\tconfigurable: false,\n\tvalue: util.deprecate(\n\t\t/**\n\t\t * @deprecated\n\t\t * @this {Chunk}\n\t\t * @typedef {function(any, number): any} MapModulesCallback\n\t\t * @param {MapModulesCallback} fn Callback function\n\t\t * @returns {TODO[]} result of mapped modules\n\t\t */\n\t\tfunction(fn) {\n\t\t\treturn Array.from(this._modules, fn);\n\t\t},\n\t\t\"Chunk.mapModules: Use Array.from(chunk.modulesIterable, fn) instead\"\n\t)\n});\n\n// TODO remove in webpack 5\nObject.defineProperty(Chunk.prototype, \"chunks\", {\n\tconfigurable: false,\n\tget() {\n\t\tthrow new Error(\"Chunk.chunks: Use ChunkGroup.getChildren() instead\");\n\t},\n\tset() {\n\t\tthrow new Error(\"Chunk.chunks: Use ChunkGroup.add/removeChild() instead\");\n\t}\n});\n\n// TODO remove in webpack 5\nObject.defineProperty(Chunk.prototype, \"parents\", {\n\tconfigurable: false,\n\tget() {\n\t\tthrow new Error(\"Chunk.parents: Use ChunkGroup.getParents() instead\");\n\t},\n\tset() {\n\t\tthrow new Error(\"Chunk.parents: Use ChunkGroup.add/removeParent() instead\");\n\t}\n});\n\n// TODO remove in webpack 5\nObject.defineProperty(Chunk.prototype, \"blocks\", {\n\tconfigurable: false,\n\tget() {\n\t\tthrow new Error(\"Chunk.blocks: Use ChunkGroup.getBlocks() instead\");\n\t},\n\tset() {\n\t\tthrow new Error(\"Chunk.blocks: Use ChunkGroup.add/removeBlock() instead\");\n\t}\n});\n\n// TODO remove in webpack 5\nObject.defineProperty(Chunk.prototype, \"entrypoints\", {\n\tconfigurable: false,\n\tget() {\n\t\tthrow new Error(\n\t\t\t\"Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead\"\n\t\t);\n\t},\n\tset() {\n\t\tthrow new Error(\"Chunk.entrypoints: Use Chunks.addGroup instead\");\n\t}\n});\n\nmodule.exports = Chunk;\n"]},"metadata":{},"sourceType":"script"}