{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource,\n  RawSource\n} = require(\"webpack-sources\");\n\nconst stringifySafe = data => {\n  const stringified = JSON.stringify(data);\n\n  if (!stringified) {\n    return undefined; // Invalid JSON\n  }\n\n  return stringified.replace(/\\u2028|\\u2029/g, str => str === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\"); // invalid in JavaScript but valid JSON\n};\n\nclass JsonGenerator {\n  generate(module, dependencyTemplates, runtimeTemplate) {\n    const source = new ConcatSource();\n    const data = module.buildInfo.jsonData;\n\n    if (data === undefined) {\n      return new RawSource(runtimeTemplate.missingModuleStatement({\n        request: module.rawRequest\n      }));\n    }\n\n    let finalJson;\n\n    if (Array.isArray(module.buildMeta.providedExports) && !module.isUsed(\"default\")) {\n      // Only some exports are used: We can optimize here, by only generating a part of the JSON\n      const reducedJson = {};\n\n      for (const exportName of module.buildMeta.providedExports) {\n        if (exportName === \"default\") continue;\n        const used = module.isUsed(exportName);\n\n        if (used) {\n          reducedJson[used] = data[exportName];\n        }\n      }\n\n      finalJson = reducedJson;\n    } else {\n      finalJson = data;\n    } // Use JSON because JSON.parse() is much faster than JavaScript evaluation\n\n\n    const jsonSource = JSON.stringify(stringifySafe(finalJson));\n    const jsonExpr = `JSON.parse(${jsonSource})`;\n    source.add(`${module.moduleArgument}.exports = ${jsonExpr};`);\n    return source;\n  }\n\n}\n\nmodule.exports = JsonGenerator;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/JsonGenerator.js"],"names":["ConcatSource","RawSource","require","stringifySafe","data","stringified","JSON","stringify","undefined","replace","str","JsonGenerator","generate","module","dependencyTemplates","runtimeTemplate","source","buildInfo","jsonData","missingModuleStatement","request","rawRequest","finalJson","Array","isArray","buildMeta","providedExports","isUsed","reducedJson","exportName","used","jsonSource","jsonExpr","add","moduleArgument","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAM;AAAEA,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,IAA8BC,OAAO,CAAC,iBAAD,CAA3C;;AAEA,MAAMC,aAAa,GAAGC,IAAI,IAAI;AAC7B,QAAMC,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAApB;;AACA,MAAI,CAACC,WAAL,EAAkB;AACjB,WAAOG,SAAP,CADiB,CACC;AAClB;;AAED,SAAOH,WAAW,CAACI,OAAZ,CAAoB,gBAApB,EAAsCC,GAAG,IAC/CA,GAAG,KAAK,QAAR,GAAmB,SAAnB,GAA+B,SADzB,CAAP,CAN6B,CAQ1B;AACH,CATD;;AAWA,MAAMC,aAAN,CAAoB;AACnBC,EAAAA,QAAQ,CAACC,MAAD,EAASC,mBAAT,EAA8BC,eAA9B,EAA+C;AACtD,UAAMC,MAAM,GAAG,IAAIhB,YAAJ,EAAf;AACA,UAAMI,IAAI,GAAGS,MAAM,CAACI,SAAP,CAAiBC,QAA9B;;AACA,QAAId,IAAI,KAAKI,SAAb,EAAwB;AACvB,aAAO,IAAIP,SAAJ,CACNc,eAAe,CAACI,sBAAhB,CAAuC;AACtCC,QAAAA,OAAO,EAAEP,MAAM,CAACQ;AADsB,OAAvC,CADM,CAAP;AAKA;;AACD,QAAIC,SAAJ;;AACA,QACCC,KAAK,CAACC,OAAN,CAAcX,MAAM,CAACY,SAAP,CAAiBC,eAA/B,KACA,CAACb,MAAM,CAACc,MAAP,CAAc,SAAd,CAFF,EAGE;AACD;AACA,YAAMC,WAAW,GAAG,EAApB;;AACA,WAAK,MAAMC,UAAX,IAAyBhB,MAAM,CAACY,SAAP,CAAiBC,eAA1C,EAA2D;AAC1D,YAAIG,UAAU,KAAK,SAAnB,EAA8B;AAC9B,cAAMC,IAAI,GAAGjB,MAAM,CAACc,MAAP,CAAcE,UAAd,CAAb;;AACA,YAAIC,IAAJ,EAAU;AACTF,UAAAA,WAAW,CAACE,IAAD,CAAX,GAAoB1B,IAAI,CAACyB,UAAD,CAAxB;AACA;AACD;;AACDP,MAAAA,SAAS,GAAGM,WAAZ;AACA,KAdD,MAcO;AACNN,MAAAA,SAAS,GAAGlB,IAAZ;AACA,KA3BqD,CA4BtD;;;AACA,UAAM2B,UAAU,GAAGzB,IAAI,CAACC,SAAL,CAAeJ,aAAa,CAACmB,SAAD,CAA5B,CAAnB;AACA,UAAMU,QAAQ,GAAI,cAAaD,UAAW,GAA1C;AACAf,IAAAA,MAAM,CAACiB,GAAP,CAAY,GAAEpB,MAAM,CAACqB,cAAe,cAAaF,QAAS,GAA1D;AACA,WAAOhB,MAAP;AACA;;AAlCkB;;AAqCpBH,MAAM,CAACsB,OAAP,GAAiBxB,aAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource, RawSource } = require(\"webpack-sources\");\n\nconst stringifySafe = data => {\n\tconst stringified = JSON.stringify(data);\n\tif (!stringified) {\n\t\treturn undefined; // Invalid JSON\n\t}\n\n\treturn stringified.replace(/\\u2028|\\u2029/g, str =>\n\t\tstr === \"\\u2029\" ? \"\\\\u2029\" : \"\\\\u2028\"\n\t); // invalid in JavaScript but valid JSON\n};\n\nclass JsonGenerator {\n\tgenerate(module, dependencyTemplates, runtimeTemplate) {\n\t\tconst source = new ConcatSource();\n\t\tconst data = module.buildInfo.jsonData;\n\t\tif (data === undefined) {\n\t\t\treturn new RawSource(\n\t\t\t\truntimeTemplate.missingModuleStatement({\n\t\t\t\t\trequest: module.rawRequest\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tlet finalJson;\n\t\tif (\n\t\t\tArray.isArray(module.buildMeta.providedExports) &&\n\t\t\t!module.isUsed(\"default\")\n\t\t) {\n\t\t\t// Only some exports are used: We can optimize here, by only generating a part of the JSON\n\t\t\tconst reducedJson = {};\n\t\t\tfor (const exportName of module.buildMeta.providedExports) {\n\t\t\t\tif (exportName === \"default\") continue;\n\t\t\t\tconst used = module.isUsed(exportName);\n\t\t\t\tif (used) {\n\t\t\t\t\treducedJson[used] = data[exportName];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinalJson = reducedJson;\n\t\t} else {\n\t\t\tfinalJson = data;\n\t\t}\n\t\t// Use JSON because JSON.parse() is much faster than JavaScript evaluation\n\t\tconst jsonSource = JSON.stringify(stringifySafe(finalJson));\n\t\tconst jsonExpr = `JSON.parse(${jsonSource})`;\n\t\tsource.add(`${module.moduleArgument}.exports = ${jsonExpr};`);\n\t\treturn source;\n\t}\n}\n\nmodule.exports = JsonGenerator;\n"]},"metadata":{},"sourceType":"script"}