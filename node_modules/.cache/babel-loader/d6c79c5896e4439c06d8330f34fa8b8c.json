{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n/** @typedef {import(\"../ChunkTemplate\")} ChunkTemplate */\n\n\nconst getEntryInfo = chunk => {\n  return [chunk.entryModule].filter(Boolean).map(m => [m.id].concat(Array.from(chunk.groupsIterable)[0].chunks.filter(c => c !== chunk).map(c => c.id)));\n};\n\nclass JsonpChunkTemplatePlugin {\n  /**\n   * @param {ChunkTemplate} chunkTemplate the chunk template\n   * @returns {void}\n   */\n  apply(chunkTemplate) {\n    chunkTemplate.hooks.render.tap(\"JsonpChunkTemplatePlugin\", (modules, chunk) => {\n      const jsonpFunction = chunkTemplate.outputOptions.jsonpFunction;\n      const globalObject = chunkTemplate.outputOptions.globalObject;\n      const source = new ConcatSource();\n      const prefetchChunks = chunk.getChildIdsByOrders().prefetch;\n      source.add(`(${globalObject}[${JSON.stringify(jsonpFunction)}] = ${globalObject}[${JSON.stringify(jsonpFunction)}] || []).push([${JSON.stringify(chunk.ids)},`);\n      source.add(modules);\n      const entries = getEntryInfo(chunk);\n\n      if (entries.length > 0) {\n        source.add(`,${JSON.stringify(entries)}`);\n      } else if (prefetchChunks && prefetchChunks.length) {\n        source.add(`,0`);\n      }\n\n      if (prefetchChunks && prefetchChunks.length) {\n        source.add(`,${JSON.stringify(prefetchChunks)}`);\n      }\n\n      source.add(\"])\");\n      return source;\n    });\n    chunkTemplate.hooks.hash.tap(\"JsonpChunkTemplatePlugin\", hash => {\n      hash.update(\"JsonpChunkTemplatePlugin\");\n      hash.update(\"4\");\n      hash.update(`${chunkTemplate.outputOptions.jsonpFunction}`);\n      hash.update(`${chunkTemplate.outputOptions.globalObject}`);\n    });\n    chunkTemplate.hooks.hashForChunk.tap(\"JsonpChunkTemplatePlugin\", (hash, chunk) => {\n      hash.update(JSON.stringify(getEntryInfo(chunk)));\n      hash.update(JSON.stringify(chunk.getChildIdsByOrders().prefetch) || \"\");\n    });\n  }\n\n}\n\nmodule.exports = JsonpChunkTemplatePlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/web/JsonpChunkTemplatePlugin.js"],"names":["ConcatSource","require","getEntryInfo","chunk","entryModule","filter","Boolean","map","m","id","concat","Array","from","groupsIterable","chunks","c","JsonpChunkTemplatePlugin","apply","chunkTemplate","hooks","render","tap","modules","jsonpFunction","outputOptions","globalObject","source","prefetchChunks","getChildIdsByOrders","prefetch","add","JSON","stringify","ids","entries","length","hash","update","hashForChunk","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"../ChunkTemplate\")} ChunkTemplate */\n\nconst getEntryInfo = chunk => {\n\treturn [chunk.entryModule].filter(Boolean).map(m =>\n\t\t[m.id].concat(\n\t\t\tArray.from(chunk.groupsIterable)[0]\n\t\t\t\t.chunks.filter(c => c !== chunk)\n\t\t\t\t.map(c => c.id)\n\t\t)\n\t);\n};\n\nclass JsonpChunkTemplatePlugin {\n\t/**\n\t * @param {ChunkTemplate} chunkTemplate the chunk template\n\t * @returns {void}\n\t */\n\tapply(chunkTemplate) {\n\t\tchunkTemplate.hooks.render.tap(\n\t\t\t\"JsonpChunkTemplatePlugin\",\n\t\t\t(modules, chunk) => {\n\t\t\t\tconst jsonpFunction = chunkTemplate.outputOptions.jsonpFunction;\n\t\t\t\tconst globalObject = chunkTemplate.outputOptions.globalObject;\n\t\t\t\tconst source = new ConcatSource();\n\t\t\t\tconst prefetchChunks = chunk.getChildIdsByOrders().prefetch;\n\t\t\t\tsource.add(\n\t\t\t\t\t`(${globalObject}[${JSON.stringify(\n\t\t\t\t\t\tjsonpFunction\n\t\t\t\t\t)}] = ${globalObject}[${JSON.stringify(\n\t\t\t\t\t\tjsonpFunction\n\t\t\t\t\t)}] || []).push([${JSON.stringify(chunk.ids)},`\n\t\t\t\t);\n\t\t\t\tsource.add(modules);\n\t\t\t\tconst entries = getEntryInfo(chunk);\n\t\t\t\tif (entries.length > 0) {\n\t\t\t\t\tsource.add(`,${JSON.stringify(entries)}`);\n\t\t\t\t} else if (prefetchChunks && prefetchChunks.length) {\n\t\t\t\t\tsource.add(`,0`);\n\t\t\t\t}\n\n\t\t\t\tif (prefetchChunks && prefetchChunks.length) {\n\t\t\t\t\tsource.add(`,${JSON.stringify(prefetchChunks)}`);\n\t\t\t\t}\n\t\t\t\tsource.add(\"])\");\n\t\t\t\treturn source;\n\t\t\t}\n\t\t);\n\t\tchunkTemplate.hooks.hash.tap(\"JsonpChunkTemplatePlugin\", hash => {\n\t\t\thash.update(\"JsonpChunkTemplatePlugin\");\n\t\t\thash.update(\"4\");\n\t\t\thash.update(`${chunkTemplate.outputOptions.jsonpFunction}`);\n\t\t\thash.update(`${chunkTemplate.outputOptions.globalObject}`);\n\t\t});\n\t\tchunkTemplate.hooks.hashForChunk.tap(\n\t\t\t\"JsonpChunkTemplatePlugin\",\n\t\t\t(hash, chunk) => {\n\t\t\t\thash.update(JSON.stringify(getEntryInfo(chunk)));\n\t\t\t\thash.update(JSON.stringify(chunk.getChildIdsByOrders().prefetch) || \"\");\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = JsonpChunkTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}