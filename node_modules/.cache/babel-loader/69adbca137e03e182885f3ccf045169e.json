{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\n\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\n\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\n\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\n\nconst NullFactory = require(\"./NullFactory\");\n\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\nconst WebpackError = require(\"./WebpackError\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\n\nclass DllReferencePlugin {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  constructor(options) {\n    validateOptions(schema, options, \"Dll Reference Plugin\");\n    this.options = options;\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n      compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());\n    });\n    compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", (params, callback) => {\n      if (\"manifest\" in this.options) {\n        const manifest = this.options.manifest;\n\n        if (typeof manifest === \"string\") {\n          params.compilationDependencies.add(manifest);\n          compiler.inputFileSystem.readFile(manifest, (err, result) => {\n            if (err) return callback(err); // Catch errors parsing the manifest so that blank\n            // or malformed manifest files don't kill the process.\n\n            try {\n              params[\"dll reference \" + manifest] = parseJson(result.toString(\"utf-8\"));\n            } catch (e) {\n              // Store the error in the params so that it can\n              // be added as a compilation error later on.\n              const manifestPath = makePathsRelative(compiler.options.context, manifest);\n              params[\"dll reference parse error \" + manifest] = new DllManifestError(manifestPath, e.message);\n            }\n\n            return callback();\n          });\n          return;\n        }\n      }\n\n      return callback();\n    });\n    compiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n      let name = this.options.name;\n      let sourceType = this.options.sourceType;\n      let content = \"content\" in this.options ? this.options.content : undefined;\n\n      if (\"manifest\" in this.options) {\n        let manifestParameter = this.options.manifest;\n        let manifest;\n\n        if (typeof manifestParameter === \"string\") {\n          // If there was an error parsing the manifest\n          // file, exit now because the error will be added\n          // as a compilation error in the \"compilation\" hook.\n          if (params[\"dll reference parse error \" + manifestParameter]) {\n            return;\n          }\n\n          manifest =\n          /** @type {DllReferencePluginOptionsManifest} */\n          params[\"dll reference \" + manifestParameter];\n        } else {\n          manifest = manifestParameter;\n        }\n\n        if (manifest) {\n          if (!name) name = manifest.name;\n          if (!sourceType) sourceType = manifest.type;\n          if (!content) content = manifest.content;\n        }\n      }\n\n      const externals = {};\n      const source = \"dll-reference \" + name;\n      externals[source] = name;\n      const normalModuleFactory = params.normalModuleFactory;\n      new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n      new DelegatedModuleFactoryPlugin({\n        source: source,\n        type: this.options.type,\n        scope: this.options.scope,\n        context: this.options.context || compiler.options.context,\n        content,\n        extensions: this.options.extensions\n      }).apply(normalModuleFactory);\n    });\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, params) => {\n      if (\"manifest\" in this.options) {\n        let manifest = this.options.manifest;\n\n        if (typeof manifest === \"string\") {\n          // If there was an error parsing the manifest file, add the\n          // error as a compilation error to make the compilation fail.\n          let e = params[\"dll reference parse error \" + manifest];\n\n          if (e) {\n            compilation.errors.push(e);\n          }\n        }\n      }\n    });\n  }\n\n}\n\nclass DllManifestError extends WebpackError {\n  constructor(filename, message) {\n    super();\n    this.name = \"DllManifestError\";\n    this.message = `Dll manifest ${filename}\\n${message}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nmodule.exports = DllReferencePlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/DllReferencePlugin.js"],"names":["parseJson","require","DelegatedSourceDependency","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","DelegatedExportsDependency","NullFactory","makePathsRelative","WebpackError","validateOptions","schema","DllReferencePlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","compilationDependencies","add","inputFileSystem","readFile","err","result","toString","e","manifestPath","context","DllManifestError","message","compile","name","sourceType","content","undefined","manifestParameter","type","externals","source","scope","extensions","errors","push","filename","Error","captureStackTrace","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nconst WebpackError = require(\"./WebpackError\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options, \"Dll Reference Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedExportsDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tparams.compilationDependencies.add(manifest);\n\t\t\t\t\t\tcompiler.inputFileSystem.readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tparams[\"dll reference \" + manifest] = parseJson(\n\t\t\t\t\t\t\t\t\tresult.toString(\"utf-8\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tparams[\n\t\t\t\t\t\t\t\t\t\"dll reference parse error \" + manifest\n\t\t\t\t\t\t\t\t] = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (params[\"dll reference parse error \" + manifestParameter]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest =\n\t\t\t\t\t\t/** @type {DllReferencePluginOptionsManifest} */ (params[\n\t\t\t\t\t\t\t\"dll reference \" + manifestParameter\n\t\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tlet e = params[\"dll reference parse error \" + manifest];\n\t\t\t\t\t\tif (e) {\n\t\t\t\t\t\t\tcompilation.errors.push(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"]},"metadata":{},"sourceType":"script"}