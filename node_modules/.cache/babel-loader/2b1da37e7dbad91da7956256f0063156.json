{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nconst UnsupportedWebAssemblyFeatureError = require(\"./UnsupportedWebAssemblyFeatureError\");\n\nclass WasmFinalizeExportsPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"WasmFinalizeExportsPlugin\", compilation => {\n      compilation.hooks.finishModules.tap(\"WasmFinalizeExportsPlugin\", modules => {\n        for (const module of modules) {\n          // 1. if a WebAssembly module\n          if (module.type.startsWith(\"webassembly\") === true) {\n            const jsIncompatibleExports = module.buildMeta.jsIncompatibleExports;\n\n            if (jsIncompatibleExports === undefined) {\n              continue;\n            }\n\n            for (const reason of module.reasons) {\n              // 2. is referenced by a non-WebAssembly module\n              if (reason.module.type.startsWith(\"webassembly\") === false) {\n                const ref = compilation.getDependencyReference(reason.module, reason.dependency);\n                if (!ref) continue;\n                const importedNames = ref.importedNames;\n\n                if (Array.isArray(importedNames)) {\n                  importedNames.forEach(name => {\n                    // 3. and uses a func with an incompatible JS signature\n                    if (Object.prototype.hasOwnProperty.call(jsIncompatibleExports, name)) {\n                      // 4. error\n\n                      /** @type {any} */\n                      const error = new UnsupportedWebAssemblyFeatureError(`Export \"${name}\" with ${jsIncompatibleExports[name]} can only be used for direct wasm to wasm dependencies`);\n                      error.module = module;\n                      error.origin = reason.module;\n                      error.originLoc = reason.dependency.loc;\n                      error.dependencies = [reason.dependency];\n                      compilation.errors.push(error);\n                    }\n                  });\n                }\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = WasmFinalizeExportsPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/wasm/WasmFinalizeExportsPlugin.js"],"names":["UnsupportedWebAssemblyFeatureError","require","WasmFinalizeExportsPlugin","apply","compiler","hooks","compilation","tap","finishModules","modules","module","type","startsWith","jsIncompatibleExports","buildMeta","undefined","reason","reasons","ref","getDependencyReference","dependency","importedNames","Array","isArray","forEach","name","Object","prototype","hasOwnProperty","call","error","origin","originLoc","loc","dependencies","errors","push","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,kCAAkC,GAAGC,OAAO,CAAC,sCAAD,CAAlD;;AAEA,MAAMC,yBAAN,CAAgC;AAC/BC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,2BAA/B,EAA4DD,WAAW,IAAI;AAC1EA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,aAAlB,CAAgCD,GAAhC,CACC,2BADD,EAECE,OAAO,IAAI;AACV,aAAK,MAAMC,MAAX,IAAqBD,OAArB,EAA8B;AAC7B;AACA,cAAIC,MAAM,CAACC,IAAP,CAAYC,UAAZ,CAAuB,aAAvB,MAA0C,IAA9C,EAAoD;AACnD,kBAAMC,qBAAqB,GAC1BH,MAAM,CAACI,SAAP,CAAiBD,qBADlB;;AAGA,gBAAIA,qBAAqB,KAAKE,SAA9B,EAAyC;AACxC;AACA;;AAED,iBAAK,MAAMC,MAAX,IAAqBN,MAAM,CAACO,OAA5B,EAAqC;AACpC;AACA,kBAAID,MAAM,CAACN,MAAP,CAAcC,IAAd,CAAmBC,UAAnB,CAA8B,aAA9B,MAAiD,KAArD,EAA4D;AAC3D,sBAAMM,GAAG,GAAGZ,WAAW,CAACa,sBAAZ,CACXH,MAAM,CAACN,MADI,EAEXM,MAAM,CAACI,UAFI,CAAZ;AAKA,oBAAI,CAACF,GAAL,EAAU;AAEV,sBAAMG,aAAa,GAAGH,GAAG,CAACG,aAA1B;;AAEA,oBAAIC,KAAK,CAACC,OAAN,CAAcF,aAAd,CAAJ,EAAkC;AACjCA,kBAAAA,aAAa,CAACG,OAAd,CAAsBC,IAAI,IAAI;AAC7B;AACA,wBACCC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CACChB,qBADD,EAECY,IAFD,CADD,EAKE;AACD;;AACA;AACA,4BAAMK,KAAK,GAAG,IAAI9B,kCAAJ,CACZ,WAAUyB,IAAK,UAASZ,qBAAqB,CAACY,IAAD,CAAO,wDADxC,CAAd;AAGAK,sBAAAA,KAAK,CAACpB,MAAN,GAAeA,MAAf;AACAoB,sBAAAA,KAAK,CAACC,MAAN,GAAef,MAAM,CAACN,MAAtB;AACAoB,sBAAAA,KAAK,CAACE,SAAN,GAAkBhB,MAAM,CAACI,UAAP,CAAkBa,GAApC;AACAH,sBAAAA,KAAK,CAACI,YAAN,GAAqB,CAAClB,MAAM,CAACI,UAAR,CAArB;AACAd,sBAAAA,WAAW,CAAC6B,MAAZ,CAAmBC,IAAnB,CAAwBN,KAAxB;AACA;AACD,mBAnBD;AAoBA;AACD;AACD;AACD;AACD;AACD,OAnDF;AAqDA,KAtDD;AAuDA;;AAzD8B;;AA4DhCpB,MAAM,CAAC2B,OAAP,GAAiBnC,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nconst UnsupportedWebAssemblyFeatureError = require(\"./UnsupportedWebAssemblyFeatureError\");\n\nclass WasmFinalizeExportsPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"WasmFinalizeExportsPlugin\", compilation => {\n\t\t\tcompilation.hooks.finishModules.tap(\n\t\t\t\t\"WasmFinalizeExportsPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t// 1. if a WebAssembly module\n\t\t\t\t\t\tif (module.type.startsWith(\"webassembly\") === true) {\n\t\t\t\t\t\t\tconst jsIncompatibleExports =\n\t\t\t\t\t\t\t\tmodule.buildMeta.jsIncompatibleExports;\n\n\t\t\t\t\t\t\tif (jsIncompatibleExports === undefined) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor (const reason of module.reasons) {\n\t\t\t\t\t\t\t\t// 2. is referenced by a non-WebAssembly module\n\t\t\t\t\t\t\t\tif (reason.module.type.startsWith(\"webassembly\") === false) {\n\t\t\t\t\t\t\t\t\tconst ref = compilation.getDependencyReference(\n\t\t\t\t\t\t\t\t\t\treason.module,\n\t\t\t\t\t\t\t\t\t\treason.dependency\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tif (!ref) continue;\n\n\t\t\t\t\t\t\t\t\tconst importedNames = ref.importedNames;\n\n\t\t\t\t\t\t\t\t\tif (Array.isArray(importedNames)) {\n\t\t\t\t\t\t\t\t\t\timportedNames.forEach(name => {\n\t\t\t\t\t\t\t\t\t\t\t// 3. and uses a func with an incompatible JS signature\n\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\tObject.prototype.hasOwnProperty.call(\n\t\t\t\t\t\t\t\t\t\t\t\t\tjsIncompatibleExports,\n\t\t\t\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t// 4. error\n\t\t\t\t\t\t\t\t\t\t\t\t/** @type {any} */\n\t\t\t\t\t\t\t\t\t\t\t\tconst error = new UnsupportedWebAssemblyFeatureError(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Export \"${name}\" with ${jsIncompatibleExports[name]} can only be used for direct wasm to wasm dependencies`\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\terror.module = module;\n\t\t\t\t\t\t\t\t\t\t\t\terror.origin = reason.module;\n\t\t\t\t\t\t\t\t\t\t\t\terror.originLoc = reason.dependency.loc;\n\t\t\t\t\t\t\t\t\t\t\t\terror.dependencies = [reason.dependency];\n\t\t\t\t\t\t\t\t\t\t\t\tcompilation.errors.push(error);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = WasmFinalizeExportsPlugin;\n"]},"metadata":{},"sourceType":"script"}