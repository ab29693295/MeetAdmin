{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nclass CodeNode {\n  constructor(generatedCode) {\n    this.generatedCode = generatedCode;\n  }\n\n  clone() {\n    return new CodeNode(this.generatedCode);\n  }\n\n  getGeneratedCode() {\n    return this.generatedCode;\n  }\n\n  getMappings(mappingsContext) {\n    const lines = getNumberOfLines(this.generatedCode);\n    const mapping = Array(lines + 1).join(\";\");\n\n    if (lines > 0) {\n      mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n\n      if (mappingsContext.unfinishedGeneratedLine > 0) {\n        return mapping + \"A\";\n      } else {\n        return mapping;\n      }\n    } else {\n      const prevUnfinished = mappingsContext.unfinishedGeneratedLine;\n      mappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);\n\n      if (prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) {\n        return \"A\";\n      } else {\n        return \"\";\n      }\n    }\n  }\n\n  addGeneratedCode(generatedCode) {\n    this.generatedCode += generatedCode;\n  }\n\n  mapGeneratedCode(fn) {\n    const generatedCode = fn(this.generatedCode);\n    return new CodeNode(generatedCode);\n  }\n\n  getNormalizedNodes() {\n    return [this];\n  }\n\n  merge(otherNode) {\n    if (otherNode instanceof CodeNode) {\n      this.generatedCode += otherNode.generatedCode;\n      return this;\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = CodeNode;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/source-list-map/lib/CodeNode.js"],"names":["getNumberOfLines","require","getUnfinishedLine","CodeNode","constructor","generatedCode","clone","getGeneratedCode","getMappings","mappingsContext","lines","mapping","Array","join","unfinishedGeneratedLine","prevUnfinished","addGeneratedCode","mapGeneratedCode","fn","getNormalizedNodes","merge","otherNode","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,gBAA9C;;AACA,MAAME,iBAAiB,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,iBAA/C;;AAEA,MAAMC,QAAN,CAAe;AACdC,EAAAA,WAAW,CAACC,aAAD,EAAgB;AAC1B,SAAKA,aAAL,GAAqBA,aAArB;AACA;;AAEDC,EAAAA,KAAK,GAAG;AACP,WAAO,IAAIH,QAAJ,CAAa,KAAKE,aAAlB,CAAP;AACA;;AAEDE,EAAAA,gBAAgB,GAAG;AAClB,WAAO,KAAKF,aAAZ;AACA;;AAEDG,EAAAA,WAAW,CAACC,eAAD,EAAkB;AAC5B,UAAMC,KAAK,GAAGV,gBAAgB,CAAC,KAAKK,aAAN,CAA9B;AACA,UAAMM,OAAO,GAAGC,KAAK,CAACF,KAAK,GAAC,CAAP,CAAL,CAAeG,IAAf,CAAoB,GAApB,CAAhB;;AACA,QAAGH,KAAK,GAAG,CAAX,EAAc;AACbD,MAAAA,eAAe,CAACK,uBAAhB,GAA0CZ,iBAAiB,CAAC,KAAKG,aAAN,CAA3D;;AACA,UAAGI,eAAe,CAACK,uBAAhB,GAA0C,CAA7C,EAAgD;AAC/C,eAAOH,OAAO,GAAG,GAAjB;AACA,OAFD,MAEO;AACN,eAAOA,OAAP;AACA;AACD,KAPD,MAOO;AACN,YAAMI,cAAc,GAAGN,eAAe,CAACK,uBAAvC;AACAL,MAAAA,eAAe,CAACK,uBAAhB,IAA2CZ,iBAAiB,CAAC,KAAKG,aAAN,CAA5D;;AACA,UAAGU,cAAc,KAAK,CAAnB,IAAwBN,eAAe,CAACK,uBAAhB,GAA0C,CAArE,EAAwE;AACvE,eAAO,GAAP;AACA,OAFD,MAEO;AACN,eAAO,EAAP;AACA;AACD;AACD;;AAEDE,EAAAA,gBAAgB,CAACX,aAAD,EAAgB;AAC/B,SAAKA,aAAL,IAAsBA,aAAtB;AACA;;AAEDY,EAAAA,gBAAgB,CAACC,EAAD,EAAK;AACpB,UAAMb,aAAa,GAAGa,EAAE,CAAC,KAAKb,aAAN,CAAxB;AACA,WAAO,IAAIF,QAAJ,CAAaE,aAAb,CAAP;AACA;;AAEDc,EAAAA,kBAAkB,GAAG;AACpB,WAAO,CAAC,IAAD,CAAP;AACA;;AAEDC,EAAAA,KAAK,CAACC,SAAD,EAAY;AAChB,QAAGA,SAAS,YAAYlB,QAAxB,EAAkC;AACjC,WAAKE,aAAL,IAAsBgB,SAAS,CAAChB,aAAhC;AACA,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA;;AArDa;;AAwDfiB,MAAM,CAACC,OAAP,GAAiBpB,QAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nclass CodeNode {\n\tconstructor(generatedCode) {\n\t\tthis.generatedCode = generatedCode;\n\t}\n\n\tclone() {\n\t\treturn new CodeNode(this.generatedCode);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tconst lines = getNumberOfLines(this.generatedCode);\n\t\tconst mapping = Array(lines+1).join(\";\");\n\t\tif(lines > 0) {\n\t\t\tmappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n\t\t\tif(mappingsContext.unfinishedGeneratedLine > 0) {\n\t\t\t\treturn mapping + \"A\";\n\t\t\t} else {\n\t\t\t\treturn mapping;\n\t\t\t}\n\t\t} else {\n\t\t\tconst prevUnfinished = mappingsContext.unfinishedGeneratedLine;\n\t\t\tmappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);\n\t\t\tif(prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) {\n\t\t\t\treturn \"A\";\n\t\t\t} else {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\taddGeneratedCode(generatedCode) {\n\t\tthis.generatedCode += generatedCode;\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tconst generatedCode = fn(this.generatedCode);\n\t\treturn new CodeNode(generatedCode);\n\t}\n\n\tgetNormalizedNodes() {\n\t\treturn [this];\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof CodeNode) {\n\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nmodule.exports = CodeNode;\n"]},"metadata":{},"sourceType":"script"}