{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\n\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\n\nvar Source = require(\"./Source\");\n\nvar SPLIT_REGEX = /(?!$)[^\\n\\r;{}]*[\\n\\r;{}]*/g;\n\nfunction _splitCode(code) {\n  return code.match(SPLIT_REGEX) || [];\n}\n\nclass OriginalSource extends Source {\n  constructor(value, name) {\n    super();\n    this._value = value;\n    this._name = name;\n  }\n\n  source() {\n    return this._value;\n  }\n\n  node(options) {\n    options = options || {};\n    var sourceMap = this._sourceMap;\n    var value = this._value;\n    var name = this._name;\n    var lines = value.split(\"\\n\");\n    var node = new SourceNode(null, null, null, lines.map(function (line, idx) {\n      var pos = 0;\n\n      if (options.columns === false) {\n        var content = line + (idx != lines.length - 1 ? \"\\n\" : \"\");\n        return new SourceNode(idx + 1, 0, name, content);\n      }\n\n      return new SourceNode(null, null, null, _splitCode(line + (idx != lines.length - 1 ? \"\\n\" : \"\")).map(function (item) {\n        if (/^\\s*$/.test(item)) {\n          pos += item.length;\n          return item;\n        }\n\n        var res = new SourceNode(idx + 1, pos, name, item);\n        pos += item.length;\n        return res;\n      }));\n    }));\n    node.setSourceContent(name, value);\n    return node;\n  }\n\n  listMap(options) {\n    return new SourceListMap(this._value, this._name, this._value);\n  }\n\n  updateHash(hash) {\n    hash.update(this._value);\n  }\n\n}\n\nrequire(\"./SourceAndMapMixin\")(OriginalSource.prototype);\n\nmodule.exports = OriginalSource;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack-sources/lib/OriginalSource.js"],"names":["SourceNode","require","SourceMapConsumer","SourceListMap","Source","SPLIT_REGEX","_splitCode","code","match","OriginalSource","constructor","value","name","_value","_name","source","node","options","sourceMap","_sourceMap","lines","split","map","line","idx","pos","columns","content","length","item","test","res","setSourceContent","listMap","updateHash","hash","update","prototype","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar SourceNode = require(\"source-map\").SourceNode;\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\nvar Source = require(\"./Source\");\n\nvar SPLIT_REGEX = /(?!$)[^\\n\\r;{}]*[\\n\\r;{}]*/g;\n\nfunction _splitCode(code) {\n\treturn code.match(SPLIT_REGEX) || [];\n}\n\nclass OriginalSource extends Source {\n\tconstructor(value, name) {\n\t\tsuper();\n\t\tthis._value = value;\n\t\tthis._name = name;\n\t}\n\n\tsource() {\n\t\treturn this._value;\n\t}\n\n\tnode(options) {\n\t\toptions = options || {};\n\t\tvar sourceMap = this._sourceMap;\n\t\tvar value = this._value;\n\t\tvar name = this._name;\n\t\tvar lines = value.split(\"\\n\");\n\t\tvar node = new SourceNode(null, null, null,\n\t\t\tlines.map(function(line, idx) {\n\t\t\t\tvar pos = 0;\n\t\t\t\tif(options.columns === false) {\n\t\t\t\t\tvar content = line + (idx != lines.length - 1 ? \"\\n\" : \"\");\n\t\t\t\t\treturn new SourceNode(idx + 1, 0, name, content);\n\t\t\t\t}\n\t\t\t\treturn new SourceNode(null, null, null,\n\t\t\t\t\t_splitCode(line + (idx != lines.length - 1 ? \"\\n\" : \"\")).map(function(item) {\n\t\t\t\t\t\tif(/^\\s*$/.test(item)) {\n\t\t\t\t\t\t\tpos += item.length;\n\t\t\t\t\t\t\treturn item;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar res = new SourceNode(idx + 1, pos, name, item);\n\t\t\t\t\t\tpos += item.length;\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t\tnode.setSourceContent(name, value);\n\t\treturn node;\n\t}\n\n\tlistMap(options) {\n\t\treturn new SourceListMap(this._value, this._name, this._value)\n\t}\n\n\tupdateHash(hash) {\n\t\thash.update(this._value);\n\t}\n}\n\nrequire(\"./SourceAndMapMixin\")(OriginalSource.prototype);\n\nmodule.exports = OriginalSource;\n"]},"metadata":{},"sourceType":"script"}