{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n\nconst Template = require(\"./Template\");\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\n\n\nclass AmdMainTemplatePlugin {\n  /**\n   * @param {AmdMainTemplatePluginOptions} options the plugin options\n   */\n  constructor(options) {\n    if (!options || typeof options === \"string\") {\n      this.name = options;\n      this.requireAsWrapper = false;\n    } else {\n      this.name = options.name;\n      this.requireAsWrapper = options.requireAsWrapper;\n    }\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  apply(compilation) {\n    const {\n      mainTemplate,\n      chunkTemplate\n    } = compilation;\n\n    const onRenderWithEntry = (source, chunk, hash) => {\n      const externals = chunk.getModules().filter(m => m.external);\n      const externalsDepsArray = JSON.stringify(externals.map(m => typeof m.request === \"object\" ? m.request.amd : m.request));\n      const externalsArguments = externals.map(m => `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${m.id}`)}__`).join(\", \");\n\n      if (this.requireAsWrapper) {\n        return new ConcatSource(`require(${externalsDepsArray}, function(${externalsArguments}) { return `, source, \"});\");\n      } else if (this.name) {\n        const name = mainTemplate.getAssetPath(this.name, {\n          hash,\n          chunk\n        });\n        return new ConcatSource(`define(${JSON.stringify(name)}, ${externalsDepsArray}, function(${externalsArguments}) { return `, source, \"});\");\n      } else if (externalsArguments) {\n        return new ConcatSource(`define(${externalsDepsArray}, function(${externalsArguments}) { return `, source, \"});\");\n      } else {\n        return new ConcatSource(\"define(function() { return \", source, \"});\");\n      }\n    };\n\n    for (const template of [mainTemplate, chunkTemplate]) {\n      template.hooks.renderWithEntry.tap(\"AmdMainTemplatePlugin\", onRenderWithEntry);\n    }\n\n    mainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", paths => {\n      if (this.name) {\n        paths.push(this.name);\n      }\n\n      return paths;\n    });\n    mainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", hash => {\n      hash.update(\"exports amd\");\n\n      if (this.name) {\n        hash.update(this.name);\n      }\n    });\n  }\n\n}\n\nmodule.exports = AmdMainTemplatePlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/AmdMainTemplatePlugin.js"],"names":["ConcatSource","require","Template","AmdMainTemplatePlugin","constructor","options","name","requireAsWrapper","apply","compilation","mainTemplate","chunkTemplate","onRenderWithEntry","source","chunk","hash","externals","getModules","filter","m","external","externalsDepsArray","JSON","stringify","map","request","amd","externalsArguments","toIdentifier","id","join","getAssetPath","template","hooks","renderWithEntry","tap","globalHashPaths","paths","push","update","module","exports"],"mappings":"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","sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst Template = require(\"./Template\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\n\nclass AmdMainTemplatePlugin {\n\t/**\n\t * @param {AmdMainTemplatePluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tif (!options || typeof options === \"string\") {\n\t\t\tthis.name = options;\n\t\t\tthis.requireAsWrapper = false;\n\t\t} else {\n\t\t\tthis.name = options.name;\n\t\t\tthis.requireAsWrapper = options.requireAsWrapper;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation instance\n\t * @returns {void}\n\t */\n\tapply(compilation) {\n\t\tconst { mainTemplate, chunkTemplate } = compilation;\n\n\t\tconst onRenderWithEntry = (source, chunk, hash) => {\n\t\t\tconst externals = chunk.getModules().filter(m => m.external);\n\t\t\tconst externalsDepsArray = JSON.stringify(\n\t\t\t\texternals.map(m =>\n\t\t\t\t\ttypeof m.request === \"object\" ? m.request.amd : m.request\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst externalsArguments = externals\n\t\t\t\t.map(\n\t\t\t\t\tm => `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${m.id}`)}__`\n\t\t\t\t)\n\t\t\t\t.join(\", \");\n\n\t\t\tif (this.requireAsWrapper) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`require(${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else if (this.name) {\n\t\t\t\tconst name = mainTemplate.getAssetPath(this.name, {\n\t\t\t\t\thash,\n\t\t\t\t\tchunk\n\t\t\t\t});\n\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`define(${JSON.stringify(\n\t\t\t\t\t\tname\n\t\t\t\t\t)}, ${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else if (externalsArguments) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`define(${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn new ConcatSource(\"define(function() { return \", source, \"});\");\n\t\t\t}\n\t\t};\n\n\t\tfor (const template of [mainTemplate, chunkTemplate]) {\n\t\t\ttemplate.hooks.renderWithEntry.tap(\n\t\t\t\t\"AmdMainTemplatePlugin\",\n\t\t\t\tonRenderWithEntry\n\t\t\t);\n\t\t}\n\n\t\tmainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", paths => {\n\t\t\tif (this.name) {\n\t\t\t\tpaths.push(this.name);\n\t\t\t}\n\t\t\treturn paths;\n\t\t});\n\n\t\tmainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"exports amd\");\n\t\t\tif (this.name) {\n\t\t\t\thash.update(this.name);\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = AmdMainTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}