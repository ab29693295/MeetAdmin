{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst GraphHelpers = require(\"../GraphHelpers\");\n\nclass EnsureChunkConditionsPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"EnsureChunkConditionsPlugin\", compilation => {\n      const handler = chunks => {\n        let changed = false;\n\n        for (const module of compilation.modules) {\n          if (!module.chunkCondition) continue;\n          const sourceChunks = new Set();\n          const chunkGroups = new Set();\n\n          for (const chunk of module.chunksIterable) {\n            if (!module.chunkCondition(chunk)) {\n              sourceChunks.add(chunk);\n\n              for (const group of chunk.groupsIterable) {\n                chunkGroups.add(group);\n              }\n            }\n          }\n\n          if (sourceChunks.size === 0) continue;\n          const targetChunks = new Set();\n\n          chunkGroupLoop: for (const chunkGroup of chunkGroups) {\n            // Can module be placed in a chunk of this group?\n            for (const chunk of chunkGroup.chunks) {\n              if (module.chunkCondition(chunk)) {\n                targetChunks.add(chunk);\n                continue chunkGroupLoop;\n              }\n            } // We reached the entrypoint: fail\n\n\n            if (chunkGroup.isInitial()) {\n              throw new Error(\"Cannot fullfil chunk condition of \" + module.identifier());\n            } // Try placing in all parents\n\n\n            for (const group of chunkGroup.parentsIterable) {\n              chunkGroups.add(group);\n            }\n          }\n\n          for (const sourceChunk of sourceChunks) {\n            GraphHelpers.disconnectChunkAndModule(sourceChunk, module);\n          }\n\n          for (const targetChunk of targetChunks) {\n            GraphHelpers.connectChunkAndModule(targetChunk, module);\n          }\n        }\n\n        if (changed) return true;\n      };\n\n      compilation.hooks.optimizeChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n      compilation.hooks.optimizeExtractedChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = EnsureChunkConditionsPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/optimize/EnsureChunkConditionsPlugin.js"],"names":["GraphHelpers","require","EnsureChunkConditionsPlugin","apply","compiler","hooks","compilation","tap","handler","chunks","changed","module","modules","chunkCondition","sourceChunks","Set","chunkGroups","chunk","chunksIterable","add","group","groupsIterable","size","targetChunks","chunkGroupLoop","chunkGroup","isInitial","Error","identifier","parentsIterable","sourceChunk","disconnectChunkAndModule","targetChunk","connectChunkAndModule","optimizeChunksBasic","optimizeExtractedChunksBasic","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AAEA,MAAMC,2BAAN,CAAkC;AACjCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,6BADD,EAECD,WAAW,IAAI;AACd,YAAME,OAAO,GAAGC,MAAM,IAAI;AACzB,YAAIC,OAAO,GAAG,KAAd;;AACA,aAAK,MAAMC,MAAX,IAAqBL,WAAW,CAACM,OAAjC,EAA0C;AACzC,cAAI,CAACD,MAAM,CAACE,cAAZ,EAA4B;AAC5B,gBAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACA,gBAAMC,WAAW,GAAG,IAAID,GAAJ,EAApB;;AACA,eAAK,MAAME,KAAX,IAAoBN,MAAM,CAACO,cAA3B,EAA2C;AAC1C,gBAAI,CAACP,MAAM,CAACE,cAAP,CAAsBI,KAAtB,CAAL,EAAmC;AAClCH,cAAAA,YAAY,CAACK,GAAb,CAAiBF,KAAjB;;AACA,mBAAK,MAAMG,KAAX,IAAoBH,KAAK,CAACI,cAA1B,EAA0C;AACzCL,gBAAAA,WAAW,CAACG,GAAZ,CAAgBC,KAAhB;AACA;AACD;AACD;;AACD,cAAIN,YAAY,CAACQ,IAAb,KAAsB,CAA1B,EAA6B;AAC7B,gBAAMC,YAAY,GAAG,IAAIR,GAAJ,EAArB;;AACAS,UAAAA,cAAc,EAAE,KAAK,MAAMC,UAAX,IAAyBT,WAAzB,EAAsC;AACrD;AACA,iBAAK,MAAMC,KAAX,IAAoBQ,UAAU,CAAChB,MAA/B,EAAuC;AACtC,kBAAIE,MAAM,CAACE,cAAP,CAAsBI,KAAtB,CAAJ,EAAkC;AACjCM,gBAAAA,YAAY,CAACJ,GAAb,CAAiBF,KAAjB;AACA,yBAASO,cAAT;AACA;AACD,aAPoD,CAQrD;;;AACA,gBAAIC,UAAU,CAACC,SAAX,EAAJ,EAA4B;AAC3B,oBAAM,IAAIC,KAAJ,CACL,uCAAuChB,MAAM,CAACiB,UAAP,EADlC,CAAN;AAGA,aAboD,CAcrD;;;AACA,iBAAK,MAAMR,KAAX,IAAoBK,UAAU,CAACI,eAA/B,EAAgD;AAC/Cb,cAAAA,WAAW,CAACG,GAAZ,CAAgBC,KAAhB;AACA;AACD;;AACD,eAAK,MAAMU,WAAX,IAA0BhB,YAA1B,EAAwC;AACvCd,YAAAA,YAAY,CAAC+B,wBAAb,CAAsCD,WAAtC,EAAmDnB,MAAnD;AACA;;AACD,eAAK,MAAMqB,WAAX,IAA0BT,YAA1B,EAAwC;AACvCvB,YAAAA,YAAY,CAACiC,qBAAb,CAAmCD,WAAnC,EAAgDrB,MAAhD;AACA;AACD;;AACD,YAAID,OAAJ,EAAa,OAAO,IAAP;AACb,OA3CD;;AA4CAJ,MAAAA,WAAW,CAACD,KAAZ,CAAkB6B,mBAAlB,CAAsC3B,GAAtC,CACC,6BADD,EAECC,OAFD;AAIAF,MAAAA,WAAW,CAACD,KAAZ,CAAkB8B,4BAAlB,CAA+C5B,GAA/C,CACC,6BADD,EAECC,OAFD;AAIA,KAvDF;AAyDA;;AA3DgC;;AA6DlCG,MAAM,CAACyB,OAAP,GAAiBlC,2BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst GraphHelpers = require(\"../GraphHelpers\");\n\nclass EnsureChunkConditionsPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"EnsureChunkConditionsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst handler = chunks => {\n\t\t\t\t\tlet changed = false;\n\t\t\t\t\tfor (const module of compilation.modules) {\n\t\t\t\t\t\tif (!module.chunkCondition) continue;\n\t\t\t\t\t\tconst sourceChunks = new Set();\n\t\t\t\t\t\tconst chunkGroups = new Set();\n\t\t\t\t\t\tfor (const chunk of module.chunksIterable) {\n\t\t\t\t\t\t\tif (!module.chunkCondition(chunk)) {\n\t\t\t\t\t\t\t\tsourceChunks.add(chunk);\n\t\t\t\t\t\t\t\tfor (const group of chunk.groupsIterable) {\n\t\t\t\t\t\t\t\t\tchunkGroups.add(group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sourceChunks.size === 0) continue;\n\t\t\t\t\t\tconst targetChunks = new Set();\n\t\t\t\t\t\tchunkGroupLoop: for (const chunkGroup of chunkGroups) {\n\t\t\t\t\t\t\t// Can module be placed in a chunk of this group?\n\t\t\t\t\t\t\tfor (const chunk of chunkGroup.chunks) {\n\t\t\t\t\t\t\t\tif (module.chunkCondition(chunk)) {\n\t\t\t\t\t\t\t\t\ttargetChunks.add(chunk);\n\t\t\t\t\t\t\t\t\tcontinue chunkGroupLoop;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// We reached the entrypoint: fail\n\t\t\t\t\t\t\tif (chunkGroup.isInitial()) {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\"Cannot fullfil chunk condition of \" + module.identifier()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Try placing in all parents\n\t\t\t\t\t\t\tfor (const group of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\t\tchunkGroups.add(group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const sourceChunk of sourceChunks) {\n\t\t\t\t\t\t\tGraphHelpers.disconnectChunkAndModule(sourceChunk, module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const targetChunk of targetChunks) {\n\t\t\t\t\t\t\tGraphHelpers.connectChunkAndModule(targetChunk, module);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (changed) return true;\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.optimizeChunksBasic.tap(\n\t\t\t\t\t\"EnsureChunkConditionsPlugin\",\n\t\t\t\t\thandler\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.optimizeExtractedChunksBasic.tap(\n\t\t\t\t\t\"EnsureChunkConditionsPlugin\",\n\t\t\t\t\thandler\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = EnsureChunkConditionsPlugin;\n"]},"metadata":{},"sourceType":"script"}