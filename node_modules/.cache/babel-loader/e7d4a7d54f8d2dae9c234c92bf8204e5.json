{"ast":null,"code":"import { FSM, makeTransition } from \"@webassemblyjs/helper-fsm\";\nimport { codeFrameFromSource } from \"@webassemblyjs/helper-code-frame\"; // eslint-disable-next-line\n\nfunction getCodeFrame(source, line, column) {\n  var loc = {\n    start: {\n      line: line,\n      column: column\n    }\n  };\n  return \"\\n\" + codeFrameFromSource(source, loc) + \"\\n\";\n}\n\nvar WHITESPACE = /\\s/;\nvar PARENS = /\\(|\\)/;\nvar LETTERS = /[a-z0-9_/]/i;\nvar idchar = /[a-z0-9!#$%&*+./:<=>?@\\\\[\\]^_`|~-]/i;\nvar valtypes = [\"i32\", \"i64\", \"f32\", \"f64\"];\nvar NUMBERS = /[0-9|.|_]/;\nvar NUMBER_KEYWORDS = /nan|inf/;\n\nfunction isNewLine(char) {\n  return char.charCodeAt(0) === 10 || char.charCodeAt(0) === 13;\n}\n\nfunction Token(type, value, start, end) {\n  var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var token = {\n    type: type,\n    value: value,\n    loc: {\n      start: start,\n      end: end\n    }\n  };\n\n  if (Object.keys(opts).length > 0) {\n    // $FlowIgnore\n    token[\"opts\"] = opts;\n  }\n\n  return token;\n}\n\nvar tokenTypes = {\n  openParen: \"openParen\",\n  closeParen: \"closeParen\",\n  number: \"number\",\n  string: \"string\",\n  name: \"name\",\n  identifier: \"identifier\",\n  valtype: \"valtype\",\n  dot: \"dot\",\n  comment: \"comment\",\n  equal: \"equal\",\n  keyword: \"keyword\"\n};\nexport var keywords = {\n  module: \"module\",\n  func: \"func\",\n  param: \"param\",\n  result: \"result\",\n  export: \"export\",\n  loop: \"loop\",\n  block: \"block\",\n  if: \"if\",\n  then: \"then\",\n  else: \"else\",\n  call: \"call\",\n  call_indirect: \"call_indirect\",\n  import: \"import\",\n  memory: \"memory\",\n  table: \"table\",\n  global: \"global\",\n  anyfunc: \"anyfunc\",\n  mut: \"mut\",\n  data: \"data\",\n  type: \"type\",\n  elem: \"elem\",\n  start: \"start\",\n  offset: \"offset\"\n};\nvar NUMERIC_SEPARATOR = \"_\";\n/**\n * Build the FSM for number literals\n */\n\nvar numberLiteralFSM = new FSM({\n  START: [makeTransition(/-|\\+/, \"AFTER_SIGN\"), makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  AFTER_SIGN: [makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  DEC_FRAC: [makeTransition(/[0-9]/, \"DEC_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC: [makeTransition(/[0-9]/, \"DEC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"DEC_FRAC\"), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC_SIGNED_EXP: [makeTransition(/\\+|-/, \"DEC_EXP\"), makeTransition(/[0-9]/, \"DEC_EXP\")],\n  DEC_EXP: [makeTransition(/[0-9]/, \"DEC_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  HEX: [makeTransition(/[0-9|A-F|a-f]/, \"HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"HEX_FRAC\"), makeTransition(/p|P/, \"HEX_SIGNED_EXP\")],\n  HEX_FRAC: [makeTransition(/[0-9|A-F|a-f]/, \"HEX_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/p|P|/, \"HEX_SIGNED_EXP\")],\n  HEX_SIGNED_EXP: [makeTransition(/[0-9|+|-]/, \"HEX_EXP\")],\n  HEX_EXP: [makeTransition(/[0-9]/, \"HEX_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  NAN_HEX: [makeTransition(/[0-9|A-F|a-f]/, \"NAN_HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  STOP: []\n}, \"START\", \"STOP\");\nexport function tokenize(input) {\n  var current = 0;\n  var char = input[current]; // Used by SourceLocation\n\n  var column = 1;\n  var line = 1;\n  var tokens = [];\n  /**\n   * Creates a pushToken function for a given type\n   */\n\n  function pushToken(type) {\n    return function (v) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var startColumn = opts.startColumn || column - String(v).length;\n      delete opts.startColumn;\n      var endColumn = opts.endColumn || startColumn + String(v).length - 1;\n      delete opts.endColumn;\n      var start = {\n        line: line,\n        column: startColumn\n      };\n      var end = {\n        line: line,\n        column: endColumn\n      };\n      tokens.push(Token(type, v, start, end, opts));\n    };\n  }\n  /**\n   * Functions to save newly encountered tokens\n   */\n\n\n  var pushCloseParenToken = pushToken(tokenTypes.closeParen);\n  var pushOpenParenToken = pushToken(tokenTypes.openParen);\n  var pushNumberToken = pushToken(tokenTypes.number);\n  var pushValtypeToken = pushToken(tokenTypes.valtype);\n  var pushNameToken = pushToken(tokenTypes.name);\n  var pushIdentifierToken = pushToken(tokenTypes.identifier);\n  var pushKeywordToken = pushToken(tokenTypes.keyword);\n  var pushDotToken = pushToken(tokenTypes.dot);\n  var pushStringToken = pushToken(tokenTypes.string);\n  var pushCommentToken = pushToken(tokenTypes.comment);\n  var pushEqualToken = pushToken(tokenTypes.equal);\n  /**\n   * Can be used to look at the next character(s).\n   *\n   * The default behavior `lookahead()` simply returns the next character without consuming it.\n   * Letters are always returned in lowercase.\n   *\n   * @param {number} length How many characters to query. Default = 1\n   * @param {number} offset How many characters to skip forward from current one. Default = 1\n   *\n   */\n\n  function lookahead() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return input.substring(current + offset, current + offset + length).toLowerCase();\n  }\n  /**\n   * Advances the cursor in the input by a certain amount\n   *\n   * @param {number} amount How many characters to consume. Default = 1\n   */\n\n\n  function eatCharacter() {\n    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    column += amount;\n    current += amount;\n    char = input[current];\n  }\n\n  while (current < input.length) {\n    // ;;\n    if (char === \";\" && lookahead() === \";\") {\n      var startColumn = column;\n      eatCharacter(2);\n      var text = \"\";\n\n      while (!isNewLine(char)) {\n        text += char;\n        eatCharacter();\n\n        if (char === undefined) {\n          break;\n        }\n      }\n\n      var endColumn = column;\n      pushCommentToken(text, {\n        type: \"leading\",\n        startColumn: startColumn,\n        endColumn: endColumn\n      });\n      continue;\n    } // (;\n\n\n    if (char === \"(\" && lookahead() === \";\") {\n      var _startColumn = column;\n      eatCharacter(2);\n      var _text = \"\"; // ;)\n\n      while (true) {\n        char = input[current];\n\n        if (char === \";\" && lookahead() === \")\") {\n          eatCharacter(2);\n          break;\n        }\n\n        _text += char;\n        eatCharacter();\n\n        if (isNewLine(char)) {\n          line++;\n          column = 0;\n        }\n      }\n\n      var _endColumn = column;\n      pushCommentToken(_text, {\n        type: \"block\",\n        startColumn: _startColumn,\n        endColumn: _endColumn\n      });\n      continue;\n    }\n\n    if (char === \"(\") {\n      pushOpenParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"=\") {\n      pushEqualToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \")\") {\n      pushCloseParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (isNewLine(char)) {\n      line++;\n      eatCharacter();\n      column = 0;\n      continue;\n    }\n\n    if (WHITESPACE.test(char)) {\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"$\") {\n      var _startColumn2 = column;\n      eatCharacter();\n      var value = \"\";\n\n      while (idchar.test(char)) {\n        value += char;\n        eatCharacter();\n      }\n\n      var _endColumn2 = column;\n      pushIdentifierToken(value, {\n        startColumn: _startColumn2,\n        endColumn: _endColumn2\n      });\n      continue;\n    }\n\n    if (NUMBERS.test(char) || NUMBER_KEYWORDS.test(lookahead(3, 0)) || char === \"-\" || char === \"+\") {\n      var _startColumn3 = column;\n\n      var _value = numberLiteralFSM.run(input.slice(current));\n\n      if (_value === \"\") {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      pushNumberToken(_value, {\n        startColumn: _startColumn3\n      });\n      eatCharacter(_value.length);\n\n      if (char && !PARENS.test(char) && !WHITESPACE.test(char)) {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      continue;\n    }\n\n    if (char === '\"') {\n      var _startColumn4 = column;\n      var _value2 = \"\";\n      eatCharacter(); // \"\n\n      while (char !== '\"') {\n        if (isNewLine(char)) {\n          throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n        }\n\n        _value2 += char;\n        eatCharacter(); // char\n      }\n\n      eatCharacter(); // \"\n\n      var _endColumn3 = column;\n      pushStringToken(_value2, {\n        startColumn: _startColumn4,\n        endColumn: _endColumn3\n      });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var _value3 = \"\";\n      var _startColumn5 = column;\n\n      while (char && LETTERS.test(char)) {\n        _value3 += char;\n        eatCharacter();\n      }\n      /*\n       * Handle MemberAccess\n       */\n\n\n      if (char === \".\") {\n        var dotStartColumn = column;\n\n        if (valtypes.indexOf(_value3) !== -1) {\n          pushValtypeToken(_value3, {\n            startColumn: _startColumn5\n          });\n        } else {\n          pushNameToken(_value3);\n        }\n\n        eatCharacter();\n        _value3 = \"\";\n        var nameStartColumn = column;\n\n        while (LETTERS.test(char)) {\n          _value3 += char;\n          eatCharacter();\n        }\n\n        pushDotToken(\".\", {\n          startColumn: dotStartColumn\n        });\n        pushNameToken(_value3, {\n          startColumn: nameStartColumn\n        });\n        continue;\n      }\n      /*\n       * Handle keywords\n       */\n      // $FlowIgnore\n\n\n      if (typeof keywords[_value3] === \"string\") {\n        pushKeywordToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle types\n       */\n\n\n      if (valtypes.indexOf(_value3) !== -1) {\n        pushValtypeToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle literals\n       */\n\n\n      pushNameToken(_value3, {\n        startColumn: _startColumn5\n      });\n      continue;\n    }\n\n    throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n  }\n\n  return tokens;\n}\nexport var tokens = tokenTypes;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/@webassemblyjs/wast-parser/esm/tokenizer.js"],"names":["FSM","makeTransition","codeFrameFromSource","getCodeFrame","source","line","column","loc","start","WHITESPACE","PARENS","LETTERS","idchar","valtypes","NUMBERS","NUMBER_KEYWORDS","isNewLine","char","charCodeAt","Token","type","value","end","opts","arguments","length","undefined","token","Object","keys","tokenTypes","openParen","closeParen","number","string","name","identifier","valtype","dot","comment","equal","keyword","keywords","module","func","param","result","export","loop","block","if","then","else","call","call_indirect","import","memory","table","global","anyfunc","mut","data","elem","offset","NUMERIC_SEPARATOR","numberLiteralFSM","START","n","AFTER_SIGN","DEC_FRAC","allowedSeparator","DEC","DEC_SIGNED_EXP","DEC_EXP","HEX","HEX_FRAC","HEX_SIGNED_EXP","HEX_EXP","NAN_HEX","STOP","tokenize","input","current","tokens","pushToken","v","startColumn","String","endColumn","push","pushCloseParenToken","pushOpenParenToken","pushNumberToken","pushValtypeToken","pushNameToken","pushIdentifierToken","pushKeywordToken","pushDotToken","pushStringToken","pushCommentToken","pushEqualToken","lookahead","substring","toLowerCase","eatCharacter","amount","text","_startColumn","_text","_endColumn","test","_startColumn2","_endColumn2","_startColumn3","_value","run","slice","Error","JSON","stringify","_startColumn4","_value2","_endColumn3","_value3","_startColumn5","dotStartColumn","indexOf","nameStartColumn"],"mappings":"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","sourcesContent":["import { FSM, makeTransition } from \"@webassemblyjs/helper-fsm\";\nimport { codeFrameFromSource } from \"@webassemblyjs/helper-code-frame\";\n\n// eslint-disable-next-line\nfunction getCodeFrame(source, line, column) {\n  var loc = {\n    start: {\n      line: line,\n      column: column\n    }\n  };\n  return \"\\n\" + codeFrameFromSource(source, loc) + \"\\n\";\n}\n\nvar WHITESPACE = /\\s/;\nvar PARENS = /\\(|\\)/;\nvar LETTERS = /[a-z0-9_/]/i;\nvar idchar = /[a-z0-9!#$%&*+./:<=>?@\\\\[\\]^_`|~-]/i;\nvar valtypes = [\"i32\", \"i64\", \"f32\", \"f64\"];\nvar NUMBERS = /[0-9|.|_]/;\nvar NUMBER_KEYWORDS = /nan|inf/;\n\nfunction isNewLine(char) {\n  return char.charCodeAt(0) === 10 || char.charCodeAt(0) === 13;\n}\n\nfunction Token(type, value, start, end) {\n  var opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var token = {\n    type: type,\n    value: value,\n    loc: {\n      start: start,\n      end: end\n    }\n  };\n\n  if (Object.keys(opts).length > 0) {\n    // $FlowIgnore\n    token[\"opts\"] = opts;\n  }\n\n  return token;\n}\n\nvar tokenTypes = {\n  openParen: \"openParen\",\n  closeParen: \"closeParen\",\n  number: \"number\",\n  string: \"string\",\n  name: \"name\",\n  identifier: \"identifier\",\n  valtype: \"valtype\",\n  dot: \"dot\",\n  comment: \"comment\",\n  equal: \"equal\",\n  keyword: \"keyword\"\n};\nexport var keywords = {\n  module: \"module\",\n  func: \"func\",\n  param: \"param\",\n  result: \"result\",\n  export: \"export\",\n  loop: \"loop\",\n  block: \"block\",\n  if: \"if\",\n  then: \"then\",\n  else: \"else\",\n  call: \"call\",\n  call_indirect: \"call_indirect\",\n  import: \"import\",\n  memory: \"memory\",\n  table: \"table\",\n  global: \"global\",\n  anyfunc: \"anyfunc\",\n  mut: \"mut\",\n  data: \"data\",\n  type: \"type\",\n  elem: \"elem\",\n  start: \"start\",\n  offset: \"offset\"\n};\nvar NUMERIC_SEPARATOR = \"_\";\n/**\n * Build the FSM for number literals\n */\n\nvar numberLiteralFSM = new FSM({\n  START: [makeTransition(/-|\\+/, \"AFTER_SIGN\"), makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  AFTER_SIGN: [makeTransition(/nan:0x/, \"NAN_HEX\", {\n    n: 6\n  }), makeTransition(/nan|inf/, \"STOP\", {\n    n: 3\n  }), makeTransition(/0x/, \"HEX\", {\n    n: 2\n  }), makeTransition(/[0-9]/, \"DEC\"), makeTransition(/\\./, \"DEC_FRAC\")],\n  DEC_FRAC: [makeTransition(/[0-9]/, \"DEC_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC: [makeTransition(/[0-9]/, \"DEC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"DEC_FRAC\"), makeTransition(/e|E/, \"DEC_SIGNED_EXP\")],\n  DEC_SIGNED_EXP: [makeTransition(/\\+|-/, \"DEC_EXP\"), makeTransition(/[0-9]/, \"DEC_EXP\")],\n  DEC_EXP: [makeTransition(/[0-9]/, \"DEC_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  HEX: [makeTransition(/[0-9|A-F|a-f]/, \"HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/\\./, \"HEX_FRAC\"), makeTransition(/p|P/, \"HEX_SIGNED_EXP\")],\n  HEX_FRAC: [makeTransition(/[0-9|A-F|a-f]/, \"HEX_FRAC\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  }), makeTransition(/p|P|/, \"HEX_SIGNED_EXP\")],\n  HEX_SIGNED_EXP: [makeTransition(/[0-9|+|-]/, \"HEX_EXP\")],\n  HEX_EXP: [makeTransition(/[0-9]/, \"HEX_EXP\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  NAN_HEX: [makeTransition(/[0-9|A-F|a-f]/, \"NAN_HEX\", {\n    allowedSeparator: NUMERIC_SEPARATOR\n  })],\n  STOP: []\n}, \"START\", \"STOP\");\nexport function tokenize(input) {\n  var current = 0;\n  var char = input[current]; // Used by SourceLocation\n\n  var column = 1;\n  var line = 1;\n  var tokens = [];\n  /**\n   * Creates a pushToken function for a given type\n   */\n\n  function pushToken(type) {\n    return function (v) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var startColumn = opts.startColumn || column - String(v).length;\n      delete opts.startColumn;\n      var endColumn = opts.endColumn || startColumn + String(v).length - 1;\n      delete opts.endColumn;\n      var start = {\n        line: line,\n        column: startColumn\n      };\n      var end = {\n        line: line,\n        column: endColumn\n      };\n      tokens.push(Token(type, v, start, end, opts));\n    };\n  }\n  /**\n   * Functions to save newly encountered tokens\n   */\n\n\n  var pushCloseParenToken = pushToken(tokenTypes.closeParen);\n  var pushOpenParenToken = pushToken(tokenTypes.openParen);\n  var pushNumberToken = pushToken(tokenTypes.number);\n  var pushValtypeToken = pushToken(tokenTypes.valtype);\n  var pushNameToken = pushToken(tokenTypes.name);\n  var pushIdentifierToken = pushToken(tokenTypes.identifier);\n  var pushKeywordToken = pushToken(tokenTypes.keyword);\n  var pushDotToken = pushToken(tokenTypes.dot);\n  var pushStringToken = pushToken(tokenTypes.string);\n  var pushCommentToken = pushToken(tokenTypes.comment);\n  var pushEqualToken = pushToken(tokenTypes.equal);\n  /**\n   * Can be used to look at the next character(s).\n   *\n   * The default behavior `lookahead()` simply returns the next character without consuming it.\n   * Letters are always returned in lowercase.\n   *\n   * @param {number} length How many characters to query. Default = 1\n   * @param {number} offset How many characters to skip forward from current one. Default = 1\n   *\n   */\n\n  function lookahead() {\n    var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return input.substring(current + offset, current + offset + length).toLowerCase();\n  }\n  /**\n   * Advances the cursor in the input by a certain amount\n   *\n   * @param {number} amount How many characters to consume. Default = 1\n   */\n\n\n  function eatCharacter() {\n    var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    column += amount;\n    current += amount;\n    char = input[current];\n  }\n\n  while (current < input.length) {\n    // ;;\n    if (char === \";\" && lookahead() === \";\") {\n      var startColumn = column;\n      eatCharacter(2);\n      var text = \"\";\n\n      while (!isNewLine(char)) {\n        text += char;\n        eatCharacter();\n\n        if (char === undefined) {\n          break;\n        }\n      }\n\n      var endColumn = column;\n      pushCommentToken(text, {\n        type: \"leading\",\n        startColumn: startColumn,\n        endColumn: endColumn\n      });\n      continue;\n    } // (;\n\n\n    if (char === \"(\" && lookahead() === \";\") {\n      var _startColumn = column;\n      eatCharacter(2);\n      var _text = \"\"; // ;)\n\n      while (true) {\n        char = input[current];\n\n        if (char === \";\" && lookahead() === \")\") {\n          eatCharacter(2);\n          break;\n        }\n\n        _text += char;\n        eatCharacter();\n\n        if (isNewLine(char)) {\n          line++;\n          column = 0;\n        }\n      }\n\n      var _endColumn = column;\n      pushCommentToken(_text, {\n        type: \"block\",\n        startColumn: _startColumn,\n        endColumn: _endColumn\n      });\n      continue;\n    }\n\n    if (char === \"(\") {\n      pushOpenParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"=\") {\n      pushEqualToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \")\") {\n      pushCloseParenToken(char);\n      eatCharacter();\n      continue;\n    }\n\n    if (isNewLine(char)) {\n      line++;\n      eatCharacter();\n      column = 0;\n      continue;\n    }\n\n    if (WHITESPACE.test(char)) {\n      eatCharacter();\n      continue;\n    }\n\n    if (char === \"$\") {\n      var _startColumn2 = column;\n      eatCharacter();\n      var value = \"\";\n\n      while (idchar.test(char)) {\n        value += char;\n        eatCharacter();\n      }\n\n      var _endColumn2 = column;\n      pushIdentifierToken(value, {\n        startColumn: _startColumn2,\n        endColumn: _endColumn2\n      });\n      continue;\n    }\n\n    if (NUMBERS.test(char) || NUMBER_KEYWORDS.test(lookahead(3, 0)) || char === \"-\" || char === \"+\") {\n      var _startColumn3 = column;\n\n      var _value = numberLiteralFSM.run(input.slice(current));\n\n      if (_value === \"\") {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      pushNumberToken(_value, {\n        startColumn: _startColumn3\n      });\n      eatCharacter(_value.length);\n\n      if (char && !PARENS.test(char) && !WHITESPACE.test(char)) {\n        throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n      }\n\n      continue;\n    }\n\n    if (char === '\"') {\n      var _startColumn4 = column;\n      var _value2 = \"\";\n      eatCharacter(); // \"\n\n      while (char !== '\"') {\n        if (isNewLine(char)) {\n          throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n        }\n\n        _value2 += char;\n        eatCharacter(); // char\n      }\n\n      eatCharacter(); // \"\n\n      var _endColumn3 = column;\n      pushStringToken(_value2, {\n        startColumn: _startColumn4,\n        endColumn: _endColumn3\n      });\n      continue;\n    }\n\n    if (LETTERS.test(char)) {\n      var _value3 = \"\";\n      var _startColumn5 = column;\n\n      while (char && LETTERS.test(char)) {\n        _value3 += char;\n        eatCharacter();\n      }\n      /*\n       * Handle MemberAccess\n       */\n\n\n      if (char === \".\") {\n        var dotStartColumn = column;\n\n        if (valtypes.indexOf(_value3) !== -1) {\n          pushValtypeToken(_value3, {\n            startColumn: _startColumn5\n          });\n        } else {\n          pushNameToken(_value3);\n        }\n\n        eatCharacter();\n        _value3 = \"\";\n        var nameStartColumn = column;\n\n        while (LETTERS.test(char)) {\n          _value3 += char;\n          eatCharacter();\n        }\n\n        pushDotToken(\".\", {\n          startColumn: dotStartColumn\n        });\n        pushNameToken(_value3, {\n          startColumn: nameStartColumn\n        });\n        continue;\n      }\n      /*\n       * Handle keywords\n       */\n      // $FlowIgnore\n\n\n      if (typeof keywords[_value3] === \"string\") {\n        pushKeywordToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle types\n       */\n\n\n      if (valtypes.indexOf(_value3) !== -1) {\n        pushValtypeToken(_value3, {\n          startColumn: _startColumn5\n        });\n        continue;\n      }\n      /*\n       * Handle literals\n       */\n\n\n      pushNameToken(_value3, {\n        startColumn: _startColumn5\n      });\n      continue;\n    }\n\n    throw new Error(getCodeFrame(input, line, column) + \"Unexpected character \" + JSON.stringify(char));\n  }\n\n  return tokens;\n}\nexport var tokens = tokenTypes;"]},"metadata":{},"sourceType":"module"}