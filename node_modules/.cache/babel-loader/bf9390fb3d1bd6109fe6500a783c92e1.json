{"ast":null,"code":"'use strict';\n\nconst childProcess = require('child_process'),\n      childModule = require.resolve('./child/index');\n\nfunction fork(forkModule, workerOptions) {\n  // suppress --debug / --inspect flags while preserving others (like --harmony)\n  let filteredArgs = process.execArgv.filter(function (v) {\n    return !/^--(debug|inspect)/.test(v);\n  }),\n      options = Object.assign({\n    execArgv: filteredArgs,\n    env: process.env,\n    cwd: process.cwd()\n  }, workerOptions),\n      child = childProcess.fork(childModule, process.argv, options);\n  child.on('error', function () {// this *should* be picked up by onExit and the operation requeued\n  });\n  child.send({\n    owner: 'farm',\n    module: forkModule\n  }); // return a send() function for this child\n\n  return {\n    send: child.send.bind(child),\n    child: child\n  };\n}\n\nmodule.exports = fork;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/worker-farm/lib/fork.js"],"names":["childProcess","require","childModule","resolve","fork","forkModule","workerOptions","filteredArgs","process","execArgv","filter","v","test","options","Object","assign","env","cwd","child","argv","on","send","owner","module","bind","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;AAAA,MACMC,WAAW,GAAID,OAAO,CAACE,OAAR,CAAgB,eAAhB,CADrB;;AAIA,SAASC,IAAT,CAAeC,UAAf,EAA2BC,aAA3B,EAA0C;AACxC;AACA,MAAIC,YAAY,GAAGC,OAAO,CAACC,QAAR,CAAiBC,MAAjB,CAAwB,UAAUC,CAAV,EAAa;AAClD,WAAO,CAAE,oBAAD,CAAuBC,IAAvB,CAA4BD,CAA5B,CAAR;AACD,GAFc,CAAnB;AAAA,MAGIE,OAAO,GAASC,MAAM,CAACC,MAAP,CAAc;AAC1BN,IAAAA,QAAQ,EAAGF,YADe;AAE1BS,IAAAA,GAAG,EAAQR,OAAO,CAACQ,GAFO;AAG1BC,IAAAA,GAAG,EAAQT,OAAO,CAACS,GAAR;AAHe,GAAd,EAIbX,aAJa,CAHpB;AAAA,MAQIY,KAAK,GAAWlB,YAAY,CAACI,IAAb,CAAkBF,WAAlB,EAA+BM,OAAO,CAACW,IAAvC,EAA6CN,OAA7C,CARpB;AAUAK,EAAAA,KAAK,CAACE,EAAN,CAAS,OAAT,EAAkB,YAAW,CAC3B;AACD,GAFD;AAIAF,EAAAA,KAAK,CAACG,IAAN,CAAW;AAAEC,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,MAAM,EAAElB;AAAzB,GAAX,EAhBwC,CAkBxC;;AACA,SAAO;AACHgB,IAAAA,IAAI,EAAIH,KAAK,CAACG,IAAN,CAAWG,IAAX,CAAgBN,KAAhB,CADL;AAEHA,IAAAA,KAAK,EAAGA;AAFL,GAAP;AAID;;AAGDK,MAAM,CAACE,OAAP,GAAiBrB,IAAjB","sourcesContent":["'use strict'\n\nconst childProcess = require('child_process')\n    , childModule  = require.resolve('./child/index')\n\n\nfunction fork (forkModule, workerOptions) {\n  // suppress --debug / --inspect flags while preserving others (like --harmony)\n  let filteredArgs = process.execArgv.filter(function (v) {\n        return !(/^--(debug|inspect)/).test(v)\n      })\n    , options       = Object.assign({\n          execArgv : filteredArgs\n        , env      : process.env\n        , cwd      : process.cwd()\n      }, workerOptions)\n    , child         = childProcess.fork(childModule, process.argv, options)\n\n  child.on('error', function() {\n    // this *should* be picked up by onExit and the operation requeued\n  })\n\n  child.send({ owner: 'farm', module: forkModule })\n\n  // return a send() function for this child\n  return {\n      send  : child.send.bind(child)\n    , child : child\n  }\n}\n\n\nmodule.exports = fork\n"]},"metadata":{},"sourceType":"script"}