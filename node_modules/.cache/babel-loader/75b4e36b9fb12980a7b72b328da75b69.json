{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\n\nconst ModuleHotAcceptDependency = require(\"../dependencies/ModuleHotAcceptDependency\");\n\nconst ModuleHotDeclineDependency = require(\"../dependencies/ModuleHotDeclineDependency\");\n\nconst ConcatenatedModule = require(\"./ConcatenatedModule\");\n\nconst HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\n\nconst StackedSetMap = require(\"../util/StackedSetMap\");\n\nconst formatBailoutReason = msg => {\n  return \"ModuleConcatenation bailout: \" + msg;\n};\n\nclass ModuleConcatenationPlugin {\n  constructor(options) {\n    if (typeof options !== \"object\") options = {};\n    this.options = options;\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ModuleConcatenationPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const handler = (parser, parserOptions) => {\n        parser.hooks.call.for(\"eval\").tap(\"ModuleConcatenationPlugin\", () => {\n          // Because of variable renaming we can't use modules with eval.\n          parser.state.module.buildMeta.moduleConcatenationBailout = \"eval()\";\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ModuleConcatenationPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ModuleConcatenationPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ModuleConcatenationPlugin\", handler);\n      const bailoutReasonMap = new Map();\n\n      const setBailoutReason = (module, reason) => {\n        bailoutReasonMap.set(module, reason);\n        module.optimizationBailout.push(typeof reason === \"function\" ? rs => formatBailoutReason(reason(rs)) : formatBailoutReason(reason));\n      };\n\n      const getBailoutReason = (module, requestShortener) => {\n        const reason = bailoutReasonMap.get(module);\n        if (typeof reason === \"function\") return reason(requestShortener);\n        return reason;\n      };\n\n      compilation.hooks.optimizeChunkModules.tap(\"ModuleConcatenationPlugin\", (allChunks, modules) => {\n        const relevantModules = [];\n        const possibleInners = new Set();\n\n        for (const module of modules) {\n          // Only harmony modules are valid for optimization\n          if (!module.buildMeta || module.buildMeta.exportsType !== \"namespace\" || !module.dependencies.some(d => d instanceof HarmonyCompatibilityDependency)) {\n            setBailoutReason(module, \"Module is not an ECMAScript module\");\n            continue;\n          } // Some expressions are not compatible with module concatenation\n          // because they may produce unexpected results. The plugin bails out\n          // if some were detected upfront.\n\n\n          if (module.buildMeta && module.buildMeta.moduleConcatenationBailout) {\n            setBailoutReason(module, `Module uses ${module.buildMeta.moduleConcatenationBailout}`);\n            continue;\n          } // Exports must be known (and not dynamic)\n\n\n          if (!Array.isArray(module.buildMeta.providedExports)) {\n            setBailoutReason(module, \"Module exports are unknown\");\n            continue;\n          } // Using dependency variables is not possible as this wraps the code in a function\n\n\n          if (module.variables.length > 0) {\n            setBailoutReason(module, `Module uses injected variables (${module.variables.map(v => v.name).join(\", \")})`);\n            continue;\n          } // Hot Module Replacement need it's own module to work correctly\n\n\n          if (module.dependencies.some(dep => dep instanceof ModuleHotAcceptDependency || dep instanceof ModuleHotDeclineDependency)) {\n            setBailoutReason(module, \"Module uses Hot Module Replacement\");\n            continue;\n          }\n\n          relevantModules.push(module); // Module must not be the entry points\n\n          if (module.isEntryModule()) {\n            setBailoutReason(module, \"Module is an entry point\");\n            continue;\n          } // Module must be in any chunk (we don't want to do useless work)\n\n\n          if (module.getNumberOfChunks() === 0) {\n            setBailoutReason(module, \"Module is not in any chunk\");\n            continue;\n          } // Module must only be used by Harmony Imports\n\n\n          const nonHarmonyReasons = module.reasons.filter(reason => !reason.dependency || !(reason.dependency instanceof HarmonyImportDependency));\n\n          if (nonHarmonyReasons.length > 0) {\n            const importingModules = new Set(nonHarmonyReasons.map(r => r.module).filter(Boolean));\n            const importingExplanations = new Set(nonHarmonyReasons.map(r => r.explanation).filter(Boolean));\n            const importingModuleTypes = new Map(Array.from(importingModules).map(m =>\n            /** @type {[string, Set]} */\n            [m, new Set(nonHarmonyReasons.filter(r => r.module === m).map(r => r.dependency.type).sort())]));\n            setBailoutReason(module, requestShortener => {\n              const names = Array.from(importingModules).map(m => `${m.readableIdentifier(requestShortener)} (referenced with ${Array.from(importingModuleTypes.get(m)).join(\", \")})`).sort();\n              const explanations = Array.from(importingExplanations).sort();\n\n              if (names.length > 0 && explanations.length === 0) {\n                return `Module is referenced from these modules with unsupported syntax: ${names.join(\", \")}`;\n              } else if (names.length === 0 && explanations.length > 0) {\n                return `Module is referenced by: ${explanations.join(\", \")}`;\n              } else if (names.length > 0 && explanations.length > 0) {\n                return `Module is referenced from these modules with unsupported syntax: ${names.join(\", \")} and by: ${explanations.join(\", \")}`;\n              } else {\n                return \"Module is referenced in a unsupported way\";\n              }\n            });\n            continue;\n          }\n\n          possibleInners.add(module);\n        } // sort by depth\n        // modules with lower depth are more likely suited as roots\n        // this improves performance, because modules already selected as inner are skipped\n\n\n        relevantModules.sort((a, b) => {\n          return a.depth - b.depth;\n        });\n        const concatConfigurations = [];\n        const usedAsInner = new Set();\n\n        for (const currentRoot of relevantModules) {\n          // when used by another configuration as inner:\n          // the other configuration is better and we can skip this one\n          if (usedAsInner.has(currentRoot)) continue; // create a configuration with the root\n\n          const currentConfiguration = new ConcatConfiguration(currentRoot); // cache failures to add modules\n\n          const failureCache = new Map(); // try to add all imports\n\n          for (const imp of this._getImports(compilation, currentRoot)) {\n            const problem = this._tryToAdd(compilation, currentConfiguration, imp, possibleInners, failureCache);\n\n            if (problem) {\n              failureCache.set(imp, problem);\n              currentConfiguration.addWarning(imp, problem);\n            }\n          }\n\n          if (!currentConfiguration.isEmpty()) {\n            concatConfigurations.push(currentConfiguration);\n\n            for (const module of currentConfiguration.getModules()) {\n              if (module !== currentConfiguration.rootModule) {\n                usedAsInner.add(module);\n              }\n            }\n          }\n        } // HACK: Sort configurations by length and start with the longest one\n        // to get the biggers groups possible. Used modules are marked with usedModules\n        // TODO: Allow to reuse existing configuration while trying to add dependencies.\n        // This would improve performance. O(n^2) -> O(n)\n\n\n        concatConfigurations.sort((a, b) => {\n          return b.modules.size - a.modules.size;\n        });\n        const usedModules = new Set();\n\n        for (const concatConfiguration of concatConfigurations) {\n          if (usedModules.has(concatConfiguration.rootModule)) continue;\n          const modules = concatConfiguration.getModules();\n          const rootModule = concatConfiguration.rootModule;\n          const newModule = new ConcatenatedModule(rootModule, Array.from(modules), ConcatenatedModule.createConcatenationList(rootModule, modules, compilation));\n\n          for (const warning of concatConfiguration.getWarningsSorted()) {\n            newModule.optimizationBailout.push(requestShortener => {\n              const reason = getBailoutReason(warning[0], requestShortener);\n              const reasonWithPrefix = reason ? ` (<- ${reason})` : \"\";\n\n              if (warning[0] === warning[1]) {\n                return formatBailoutReason(`Cannot concat with ${warning[0].readableIdentifier(requestShortener)}${reasonWithPrefix}`);\n              } else {\n                return formatBailoutReason(`Cannot concat with ${warning[0].readableIdentifier(requestShortener)} because of ${warning[1].readableIdentifier(requestShortener)}${reasonWithPrefix}`);\n              }\n            });\n          }\n\n          const chunks = concatConfiguration.rootModule.getChunks();\n\n          for (const m of modules) {\n            usedModules.add(m);\n\n            for (const chunk of chunks) {\n              chunk.removeModule(m);\n            }\n          }\n\n          for (const chunk of chunks) {\n            chunk.addModule(newModule);\n            newModule.addChunk(chunk);\n          }\n\n          for (const chunk of allChunks) {\n            if (chunk.entryModule === concatConfiguration.rootModule) {\n              chunk.entryModule = newModule;\n            }\n          }\n\n          compilation.modules.push(newModule);\n\n          for (const reason of newModule.reasons) {\n            if (reason.dependency.module === concatConfiguration.rootModule) reason.dependency.module = newModule;\n            if (reason.dependency.redirectedModule === concatConfiguration.rootModule) reason.dependency.redirectedModule = newModule;\n          } // TODO: remove when LTS node version contains fixed v8 version\n          // @see https://github.com/webpack/webpack/pull/6613\n          // Turbofan does not correctly inline for-of loops with polymorphic input arrays.\n          // Work around issue by using a standard for loop and assigning dep.module.reasons\n\n\n          for (let i = 0; i < newModule.dependencies.length; i++) {\n            let dep = newModule.dependencies[i];\n\n            if (dep.module) {\n              let reasons = dep.module.reasons;\n\n              for (let j = 0; j < reasons.length; j++) {\n                let reason = reasons[j];\n\n                if (reason.dependency === dep) {\n                  reason.module = newModule;\n                }\n              }\n            }\n          }\n        }\n\n        compilation.modules = compilation.modules.filter(m => !usedModules.has(m));\n      });\n    });\n  }\n\n  _getImports(compilation, module) {\n    return new Set(module.dependencies // Get reference info only for harmony Dependencies\n    .map(dep => {\n      if (!(dep instanceof HarmonyImportDependency)) return null;\n      if (!compilation) return dep.getReference();\n      return compilation.getDependencyReference(module, dep);\n    }) // Reference is valid and has a module\n    // Dependencies are simple enough to concat them\n    .filter(ref => ref && ref.module && (Array.isArray(ref.importedNames) || Array.isArray(ref.module.buildMeta.providedExports))) // Take the imported module\n    .map(ref => ref.module));\n  }\n\n  _tryToAdd(compilation, config, module, possibleModules, failureCache) {\n    const cacheEntry = failureCache.get(module);\n\n    if (cacheEntry) {\n      return cacheEntry;\n    } // Already added?\n\n\n    if (config.has(module)) {\n      return null;\n    } // Not possible to add?\n\n\n    if (!possibleModules.has(module)) {\n      failureCache.set(module, module); // cache failures for performance\n\n      return module;\n    } // module must be in the same chunks\n\n\n    if (!config.rootModule.hasEqualsChunks(module)) {\n      failureCache.set(module, module); // cache failures for performance\n\n      return module;\n    } // Clone config to make experimental changes\n\n\n    const testConfig = config.clone(); // Add the module\n\n    testConfig.add(module); // Every module which depends on the added module must be in the configuration too.\n\n    for (const reason of module.reasons) {\n      // Modules that are not used can be ignored\n      if (reason.module.factoryMeta.sideEffectFree && reason.module.used === false) continue;\n\n      const problem = this._tryToAdd(compilation, testConfig, reason.module, possibleModules, failureCache);\n\n      if (problem) {\n        failureCache.set(module, problem); // cache failures for performance\n\n        return problem;\n      }\n    } // Commit experimental changes\n\n\n    config.set(testConfig); // Eagerly try to add imports too if possible\n\n    for (const imp of this._getImports(compilation, module)) {\n      const problem = this._tryToAdd(compilation, config, imp, possibleModules, failureCache);\n\n      if (problem) {\n        config.addWarning(imp, problem);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nclass ConcatConfiguration {\n  constructor(rootModule, cloneFrom) {\n    this.rootModule = rootModule;\n\n    if (cloneFrom) {\n      this.modules = cloneFrom.modules.createChild(5);\n      this.warnings = cloneFrom.warnings.createChild(5);\n    } else {\n      this.modules = new StackedSetMap();\n      this.modules.add(rootModule);\n      this.warnings = new StackedSetMap();\n    }\n  }\n\n  add(module) {\n    this.modules.add(module);\n  }\n\n  has(module) {\n    return this.modules.has(module);\n  }\n\n  isEmpty() {\n    return this.modules.size === 1;\n  }\n\n  addWarning(module, problem) {\n    this.warnings.set(module, problem);\n  }\n\n  getWarningsSorted() {\n    return new Map(this.warnings.asPairArray().sort((a, b) => {\n      const ai = a[0].identifier();\n      const bi = b[0].identifier();\n      if (ai < bi) return -1;\n      if (ai > bi) return 1;\n      return 0;\n    }));\n  }\n\n  getModules() {\n    return this.modules.asSet();\n  }\n\n  clone() {\n    return new ConcatConfiguration(this.rootModule, this);\n  }\n\n  set(config) {\n    this.rootModule = config.rootModule;\n    this.modules = config.modules;\n    this.warnings = config.warnings;\n  }\n\n}\n\nmodule.exports = ModuleConcatenationPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/optimize/ModuleConcatenationPlugin.js"],"names":["HarmonyImportDependency","require","ModuleHotAcceptDependency","ModuleHotDeclineDependency","ConcatenatedModule","HarmonyCompatibilityDependency","StackedSetMap","formatBailoutReason","msg","ModuleConcatenationPlugin","constructor","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","handler","parser","parserOptions","call","for","state","module","buildMeta","moduleConcatenationBailout","bailoutReasonMap","Map","setBailoutReason","reason","set","optimizationBailout","push","rs","getBailoutReason","requestShortener","get","optimizeChunkModules","allChunks","modules","relevantModules","possibleInners","Set","exportsType","dependencies","some","d","Array","isArray","providedExports","variables","length","map","v","name","join","dep","isEntryModule","getNumberOfChunks","nonHarmonyReasons","reasons","filter","dependency","importingModules","r","Boolean","importingExplanations","explanation","importingModuleTypes","from","m","type","sort","names","readableIdentifier","explanations","add","a","b","depth","concatConfigurations","usedAsInner","currentRoot","has","currentConfiguration","ConcatConfiguration","failureCache","imp","_getImports","problem","_tryToAdd","addWarning","isEmpty","getModules","rootModule","size","usedModules","concatConfiguration","newModule","createConcatenationList","warning","getWarningsSorted","reasonWithPrefix","chunks","getChunks","chunk","removeModule","addModule","addChunk","entryModule","redirectedModule","i","j","getReference","getDependencyReference","ref","importedNames","config","possibleModules","cacheEntry","hasEqualsChunks","testConfig","clone","factoryMeta","sideEffectFree","used","cloneFrom","createChild","warnings","asPairArray","ai","identifier","bi","asSet","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst HarmonyImportDependency = require(\"../dependencies/HarmonyImportDependency\");\nconst ModuleHotAcceptDependency = require(\"../dependencies/ModuleHotAcceptDependency\");\nconst ModuleHotDeclineDependency = require(\"../dependencies/ModuleHotDeclineDependency\");\nconst ConcatenatedModule = require(\"./ConcatenatedModule\");\nconst HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\nconst StackedSetMap = require(\"../util/StackedSetMap\");\n\nconst formatBailoutReason = msg => {\n\treturn \"ModuleConcatenation bailout: \" + msg;\n};\n\nclass ModuleConcatenationPlugin {\n\tconstructor(options) {\n\t\tif (typeof options !== \"object\") options = {};\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ModuleConcatenationPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tparser.hooks.call.for(\"eval\").tap(\"ModuleConcatenationPlugin\", () => {\n\t\t\t\t\t\t// Because of variable renaming we can't use modules with eval.\n\t\t\t\t\t\tparser.state.module.buildMeta.moduleConcatenationBailout = \"eval()\";\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"ModuleConcatenationPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"ModuleConcatenationPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"ModuleConcatenationPlugin\", handler);\n\n\t\t\t\tconst bailoutReasonMap = new Map();\n\n\t\t\t\tconst setBailoutReason = (module, reason) => {\n\t\t\t\t\tbailoutReasonMap.set(module, reason);\n\t\t\t\t\tmodule.optimizationBailout.push(\n\t\t\t\t\t\ttypeof reason === \"function\"\n\t\t\t\t\t\t\t? rs => formatBailoutReason(reason(rs))\n\t\t\t\t\t\t\t: formatBailoutReason(reason)\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst getBailoutReason = (module, requestShortener) => {\n\t\t\t\t\tconst reason = bailoutReasonMap.get(module);\n\t\t\t\t\tif (typeof reason === \"function\") return reason(requestShortener);\n\t\t\t\t\treturn reason;\n\t\t\t\t};\n\n\t\t\t\tcompilation.hooks.optimizeChunkModules.tap(\n\t\t\t\t\t\"ModuleConcatenationPlugin\",\n\t\t\t\t\t(allChunks, modules) => {\n\t\t\t\t\t\tconst relevantModules = [];\n\t\t\t\t\t\tconst possibleInners = new Set();\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\t// Only harmony modules are valid for optimization\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t!module.buildMeta ||\n\t\t\t\t\t\t\t\tmodule.buildMeta.exportsType !== \"namespace\" ||\n\t\t\t\t\t\t\t\t!module.dependencies.some(\n\t\t\t\t\t\t\t\t\td => d instanceof HarmonyCompatibilityDependency\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module is not an ECMAScript module\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Some expressions are not compatible with module concatenation\n\t\t\t\t\t\t\t// because they may produce unexpected results. The plugin bails out\n\t\t\t\t\t\t\t// if some were detected upfront.\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmodule.buildMeta &&\n\t\t\t\t\t\t\t\tmodule.buildMeta.moduleConcatenationBailout\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsetBailoutReason(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t`Module uses ${module.buildMeta.moduleConcatenationBailout}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Exports must be known (and not dynamic)\n\t\t\t\t\t\t\tif (!Array.isArray(module.buildMeta.providedExports)) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module exports are unknown\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Using dependency variables is not possible as this wraps the code in a function\n\t\t\t\t\t\t\tif (module.variables.length > 0) {\n\t\t\t\t\t\t\t\tsetBailoutReason(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t`Module uses injected variables (${module.variables\n\t\t\t\t\t\t\t\t\t\t.map(v => v.name)\n\t\t\t\t\t\t\t\t\t\t.join(\", \")})`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Hot Module Replacement need it's own module to work correctly\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmodule.dependencies.some(\n\t\t\t\t\t\t\t\t\tdep =>\n\t\t\t\t\t\t\t\t\t\tdep instanceof ModuleHotAcceptDependency ||\n\t\t\t\t\t\t\t\t\t\tdep instanceof ModuleHotDeclineDependency\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module uses Hot Module Replacement\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trelevantModules.push(module);\n\n\t\t\t\t\t\t\t// Module must not be the entry points\n\t\t\t\t\t\t\tif (module.isEntryModule()) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module is an entry point\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Module must be in any chunk (we don't want to do useless work)\n\t\t\t\t\t\t\tif (module.getNumberOfChunks() === 0) {\n\t\t\t\t\t\t\t\tsetBailoutReason(module, \"Module is not in any chunk\");\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Module must only be used by Harmony Imports\n\t\t\t\t\t\t\tconst nonHarmonyReasons = module.reasons.filter(\n\t\t\t\t\t\t\t\treason =>\n\t\t\t\t\t\t\t\t\t!reason.dependency ||\n\t\t\t\t\t\t\t\t\t!(reason.dependency instanceof HarmonyImportDependency)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (nonHarmonyReasons.length > 0) {\n\t\t\t\t\t\t\t\tconst importingModules = new Set(\n\t\t\t\t\t\t\t\t\tnonHarmonyReasons.map(r => r.module).filter(Boolean)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst importingExplanations = new Set(\n\t\t\t\t\t\t\t\t\tnonHarmonyReasons.map(r => r.explanation).filter(Boolean)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst importingModuleTypes = new Map(\n\t\t\t\t\t\t\t\t\tArray.from(importingModules).map(\n\t\t\t\t\t\t\t\t\t\tm => /** @type {[string, Set]} */ ([\n\t\t\t\t\t\t\t\t\t\t\tm,\n\t\t\t\t\t\t\t\t\t\t\tnew Set(\n\t\t\t\t\t\t\t\t\t\t\t\tnonHarmonyReasons\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(r => r.module === m)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map(r => r.dependency.type)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.sort()\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tsetBailoutReason(module, requestShortener => {\n\t\t\t\t\t\t\t\t\tconst names = Array.from(importingModules)\n\t\t\t\t\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t\t\t\t\tm =>\n\t\t\t\t\t\t\t\t\t\t\t\t`${m.readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t\t)} (referenced with ${Array.from(\n\t\t\t\t\t\t\t\t\t\t\t\t\timportingModuleTypes.get(m)\n\t\t\t\t\t\t\t\t\t\t\t\t).join(\", \")})`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t.sort();\n\t\t\t\t\t\t\t\t\tconst explanations = Array.from(importingExplanations).sort();\n\t\t\t\t\t\t\t\t\tif (names.length > 0 && explanations.length === 0) {\n\t\t\t\t\t\t\t\t\t\treturn `Module is referenced from these modules with unsupported syntax: ${names.join(\n\t\t\t\t\t\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t\t\t\t)}`;\n\t\t\t\t\t\t\t\t\t} else if (names.length === 0 && explanations.length > 0) {\n\t\t\t\t\t\t\t\t\t\treturn `Module is referenced by: ${explanations.join(\n\t\t\t\t\t\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t\t\t\t)}`;\n\t\t\t\t\t\t\t\t\t} else if (names.length > 0 && explanations.length > 0) {\n\t\t\t\t\t\t\t\t\t\treturn `Module is referenced from these modules with unsupported syntax: ${names.join(\n\t\t\t\t\t\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t\t\t\t)} and by: ${explanations.join(\", \")}`;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn \"Module is referenced in a unsupported way\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpossibleInners.add(module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// sort by depth\n\t\t\t\t\t\t// modules with lower depth are more likely suited as roots\n\t\t\t\t\t\t// this improves performance, because modules already selected as inner are skipped\n\t\t\t\t\t\trelevantModules.sort((a, b) => {\n\t\t\t\t\t\t\treturn a.depth - b.depth;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst concatConfigurations = [];\n\t\t\t\t\t\tconst usedAsInner = new Set();\n\t\t\t\t\t\tfor (const currentRoot of relevantModules) {\n\t\t\t\t\t\t\t// when used by another configuration as inner:\n\t\t\t\t\t\t\t// the other configuration is better and we can skip this one\n\t\t\t\t\t\t\tif (usedAsInner.has(currentRoot)) continue;\n\n\t\t\t\t\t\t\t// create a configuration with the root\n\t\t\t\t\t\t\tconst currentConfiguration = new ConcatConfiguration(currentRoot);\n\n\t\t\t\t\t\t\t// cache failures to add modules\n\t\t\t\t\t\t\tconst failureCache = new Map();\n\n\t\t\t\t\t\t\t// try to add all imports\n\t\t\t\t\t\t\tfor (const imp of this._getImports(compilation, currentRoot)) {\n\t\t\t\t\t\t\t\tconst problem = this._tryToAdd(\n\t\t\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\t\t\tcurrentConfiguration,\n\t\t\t\t\t\t\t\t\timp,\n\t\t\t\t\t\t\t\t\tpossibleInners,\n\t\t\t\t\t\t\t\t\tfailureCache\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (problem) {\n\t\t\t\t\t\t\t\t\tfailureCache.set(imp, problem);\n\t\t\t\t\t\t\t\t\tcurrentConfiguration.addWarning(imp, problem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!currentConfiguration.isEmpty()) {\n\t\t\t\t\t\t\t\tconcatConfigurations.push(currentConfiguration);\n\t\t\t\t\t\t\t\tfor (const module of currentConfiguration.getModules()) {\n\t\t\t\t\t\t\t\t\tif (module !== currentConfiguration.rootModule) {\n\t\t\t\t\t\t\t\t\t\tusedAsInner.add(module);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// HACK: Sort configurations by length and start with the longest one\n\t\t\t\t\t\t// to get the biggers groups possible. Used modules are marked with usedModules\n\t\t\t\t\t\t// TODO: Allow to reuse existing configuration while trying to add dependencies.\n\t\t\t\t\t\t// This would improve performance. O(n^2) -> O(n)\n\t\t\t\t\t\tconcatConfigurations.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.modules.size - a.modules.size;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst usedModules = new Set();\n\t\t\t\t\t\tfor (const concatConfiguration of concatConfigurations) {\n\t\t\t\t\t\t\tif (usedModules.has(concatConfiguration.rootModule)) continue;\n\t\t\t\t\t\t\tconst modules = concatConfiguration.getModules();\n\t\t\t\t\t\t\tconst rootModule = concatConfiguration.rootModule;\n\t\t\t\t\t\t\tconst newModule = new ConcatenatedModule(\n\t\t\t\t\t\t\t\trootModule,\n\t\t\t\t\t\t\t\tArray.from(modules),\n\t\t\t\t\t\t\t\tConcatenatedModule.createConcatenationList(\n\t\t\t\t\t\t\t\t\trootModule,\n\t\t\t\t\t\t\t\t\tmodules,\n\t\t\t\t\t\t\t\t\tcompilation\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tfor (const warning of concatConfiguration.getWarningsSorted()) {\n\t\t\t\t\t\t\t\tnewModule.optimizationBailout.push(requestShortener => {\n\t\t\t\t\t\t\t\t\tconst reason = getBailoutReason(warning[0], requestShortener);\n\t\t\t\t\t\t\t\t\tconst reasonWithPrefix = reason ? ` (<- ${reason})` : \"\";\n\t\t\t\t\t\t\t\t\tif (warning[0] === warning[1]) {\n\t\t\t\t\t\t\t\t\t\treturn formatBailoutReason(\n\t\t\t\t\t\t\t\t\t\t\t`Cannot concat with ${warning[0].readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t)}${reasonWithPrefix}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn formatBailoutReason(\n\t\t\t\t\t\t\t\t\t\t\t`Cannot concat with ${warning[0].readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t)} because of ${warning[1].readableIdentifier(\n\t\t\t\t\t\t\t\t\t\t\t\trequestShortener\n\t\t\t\t\t\t\t\t\t\t\t)}${reasonWithPrefix}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst chunks = concatConfiguration.rootModule.getChunks();\n\t\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\t\tusedModules.add(m);\n\t\t\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\t\t\tchunk.removeModule(m);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\t\tchunk.addModule(newModule);\n\t\t\t\t\t\t\t\tnewModule.addChunk(chunk);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (const chunk of allChunks) {\n\t\t\t\t\t\t\t\tif (chunk.entryModule === concatConfiguration.rootModule) {\n\t\t\t\t\t\t\t\t\tchunk.entryModule = newModule;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcompilation.modules.push(newModule);\n\t\t\t\t\t\t\tfor (const reason of newModule.reasons) {\n\t\t\t\t\t\t\t\tif (reason.dependency.module === concatConfiguration.rootModule)\n\t\t\t\t\t\t\t\t\treason.dependency.module = newModule;\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\treason.dependency.redirectedModule ===\n\t\t\t\t\t\t\t\t\tconcatConfiguration.rootModule\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\treason.dependency.redirectedModule = newModule;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// TODO: remove when LTS node version contains fixed v8 version\n\t\t\t\t\t\t\t// @see https://github.com/webpack/webpack/pull/6613\n\t\t\t\t\t\t\t// Turbofan does not correctly inline for-of loops with polymorphic input arrays.\n\t\t\t\t\t\t\t// Work around issue by using a standard for loop and assigning dep.module.reasons\n\t\t\t\t\t\t\tfor (let i = 0; i < newModule.dependencies.length; i++) {\n\t\t\t\t\t\t\t\tlet dep = newModule.dependencies[i];\n\t\t\t\t\t\t\t\tif (dep.module) {\n\t\t\t\t\t\t\t\t\tlet reasons = dep.module.reasons;\n\t\t\t\t\t\t\t\t\tfor (let j = 0; j < reasons.length; j++) {\n\t\t\t\t\t\t\t\t\t\tlet reason = reasons[j];\n\t\t\t\t\t\t\t\t\t\tif (reason.dependency === dep) {\n\t\t\t\t\t\t\t\t\t\t\treason.module = newModule;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompilation.modules = compilation.modules.filter(\n\t\t\t\t\t\t\tm => !usedModules.has(m)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t_getImports(compilation, module) {\n\t\treturn new Set(\n\t\t\tmodule.dependencies\n\n\t\t\t\t// Get reference info only for harmony Dependencies\n\t\t\t\t.map(dep => {\n\t\t\t\t\tif (!(dep instanceof HarmonyImportDependency)) return null;\n\t\t\t\t\tif (!compilation) return dep.getReference();\n\t\t\t\t\treturn compilation.getDependencyReference(module, dep);\n\t\t\t\t})\n\n\t\t\t\t// Reference is valid and has a module\n\t\t\t\t// Dependencies are simple enough to concat them\n\t\t\t\t.filter(\n\t\t\t\t\tref =>\n\t\t\t\t\t\tref &&\n\t\t\t\t\t\tref.module &&\n\t\t\t\t\t\t(Array.isArray(ref.importedNames) ||\n\t\t\t\t\t\t\tArray.isArray(ref.module.buildMeta.providedExports))\n\t\t\t\t)\n\n\t\t\t\t// Take the imported module\n\t\t\t\t.map(ref => ref.module)\n\t\t);\n\t}\n\n\t_tryToAdd(compilation, config, module, possibleModules, failureCache) {\n\t\tconst cacheEntry = failureCache.get(module);\n\t\tif (cacheEntry) {\n\t\t\treturn cacheEntry;\n\t\t}\n\n\t\t// Already added?\n\t\tif (config.has(module)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Not possible to add?\n\t\tif (!possibleModules.has(module)) {\n\t\t\tfailureCache.set(module, module); // cache failures for performance\n\t\t\treturn module;\n\t\t}\n\n\t\t// module must be in the same chunks\n\t\tif (!config.rootModule.hasEqualsChunks(module)) {\n\t\t\tfailureCache.set(module, module); // cache failures for performance\n\t\t\treturn module;\n\t\t}\n\n\t\t// Clone config to make experimental changes\n\t\tconst testConfig = config.clone();\n\n\t\t// Add the module\n\t\ttestConfig.add(module);\n\n\t\t// Every module which depends on the added module must be in the configuration too.\n\t\tfor (const reason of module.reasons) {\n\t\t\t// Modules that are not used can be ignored\n\t\t\tif (\n\t\t\t\treason.module.factoryMeta.sideEffectFree &&\n\t\t\t\treason.module.used === false\n\t\t\t)\n\t\t\t\tcontinue;\n\n\t\t\tconst problem = this._tryToAdd(\n\t\t\t\tcompilation,\n\t\t\t\ttestConfig,\n\t\t\t\treason.module,\n\t\t\t\tpossibleModules,\n\t\t\t\tfailureCache\n\t\t\t);\n\t\t\tif (problem) {\n\t\t\t\tfailureCache.set(module, problem); // cache failures for performance\n\t\t\t\treturn problem;\n\t\t\t}\n\t\t}\n\n\t\t// Commit experimental changes\n\t\tconfig.set(testConfig);\n\n\t\t// Eagerly try to add imports too if possible\n\t\tfor (const imp of this._getImports(compilation, module)) {\n\t\t\tconst problem = this._tryToAdd(\n\t\t\t\tcompilation,\n\t\t\t\tconfig,\n\t\t\t\timp,\n\t\t\t\tpossibleModules,\n\t\t\t\tfailureCache\n\t\t\t);\n\t\t\tif (problem) {\n\t\t\t\tconfig.addWarning(imp, problem);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass ConcatConfiguration {\n\tconstructor(rootModule, cloneFrom) {\n\t\tthis.rootModule = rootModule;\n\t\tif (cloneFrom) {\n\t\t\tthis.modules = cloneFrom.modules.createChild(5);\n\t\t\tthis.warnings = cloneFrom.warnings.createChild(5);\n\t\t} else {\n\t\t\tthis.modules = new StackedSetMap();\n\t\t\tthis.modules.add(rootModule);\n\t\t\tthis.warnings = new StackedSetMap();\n\t\t}\n\t}\n\n\tadd(module) {\n\t\tthis.modules.add(module);\n\t}\n\n\thas(module) {\n\t\treturn this.modules.has(module);\n\t}\n\n\tisEmpty() {\n\t\treturn this.modules.size === 1;\n\t}\n\n\taddWarning(module, problem) {\n\t\tthis.warnings.set(module, problem);\n\t}\n\n\tgetWarningsSorted() {\n\t\treturn new Map(\n\t\t\tthis.warnings.asPairArray().sort((a, b) => {\n\t\t\t\tconst ai = a[0].identifier();\n\t\t\t\tconst bi = b[0].identifier();\n\t\t\t\tif (ai < bi) return -1;\n\t\t\t\tif (ai > bi) return 1;\n\t\t\t\treturn 0;\n\t\t\t})\n\t\t);\n\t}\n\n\tgetModules() {\n\t\treturn this.modules.asSet();\n\t}\n\n\tclone() {\n\t\treturn new ConcatConfiguration(this.rootModule, this);\n\t}\n\n\tset(config) {\n\t\tthis.rootModule = config.rootModule;\n\t\tthis.modules = config.modules;\n\t\tthis.warnings = config.warnings;\n\t}\n}\n\nmodule.exports = ModuleConcatenationPlugin;\n"]},"metadata":{},"sourceType":"script"}