{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/WatchIgnorePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/WatchIgnorePlugin\").WatchIgnorePluginOptions} WatchIgnorePluginOptions */\n\n\nclass IgnoringWatchFileSystem {\n  constructor(wfs, paths) {\n    this.wfs = wfs;\n    this.paths = paths;\n  }\n\n  watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n    const ignored = path => this.paths.some(p => p instanceof RegExp ? p.test(path) : path.indexOf(p) === 0);\n\n    const notIgnored = path => !ignored(path);\n\n    const ignoredFiles = files.filter(ignored);\n    const ignoredDirs = dirs.filter(ignored);\n    const watcher = this.wfs.watch(files.filter(notIgnored), dirs.filter(notIgnored), missing, startTime, options, (err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles) => {\n      if (err) return callback(err);\n\n      for (const path of ignoredFiles) {\n        fileTimestamps.set(path, 1);\n      }\n\n      for (const path of ignoredDirs) {\n        dirTimestamps.set(path, 1);\n      }\n\n      callback(err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles);\n    }, callbackUndelayed);\n    return {\n      close: () => watcher.close(),\n      pause: () => watcher.pause(),\n      getContextTimestamps: () => {\n        const dirTimestamps = watcher.getContextTimestamps();\n\n        for (const path of ignoredDirs) {\n          dirTimestamps.set(path, 1);\n        }\n\n        return dirTimestamps;\n      },\n      getFileTimestamps: () => {\n        const fileTimestamps = watcher.getFileTimestamps();\n\n        for (const path of ignoredFiles) {\n          fileTimestamps.set(path, 1);\n        }\n\n        return fileTimestamps;\n      }\n    };\n  }\n\n}\n\nclass WatchIgnorePlugin {\n  /**\n   * @param {WatchIgnorePluginOptions} paths list of paths\n   */\n  constructor(paths) {\n    validateOptions(schema, paths, \"Watch Ignore Plugin\");\n    this.paths = paths;\n  }\n\n  apply(compiler) {\n    compiler.hooks.afterEnvironment.tap(\"WatchIgnorePlugin\", () => {\n      compiler.watchFileSystem = new IgnoringWatchFileSystem(compiler.watchFileSystem, this.paths);\n    });\n  }\n\n}\n\nmodule.exports = WatchIgnorePlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/WatchIgnorePlugin.js"],"names":["validateOptions","require","schema","IgnoringWatchFileSystem","constructor","wfs","paths","watch","files","dirs","missing","startTime","options","callback","callbackUndelayed","ignored","path","some","p","RegExp","test","indexOf","notIgnored","ignoredFiles","filter","ignoredDirs","watcher","err","filesModified","dirsModified","missingModified","fileTimestamps","dirTimestamps","removedFiles","set","close","pause","getContextTimestamps","getFileTimestamps","WatchIgnorePlugin","apply","compiler","hooks","afterEnvironment","tap","watchFileSystem","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/WatchIgnorePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/WatchIgnorePlugin\").WatchIgnorePluginOptions} WatchIgnorePluginOptions */\n\nclass IgnoringWatchFileSystem {\n\tconstructor(wfs, paths) {\n\t\tthis.wfs = wfs;\n\t\tthis.paths = paths;\n\t}\n\n\twatch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n\t\tconst ignored = path =>\n\t\t\tthis.paths.some(p =>\n\t\t\t\tp instanceof RegExp ? p.test(path) : path.indexOf(p) === 0\n\t\t\t);\n\n\t\tconst notIgnored = path => !ignored(path);\n\n\t\tconst ignoredFiles = files.filter(ignored);\n\t\tconst ignoredDirs = dirs.filter(ignored);\n\n\t\tconst watcher = this.wfs.watch(\n\t\t\tfiles.filter(notIgnored),\n\t\t\tdirs.filter(notIgnored),\n\t\t\tmissing,\n\t\t\tstartTime,\n\t\t\toptions,\n\t\t\t(\n\t\t\t\terr,\n\t\t\t\tfilesModified,\n\t\t\t\tdirsModified,\n\t\t\t\tmissingModified,\n\t\t\t\tfileTimestamps,\n\t\t\t\tdirTimestamps,\n\t\t\t\tremovedFiles\n\t\t\t) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tfor (const path of ignoredFiles) {\n\t\t\t\t\tfileTimestamps.set(path, 1);\n\t\t\t\t}\n\n\t\t\t\tfor (const path of ignoredDirs) {\n\t\t\t\t\tdirTimestamps.set(path, 1);\n\t\t\t\t}\n\n\t\t\t\tcallback(\n\t\t\t\t\terr,\n\t\t\t\t\tfilesModified,\n\t\t\t\t\tdirsModified,\n\t\t\t\t\tmissingModified,\n\t\t\t\t\tfileTimestamps,\n\t\t\t\t\tdirTimestamps,\n\t\t\t\t\tremovedFiles\n\t\t\t\t);\n\t\t\t},\n\t\t\tcallbackUndelayed\n\t\t);\n\n\t\treturn {\n\t\t\tclose: () => watcher.close(),\n\t\t\tpause: () => watcher.pause(),\n\t\t\tgetContextTimestamps: () => {\n\t\t\t\tconst dirTimestamps = watcher.getContextTimestamps();\n\t\t\t\tfor (const path of ignoredDirs) {\n\t\t\t\t\tdirTimestamps.set(path, 1);\n\t\t\t\t}\n\t\t\t\treturn dirTimestamps;\n\t\t\t},\n\t\t\tgetFileTimestamps: () => {\n\t\t\t\tconst fileTimestamps = watcher.getFileTimestamps();\n\t\t\t\tfor (const path of ignoredFiles) {\n\t\t\t\t\tfileTimestamps.set(path, 1);\n\t\t\t\t}\n\t\t\t\treturn fileTimestamps;\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass WatchIgnorePlugin {\n\t/**\n\t * @param {WatchIgnorePluginOptions} paths list of paths\n\t */\n\tconstructor(paths) {\n\t\tvalidateOptions(schema, paths, \"Watch Ignore Plugin\");\n\t\tthis.paths = paths;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.afterEnvironment.tap(\"WatchIgnorePlugin\", () => {\n\t\t\tcompiler.watchFileSystem = new IgnoringWatchFileSystem(\n\t\t\t\tcompiler.watchFileSystem,\n\t\t\t\tthis.paths\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = WatchIgnorePlugin;\n"]},"metadata":{},"sourceType":"script"}