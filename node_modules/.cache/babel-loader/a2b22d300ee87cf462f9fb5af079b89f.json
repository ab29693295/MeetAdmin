{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncWaterfallHookCodeFactory extends HookCodeFactory {\n  content({\n    onError,\n    onResult,\n    resultReturns,\n    rethrowIfPossible\n  }) {\n    return this.callTapsSeries({\n      onError: (i, err) => onError(err),\n      onResult: (i, result, next) => {\n        let code = \"\";\n        code += `if(${result} !== undefined) {\\n`;\n        code += `${this._args[0]} = ${result};\\n`;\n        code += `}\\n`;\n        code += next();\n        return code;\n      },\n      onDone: () => onResult(this._args[0]),\n      doneReturns: resultReturns,\n      rethrowIfPossible\n    });\n  }\n\n}\n\nconst factory = new SyncWaterfallHookCodeFactory();\n\nclass SyncWaterfallHook extends Hook {\n  constructor(args) {\n    super(args);\n    if (args.length < 1) throw new Error(\"Waterfall hooks must have at least one argument\");\n  }\n\n  tapAsync() {\n    throw new Error(\"tapAsync is not supported on a SyncWaterfallHook\");\n  }\n\n  tapPromise() {\n    throw new Error(\"tapPromise is not supported on a SyncWaterfallHook\");\n  }\n\n  compile(options) {\n    factory.setup(this, options);\n    return factory.create(options);\n  }\n\n}\n\nmodule.exports = SyncWaterfallHook;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/tapable/lib/SyncWaterfallHook.js"],"names":["Hook","require","HookCodeFactory","SyncWaterfallHookCodeFactory","content","onError","onResult","resultReturns","rethrowIfPossible","callTapsSeries","i","err","result","next","code","_args","onDone","doneReturns","factory","SyncWaterfallHook","constructor","args","length","Error","tapAsync","tapPromise","compile","options","setup","create","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,4BAAN,SAA2CD,eAA3C,CAA2D;AAC1DE,EAAAA,OAAO,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,aAArB;AAAoCC,IAAAA;AAApC,GAAD,EAA0D;AAChE,WAAO,KAAKC,cAAL,CAAoB;AAC1BJ,MAAAA,OAAO,EAAE,CAACK,CAAD,EAAIC,GAAJ,KAAYN,OAAO,CAACM,GAAD,CADF;AAE1BL,MAAAA,QAAQ,EAAE,CAACI,CAAD,EAAIE,MAAJ,EAAYC,IAAZ,KAAqB;AAC9B,YAAIC,IAAI,GAAG,EAAX;AACAA,QAAAA,IAAI,IAAK,MAAKF,MAAO,qBAArB;AACAE,QAAAA,IAAI,IAAK,GAAE,KAAKC,KAAL,CAAW,CAAX,CAAc,MAAKH,MAAO,KAArC;AACAE,QAAAA,IAAI,IAAK,KAAT;AACAA,QAAAA,IAAI,IAAID,IAAI,EAAZ;AACA,eAAOC,IAAP;AACA,OATyB;AAU1BE,MAAAA,MAAM,EAAE,MAAMV,QAAQ,CAAC,KAAKS,KAAL,CAAW,CAAX,CAAD,CAVI;AAW1BE,MAAAA,WAAW,EAAEV,aAXa;AAY1BC,MAAAA;AAZ0B,KAApB,CAAP;AAcA;;AAhByD;;AAmB3D,MAAMU,OAAO,GAAG,IAAIf,4BAAJ,EAAhB;;AAEA,MAAMgB,iBAAN,SAAgCnB,IAAhC,CAAqC;AACpCoB,EAAAA,WAAW,CAACC,IAAD,EAAO;AACjB,UAAMA,IAAN;AACA,QAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EACC,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACV,UAAM,IAAID,KAAJ,CAAU,kDAAV,CAAN;AACA;;AAEDE,EAAAA,UAAU,GAAG;AACZ,UAAM,IAAIF,KAAJ,CAAU,oDAAV,CAAN;AACA;;AAEDG,EAAAA,OAAO,CAACC,OAAD,EAAU;AAChBT,IAAAA,OAAO,CAACU,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,WAAOT,OAAO,CAACW,MAAR,CAAeF,OAAf,CAAP;AACA;;AAlBmC;;AAqBrCG,MAAM,CAACC,OAAP,GAAiBZ,iBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncWaterfallHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) => {\n\t\t\t\tlet code = \"\";\n\t\t\t\tcode += `if(${result} !== undefined) {\\n`;\n\t\t\t\tcode += `${this._args[0]} = ${result};\\n`;\n\t\t\t\tcode += `}\\n`;\n\t\t\t\tcode += next();\n\t\t\t\treturn code;\n\t\t\t},\n\t\t\tonDone: () => onResult(this._args[0]),\n\t\t\tdoneReturns: resultReturns,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncWaterfallHookCodeFactory();\n\nclass SyncWaterfallHook extends Hook {\n\tconstructor(args) {\n\t\tsuper(args);\n\t\tif (args.length < 1)\n\t\t\tthrow new Error(\"Waterfall hooks must have at least one argument\");\n\t}\n\n\ttapAsync() {\n\t\tthrow new Error(\"tapAsync is not supported on a SyncWaterfallHook\");\n\t}\n\n\ttapPromise() {\n\t\tthrow new Error(\"tapPromise is not supported on a SyncWaterfallHook\");\n\t}\n\n\tcompile(options) {\n\t\tfactory.setup(this, options);\n\t\treturn factory.create(options);\n\t}\n}\n\nmodule.exports = SyncWaterfallHook;\n"]},"metadata":{},"sourceType":"script"}