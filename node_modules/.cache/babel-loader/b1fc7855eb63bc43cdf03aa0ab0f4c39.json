{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n\nconst Template = require(\"../Template\");\n\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\n\nconst {\n  RawSource\n} = require(\"webpack-sources\");\n\nconst {\n  editWithAST,\n  addWithAST\n} = require(\"@webassemblyjs/wasm-edit\");\n\nconst {\n  decode\n} = require(\"@webassemblyjs/wasm-parser\");\n\nconst t = require(\"@webassemblyjs/ast\");\n\nconst {\n  moduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"./WebAssemblyUtils\").UsedWasmDependency} UsedWasmDependency */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Dependency\").DependencyTemplate} DependencyTemplate */\n\n/**\n * @typedef {(ArrayBuffer) => ArrayBuffer} ArrayBufferTransform\n */\n\n/**\n * @template T\n * @param {Function[]} fns transforms\n * @returns {Function} composed transform\n */\n\n\nconst compose = (...fns) => {\n  return fns.reduce((prevFn, nextFn) => {\n    return value => nextFn(prevFn(value));\n  }, value => value);\n}; // TODO replace with @callback\n\n/**\n * Removes the start instruction\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\n\n\nconst removeStartFunc = state => bin => {\n  return editWithAST(state.ast, bin, {\n    Start(path) {\n      path.remove();\n    }\n\n  });\n};\n/**\n * Get imported globals\n *\n * @param {Object} ast Module's AST\n * @returns {Array<t.ModuleImport>} - nodes\n */\n\n\nconst getImportedGlobals = ast => {\n  const importedGlobals = [];\n  t.traverse(ast, {\n    ModuleImport({\n      node\n    }) {\n      if (t.isGlobalType(node.descr)) {\n        importedGlobals.push(node);\n      }\n    }\n\n  });\n  return importedGlobals;\n};\n/**\n * Get the count for imported func\n *\n * @param {Object} ast Module's AST\n * @returns {Number} - count\n */\n\n\nconst getCountImportedFunc = ast => {\n  let count = 0;\n  t.traverse(ast, {\n    ModuleImport({\n      node\n    }) {\n      if (t.isFuncImportDescr(node.descr)) {\n        count++;\n      }\n    }\n\n  });\n  return count;\n};\n/**\n * Get next type index\n *\n * @param {Object} ast Module's AST\n * @returns {t.Index} - index\n */\n\n\nconst getNextTypeIndex = ast => {\n  const typeSectionMetadata = t.getSectionMetadata(ast, \"type\");\n\n  if (typeSectionMetadata === undefined) {\n    return t.indexLiteral(0);\n  }\n\n  return t.indexLiteral(typeSectionMetadata.vectorOfSize.value);\n};\n/**\n * Get next func index\n *\n * The Func section metadata provide informations for implemented funcs\n * in order to have the correct index we shift the index by number of external\n * functions.\n *\n * @param {Object} ast Module's AST\n * @param {Number} countImportedFunc number of imported funcs\n * @returns {t.Index} - index\n */\n\n\nconst getNextFuncIndex = (ast, countImportedFunc) => {\n  const funcSectionMetadata = t.getSectionMetadata(ast, \"func\");\n\n  if (funcSectionMetadata === undefined) {\n    return t.indexLiteral(0 + countImportedFunc);\n  }\n\n  const vectorOfSize = funcSectionMetadata.vectorOfSize.value;\n  return t.indexLiteral(vectorOfSize + countImportedFunc);\n};\n/**\n * Creates an init instruction for a global type\n * @param {t.GlobalType} globalType the global type\n * @returns {t.Instruction} init expression\n */\n\n\nconst createDefaultInitForGlobal = globalType => {\n  if (globalType.valtype[0] === \"i\") {\n    // create NumberLiteral global initializer\n    return t.objectInstruction(\"const\", globalType.valtype, [t.numberLiteralFromRaw(66)]);\n  } else if (globalType.valtype[0] === \"f\") {\n    // create FloatLiteral global initializer\n    return t.objectInstruction(\"const\", globalType.valtype, [t.floatLiteral(66, false, false, \"66\")]);\n  } else {\n    throw new Error(\"unknown type: \" + globalType.valtype);\n  }\n};\n/**\n * Rewrite the import globals:\n * - removes the ModuleImport instruction\n * - injects at the same offset a mutable global of the same type\n *\n * Since the imported globals are before the other global declarations, our\n * indices will be preserved.\n *\n * Note that globals will become mutable.\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\n\n\nconst rewriteImportedGlobals = state => bin => {\n  const additionalInitCode = state.additionalInitCode;\n  const newGlobals = [];\n  bin = editWithAST(state.ast, bin, {\n    ModuleImport(path) {\n      if (t.isGlobalType(path.node.descr)) {\n        const globalType = path.node.descr;\n        globalType.mutability = \"var\";\n        const init = [createDefaultInitForGlobal(globalType), t.instruction(\"end\")];\n        newGlobals.push(t.global(globalType, init));\n        path.remove();\n      }\n    },\n\n    // in order to preserve non-imported global's order we need to re-inject\n    // those as well\n    Global(path) {\n      const {\n        node\n      } = path;\n      const [init] = node.init;\n\n      if (init.id === \"get_global\") {\n        node.globalType.mutability = \"var\";\n        const initialGlobalidx = init.args[0];\n        node.init = [createDefaultInitForGlobal(node.globalType), t.instruction(\"end\")];\n        additionalInitCode.push(\n        /**\n         * get_global in global initializer only works for imported globals.\n         * They have the same indices as the init params, so use the\n         * same index.\n         */\n        t.instruction(\"get_local\", [initialGlobalidx]), t.instruction(\"set_global\", [t.indexLiteral(newGlobals.length)]));\n      }\n\n      newGlobals.push(node);\n      path.remove();\n    }\n\n  }); // Add global declaration instructions\n\n  return addWithAST(state.ast, bin, newGlobals);\n};\n/**\n * Rewrite the export names\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Module} state.module Module\n * @param {Set<string>} state.externalExports Module\n * @returns {ArrayBufferTransform} transform\n */\n\n\nconst rewriteExportNames = ({\n  ast,\n  module,\n  externalExports\n}) => bin => {\n  return editWithAST(ast, bin, {\n    ModuleExport(path) {\n      const isExternal = externalExports.has(path.node.name);\n\n      if (isExternal) {\n        path.remove();\n        return;\n      }\n\n      const usedName = module.isUsed(path.node.name);\n\n      if (!usedName) {\n        path.remove();\n        return;\n      }\n\n      path.node.name = usedName;\n    }\n\n  });\n};\n/**\n * Mangle import names and modules\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Map<string, UsedWasmDependency>} state.usedDependencyMap mappings to mangle names\n * @returns {ArrayBufferTransform} transform\n */\n\n\nconst rewriteImports = ({\n  ast,\n  usedDependencyMap\n}) => bin => {\n  return editWithAST(ast, bin, {\n    ModuleImport(path) {\n      const result = usedDependencyMap.get(path.node.module + \":\" + path.node.name);\n\n      if (result !== undefined) {\n        path.node.module = result.module;\n        path.node.name = result.name;\n      }\n    }\n\n  });\n};\n/**\n * Add an init function.\n *\n * The init function fills the globals given input arguments.\n *\n * @param {Object} state transformation state\n * @param {Object} state.ast Module's ast\n * @param {t.Identifier} state.initFuncId identifier of the init function\n * @param {t.Index} state.startAtFuncOffset index of the start function\n * @param {t.ModuleImport[]} state.importedGlobals list of imported globals\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @param {t.Index} state.nextFuncIndex index of the next function\n * @param {t.Index} state.nextTypeIndex index of the next type\n * @returns {ArrayBufferTransform} transform\n */\n\n\nconst addInitFunction = ({\n  ast,\n  initFuncId,\n  startAtFuncOffset,\n  importedGlobals,\n  additionalInitCode,\n  nextFuncIndex,\n  nextTypeIndex\n}) => bin => {\n  const funcParams = importedGlobals.map(importedGlobal => {\n    // used for debugging\n    const id = t.identifier(`${importedGlobal.module}.${importedGlobal.name}`);\n    return t.funcParam(importedGlobal.descr.valtype, id);\n  });\n  const funcBody = importedGlobals.reduce((acc, importedGlobal, index) => {\n    const args = [t.indexLiteral(index)];\n    const body = [t.instruction(\"get_local\", args), t.instruction(\"set_global\", args)];\n    return [...acc, ...body];\n  }, []);\n\n  if (typeof startAtFuncOffset === \"number\") {\n    funcBody.push(t.callInstruction(t.numberLiteralFromRaw(startAtFuncOffset)));\n  }\n\n  for (const instr of additionalInitCode) {\n    funcBody.push(instr);\n  }\n\n  funcBody.push(t.instruction(\"end\"));\n  const funcResults = []; // Code section\n\n  const funcSignature = t.signature(funcParams, funcResults);\n  const func = t.func(initFuncId, funcSignature, funcBody); // Type section\n\n  const functype = t.typeInstruction(undefined, funcSignature); // Func section\n\n  const funcindex = t.indexInFuncSection(nextTypeIndex); // Export section\n\n  const moduleExport = t.moduleExport(initFuncId.value, t.moduleExportDescr(\"Func\", nextFuncIndex));\n  return addWithAST(ast, bin, [func, moduleExport, funcindex, functype]);\n};\n/**\n * Extract mangle mappings from module\n * @param {Module} module current module\n * @param {boolean} mangle mangle imports\n * @returns {Map<string, UsedWasmDependency>} mappings to mangled names\n */\n\n\nconst getUsedDependencyMap = (module, mangle) => {\n  /** @type {Map<string, UsedWasmDependency>} */\n  const map = new Map();\n\n  for (const usedDep of WebAssemblyUtils.getUsedDependencies(module, mangle)) {\n    const dep = usedDep.dependency;\n    const request = dep.request;\n    const exportName = dep.name;\n    map.set(request + \":\" + exportName, usedDep);\n  }\n\n  return map;\n};\n\nclass WebAssemblyGenerator extends Generator {\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n   * @param {RuntimeTemplate} runtimeTemplate the runtime template\n   * @param {string} type which kind of code should be generated\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, dependencyTemplates, runtimeTemplate, type) {\n    let bin = module.originalSource().source();\n    const initFuncId = t.identifier(Array.isArray(module.usedExports) ? Template.numberToIdentifer(module.usedExports.length) : \"__webpack_init__\"); // parse it\n\n    const ast = decode(bin, {\n      ignoreDataSection: true,\n      ignoreCodeSection: true,\n      ignoreCustomNameSection: true\n    });\n    const moduleContext = moduleContextFromModuleAST(ast.body[0]);\n    const importedGlobals = getImportedGlobals(ast);\n    const countImportedFunc = getCountImportedFunc(ast);\n    const startAtFuncOffset = moduleContext.getStart();\n    const nextFuncIndex = getNextFuncIndex(ast, countImportedFunc);\n    const nextTypeIndex = getNextTypeIndex(ast);\n    const usedDependencyMap = getUsedDependencyMap(module, this.options.mangleImports);\n    const externalExports = new Set(module.dependencies.filter(d => d instanceof WebAssemblyExportImportedDependency).map(d => {\n      const wasmDep =\n      /** @type {WebAssemblyExportImportedDependency} */\n      d;\n      return wasmDep.exportName;\n    }));\n    /** @type {t.Instruction[]} */\n\n    const additionalInitCode = [];\n    const transform = compose(rewriteExportNames({\n      ast,\n      module,\n      externalExports\n    }), removeStartFunc({\n      ast\n    }), rewriteImportedGlobals({\n      ast,\n      additionalInitCode\n    }), rewriteImports({\n      ast,\n      usedDependencyMap\n    }), addInitFunction({\n      ast,\n      initFuncId,\n      importedGlobals,\n      additionalInitCode,\n      startAtFuncOffset,\n      nextFuncIndex,\n      nextTypeIndex\n    }));\n    const newBin = transform(bin);\n    return new RawSource(newBin);\n  }\n\n}\n\nmodule.exports = WebAssemblyGenerator;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/wasm/WebAssemblyGenerator.js"],"names":["Generator","require","Template","WebAssemblyUtils","RawSource","editWithAST","addWithAST","decode","t","moduleContextFromModuleAST","WebAssemblyExportImportedDependency","compose","fns","reduce","prevFn","nextFn","value","removeStartFunc","state","bin","ast","Start","path","remove","getImportedGlobals","importedGlobals","traverse","ModuleImport","node","isGlobalType","descr","push","getCountImportedFunc","count","isFuncImportDescr","getNextTypeIndex","typeSectionMetadata","getSectionMetadata","undefined","indexLiteral","vectorOfSize","getNextFuncIndex","countImportedFunc","funcSectionMetadata","createDefaultInitForGlobal","globalType","valtype","objectInstruction","numberLiteralFromRaw","floatLiteral","Error","rewriteImportedGlobals","additionalInitCode","newGlobals","mutability","init","instruction","global","Global","id","initialGlobalidx","args","length","rewriteExportNames","module","externalExports","ModuleExport","isExternal","has","name","usedName","isUsed","rewriteImports","usedDependencyMap","result","get","addInitFunction","initFuncId","startAtFuncOffset","nextFuncIndex","nextTypeIndex","funcParams","map","importedGlobal","identifier","funcParam","funcBody","acc","index","body","callInstruction","instr","funcResults","funcSignature","signature","func","functype","typeInstruction","funcindex","indexInFuncSection","moduleExport","moduleExportDescr","getUsedDependencyMap","mangle","Map","usedDep","getUsedDependencies","dep","dependency","request","exportName","set","WebAssemblyGenerator","constructor","options","generate","dependencyTemplates","runtimeTemplate","type","originalSource","source","Array","isArray","usedExports","numberToIdentifer","ignoreDataSection","ignoreCodeSection","ignoreCustomNameSection","moduleContext","getStart","mangleImports","Set","dependencies","filter","d","wasmDep","transform","newBin","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst Template = require(\"../Template\");\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\nconst { RawSource } = require(\"webpack-sources\");\n\nconst { editWithAST, addWithAST } = require(\"@webassemblyjs/wasm-edit\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst t = require(\"@webassemblyjs/ast\");\nconst {\n\tmoduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"./WebAssemblyUtils\").UsedWasmDependency} UsedWasmDependency */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\").DependencyTemplate} DependencyTemplate */\n\n/**\n * @typedef {(ArrayBuffer) => ArrayBuffer} ArrayBufferTransform\n */\n\n/**\n * @template T\n * @param {Function[]} fns transforms\n * @returns {Function} composed transform\n */\nconst compose = (...fns) => {\n\treturn fns.reduce(\n\t\t(prevFn, nextFn) => {\n\t\t\treturn value => nextFn(prevFn(value));\n\t\t},\n\t\tvalue => value\n\t);\n};\n\n// TODO replace with @callback\n\n/**\n * Removes the start instruction\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\nconst removeStartFunc = state => bin => {\n\treturn editWithAST(state.ast, bin, {\n\t\tStart(path) {\n\t\t\tpath.remove();\n\t\t}\n\t});\n};\n\n/**\n * Get imported globals\n *\n * @param {Object} ast Module's AST\n * @returns {Array<t.ModuleImport>} - nodes\n */\nconst getImportedGlobals = ast => {\n\tconst importedGlobals = [];\n\n\tt.traverse(ast, {\n\t\tModuleImport({ node }) {\n\t\t\tif (t.isGlobalType(node.descr)) {\n\t\t\t\timportedGlobals.push(node);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn importedGlobals;\n};\n\n/**\n * Get the count for imported func\n *\n * @param {Object} ast Module's AST\n * @returns {Number} - count\n */\nconst getCountImportedFunc = ast => {\n\tlet count = 0;\n\n\tt.traverse(ast, {\n\t\tModuleImport({ node }) {\n\t\t\tif (t.isFuncImportDescr(node.descr)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn count;\n};\n\n/**\n * Get next type index\n *\n * @param {Object} ast Module's AST\n * @returns {t.Index} - index\n */\nconst getNextTypeIndex = ast => {\n\tconst typeSectionMetadata = t.getSectionMetadata(ast, \"type\");\n\n\tif (typeSectionMetadata === undefined) {\n\t\treturn t.indexLiteral(0);\n\t}\n\n\treturn t.indexLiteral(typeSectionMetadata.vectorOfSize.value);\n};\n\n/**\n * Get next func index\n *\n * The Func section metadata provide informations for implemented funcs\n * in order to have the correct index we shift the index by number of external\n * functions.\n *\n * @param {Object} ast Module's AST\n * @param {Number} countImportedFunc number of imported funcs\n * @returns {t.Index} - index\n */\nconst getNextFuncIndex = (ast, countImportedFunc) => {\n\tconst funcSectionMetadata = t.getSectionMetadata(ast, \"func\");\n\n\tif (funcSectionMetadata === undefined) {\n\t\treturn t.indexLiteral(0 + countImportedFunc);\n\t}\n\n\tconst vectorOfSize = funcSectionMetadata.vectorOfSize.value;\n\n\treturn t.indexLiteral(vectorOfSize + countImportedFunc);\n};\n\n/**\n * Creates an init instruction for a global type\n * @param {t.GlobalType} globalType the global type\n * @returns {t.Instruction} init expression\n */\nconst createDefaultInitForGlobal = globalType => {\n\tif (globalType.valtype[0] === \"i\") {\n\t\t// create NumberLiteral global initializer\n\t\treturn t.objectInstruction(\"const\", globalType.valtype, [\n\t\t\tt.numberLiteralFromRaw(66)\n\t\t]);\n\t} else if (globalType.valtype[0] === \"f\") {\n\t\t// create FloatLiteral global initializer\n\t\treturn t.objectInstruction(\"const\", globalType.valtype, [\n\t\t\tt.floatLiteral(66, false, false, \"66\")\n\t\t]);\n\t} else {\n\t\tthrow new Error(\"unknown type: \" + globalType.valtype);\n\t}\n};\n\n/**\n * Rewrite the import globals:\n * - removes the ModuleImport instruction\n * - injects at the same offset a mutable global of the same type\n *\n * Since the imported globals are before the other global declarations, our\n * indices will be preserved.\n *\n * Note that globals will become mutable.\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImportedGlobals = state => bin => {\n\tconst additionalInitCode = state.additionalInitCode;\n\tconst newGlobals = [];\n\n\tbin = editWithAST(state.ast, bin, {\n\t\tModuleImport(path) {\n\t\t\tif (t.isGlobalType(path.node.descr)) {\n\t\t\t\tconst globalType = path.node.descr;\n\n\t\t\t\tglobalType.mutability = \"var\";\n\n\t\t\t\tconst init = [\n\t\t\t\t\tcreateDefaultInitForGlobal(globalType),\n\t\t\t\t\tt.instruction(\"end\")\n\t\t\t\t];\n\n\t\t\t\tnewGlobals.push(t.global(globalType, init));\n\n\t\t\t\tpath.remove();\n\t\t\t}\n\t\t},\n\n\t\t// in order to preserve non-imported global's order we need to re-inject\n\t\t// those as well\n\t\tGlobal(path) {\n\t\t\tconst { node } = path;\n\t\t\tconst [init] = node.init;\n\n\t\t\tif (init.id === \"get_global\") {\n\t\t\t\tnode.globalType.mutability = \"var\";\n\n\t\t\t\tconst initialGlobalidx = init.args[0];\n\n\t\t\t\tnode.init = [\n\t\t\t\t\tcreateDefaultInitForGlobal(node.globalType),\n\t\t\t\t\tt.instruction(\"end\")\n\t\t\t\t];\n\n\t\t\t\tadditionalInitCode.push(\n\t\t\t\t\t/**\n\t\t\t\t\t * get_global in global initializer only works for imported globals.\n\t\t\t\t\t * They have the same indices as the init params, so use the\n\t\t\t\t\t * same index.\n\t\t\t\t\t */\n\t\t\t\t\tt.instruction(\"get_local\", [initialGlobalidx]),\n\t\t\t\t\tt.instruction(\"set_global\", [t.indexLiteral(newGlobals.length)])\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tnewGlobals.push(node);\n\n\t\t\tpath.remove();\n\t\t}\n\t});\n\n\t// Add global declaration instructions\n\treturn addWithAST(state.ast, bin, newGlobals);\n};\n\n/**\n * Rewrite the export names\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Module} state.module Module\n * @param {Set<string>} state.externalExports Module\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteExportNames = ({ ast, module, externalExports }) => bin => {\n\treturn editWithAST(ast, bin, {\n\t\tModuleExport(path) {\n\t\t\tconst isExternal = externalExports.has(path.node.name);\n\t\t\tif (isExternal) {\n\t\t\t\tpath.remove();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst usedName = module.isUsed(path.node.name);\n\t\t\tif (!usedName) {\n\t\t\t\tpath.remove();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpath.node.name = usedName;\n\t\t}\n\t});\n};\n\n/**\n * Mangle import names and modules\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Map<string, UsedWasmDependency>} state.usedDependencyMap mappings to mangle names\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImports = ({ ast, usedDependencyMap }) => bin => {\n\treturn editWithAST(ast, bin, {\n\t\tModuleImport(path) {\n\t\t\tconst result = usedDependencyMap.get(\n\t\t\t\tpath.node.module + \":\" + path.node.name\n\t\t\t);\n\n\t\t\tif (result !== undefined) {\n\t\t\t\tpath.node.module = result.module;\n\t\t\t\tpath.node.name = result.name;\n\t\t\t}\n\t\t}\n\t});\n};\n\n/**\n * Add an init function.\n *\n * The init function fills the globals given input arguments.\n *\n * @param {Object} state transformation state\n * @param {Object} state.ast Module's ast\n * @param {t.Identifier} state.initFuncId identifier of the init function\n * @param {t.Index} state.startAtFuncOffset index of the start function\n * @param {t.ModuleImport[]} state.importedGlobals list of imported globals\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @param {t.Index} state.nextFuncIndex index of the next function\n * @param {t.Index} state.nextTypeIndex index of the next type\n * @returns {ArrayBufferTransform} transform\n */\nconst addInitFunction = ({\n\tast,\n\tinitFuncId,\n\tstartAtFuncOffset,\n\timportedGlobals,\n\tadditionalInitCode,\n\tnextFuncIndex,\n\tnextTypeIndex\n}) => bin => {\n\tconst funcParams = importedGlobals.map(importedGlobal => {\n\t\t// used for debugging\n\t\tconst id = t.identifier(`${importedGlobal.module}.${importedGlobal.name}`);\n\n\t\treturn t.funcParam(importedGlobal.descr.valtype, id);\n\t});\n\n\tconst funcBody = importedGlobals.reduce((acc, importedGlobal, index) => {\n\t\tconst args = [t.indexLiteral(index)];\n\t\tconst body = [\n\t\t\tt.instruction(\"get_local\", args),\n\t\t\tt.instruction(\"set_global\", args)\n\t\t];\n\n\t\treturn [...acc, ...body];\n\t}, []);\n\n\tif (typeof startAtFuncOffset === \"number\") {\n\t\tfuncBody.push(t.callInstruction(t.numberLiteralFromRaw(startAtFuncOffset)));\n\t}\n\n\tfor (const instr of additionalInitCode) {\n\t\tfuncBody.push(instr);\n\t}\n\n\tfuncBody.push(t.instruction(\"end\"));\n\n\tconst funcResults = [];\n\n\t// Code section\n\tconst funcSignature = t.signature(funcParams, funcResults);\n\tconst func = t.func(initFuncId, funcSignature, funcBody);\n\n\t// Type section\n\tconst functype = t.typeInstruction(undefined, funcSignature);\n\n\t// Func section\n\tconst funcindex = t.indexInFuncSection(nextTypeIndex);\n\n\t// Export section\n\tconst moduleExport = t.moduleExport(\n\t\tinitFuncId.value,\n\t\tt.moduleExportDescr(\"Func\", nextFuncIndex)\n\t);\n\n\treturn addWithAST(ast, bin, [func, moduleExport, funcindex, functype]);\n};\n\n/**\n * Extract mangle mappings from module\n * @param {Module} module current module\n * @param {boolean} mangle mangle imports\n * @returns {Map<string, UsedWasmDependency>} mappings to mangled names\n */\nconst getUsedDependencyMap = (module, mangle) => {\n\t/** @type {Map<string, UsedWasmDependency>} */\n\tconst map = new Map();\n\tfor (const usedDep of WebAssemblyUtils.getUsedDependencies(module, mangle)) {\n\t\tconst dep = usedDep.dependency;\n\t\tconst request = dep.request;\n\t\tconst exportName = dep.name;\n\t\tmap.set(request + \":\" + exportName, usedDep);\n\t}\n\treturn map;\n};\n\nclass WebAssemblyGenerator extends Generator {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n\t * @param {RuntimeTemplate} runtimeTemplate the runtime template\n\t * @param {string} type which kind of code should be generated\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, dependencyTemplates, runtimeTemplate, type) {\n\t\tlet bin = module.originalSource().source();\n\n\t\tconst initFuncId = t.identifier(\n\t\t\tArray.isArray(module.usedExports)\n\t\t\t\t? Template.numberToIdentifer(module.usedExports.length)\n\t\t\t\t: \"__webpack_init__\"\n\t\t);\n\n\t\t// parse it\n\t\tconst ast = decode(bin, {\n\t\t\tignoreDataSection: true,\n\t\t\tignoreCodeSection: true,\n\t\t\tignoreCustomNameSection: true\n\t\t});\n\n\t\tconst moduleContext = moduleContextFromModuleAST(ast.body[0]);\n\n\t\tconst importedGlobals = getImportedGlobals(ast);\n\t\tconst countImportedFunc = getCountImportedFunc(ast);\n\t\tconst startAtFuncOffset = moduleContext.getStart();\n\t\tconst nextFuncIndex = getNextFuncIndex(ast, countImportedFunc);\n\t\tconst nextTypeIndex = getNextTypeIndex(ast);\n\n\t\tconst usedDependencyMap = getUsedDependencyMap(\n\t\t\tmodule,\n\t\t\tthis.options.mangleImports\n\t\t);\n\t\tconst externalExports = new Set(\n\t\t\tmodule.dependencies\n\t\t\t\t.filter(d => d instanceof WebAssemblyExportImportedDependency)\n\t\t\t\t.map(d => {\n\t\t\t\t\tconst wasmDep = /** @type {WebAssemblyExportImportedDependency} */ (d);\n\t\t\t\t\treturn wasmDep.exportName;\n\t\t\t\t})\n\t\t);\n\n\t\t/** @type {t.Instruction[]} */\n\t\tconst additionalInitCode = [];\n\n\t\tconst transform = compose(\n\t\t\trewriteExportNames({\n\t\t\t\tast,\n\t\t\t\tmodule,\n\t\t\t\texternalExports\n\t\t\t}),\n\n\t\t\tremoveStartFunc({ ast }),\n\n\t\t\trewriteImportedGlobals({ ast, additionalInitCode }),\n\n\t\t\trewriteImports({\n\t\t\t\tast,\n\t\t\t\tusedDependencyMap\n\t\t\t}),\n\n\t\t\taddInitFunction({\n\t\t\t\tast,\n\t\t\t\tinitFuncId,\n\t\t\t\timportedGlobals,\n\t\t\t\tadditionalInitCode,\n\t\t\t\tstartAtFuncOffset,\n\t\t\t\tnextFuncIndex,\n\t\t\t\tnextTypeIndex\n\t\t\t})\n\t\t);\n\n\t\tconst newBin = transform(bin);\n\n\t\treturn new RawSource(newBin);\n\t}\n}\n\nmodule.exports = WebAssemblyGenerator;\n"]},"metadata":{},"sourceType":"script"}