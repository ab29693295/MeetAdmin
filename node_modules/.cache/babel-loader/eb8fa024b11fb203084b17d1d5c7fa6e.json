{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n\nconst HotUpdateChunk = require(\"./HotUpdateChunk\");\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\n\nconst stringifyIdSortPredicate = (a, b) => {\n  const aId = a.id + \"\";\n  const bId = b.id + \"\";\n  if (aId < bId) return -1;\n  if (aId > bId) return 1;\n  return 0;\n};\n\nclass Template {\n  /**\n   *\n   * @param {Function} fn a runtime function (.runtime.js) \"template\"\n   * @returns {string} the updated and normalized function string\n   */\n  static getFunctionContent(fn) {\n    return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n  }\n  /**\n   * @param {string} str the string converted to identifier\n   * @returns {string} created identifier\n   */\n\n\n  static toIdentifier(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n  }\n  /**\n   *\n   * @param {string} str string to be converted to commented in bundle code\n   * @returns {string} returns a commented version of string\n   */\n\n\n  static toComment(str) {\n    if (!str) return \"\";\n    return `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n  /**\n   *\n   * @param {string} str string to be converted to \"normal comment\"\n   * @returns {string} returns a commented version of string\n   */\n\n\n  static toNormalComment(str) {\n    if (!str) return \"\";\n    return `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n  /**\n   * @param {string} str string path to be normalized\n   * @returns {string} normalized bundle-safe path\n   */\n\n\n  static toPath(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n  } // map number to a single character a-z, A-Z or <_ + number> if number is too big\n\n  /**\n   *\n   * @param {number} n number to convert to ident\n   * @returns {string} returns single character ident\n   */\n\n\n  static numberToIdentifer(n) {\n    // lower case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n    } // upper case\n\n\n    if (n < DELTA_A_TO_Z * 2) {\n      return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z);\n    } // use multiple letters\n\n\n    return Template.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) + Template.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)));\n  }\n  /**\n   *\n   * @param {string | string[]} s string to convert to identity\n   * @returns {string} converted identity\n   */\n\n\n  static indent(s) {\n    if (Array.isArray(s)) {\n      return s.map(Template.indent).join(\"\\n\");\n    } else {\n      const str = s.trimRight();\n      if (!str) return \"\";\n      const ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n    }\n  }\n  /**\n   *\n   * @param {string|string[]} s string to create prefix for\n   * @param {string} prefix prefix to compose\n   * @returns {string} returns new prefix string\n   */\n\n\n  static prefix(s, prefix) {\n    const str = Template.asString(s).trim();\n    if (!str) return \"\";\n    const ind = str[0] === \"\\n\" ? \"\" : prefix;\n    return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n  }\n  /**\n   *\n   * @param {string|string[]} str string or string collection\n   * @returns {string} returns a single string from array\n   */\n\n\n  static asString(str) {\n    if (Array.isArray(str)) {\n      return str.join(\"\\n\");\n    }\n\n    return str;\n  }\n  /**\n   * @typedef {Object} WithId\n   * @property {string|number} id\n   */\n\n  /**\n   * @param {WithId[]} modules a collection of modules to get array bounds for\n   * @returns {[number, number] | false} returns the upper and lower array bounds\n   * or false if not every module has a number based id\n   */\n\n\n  static getModulesArrayBounds(modules) {\n    let maxId = -Infinity;\n    let minId = Infinity;\n\n    for (const module of modules) {\n      if (typeof module.id !== \"number\") return false;\n      if (maxId < module.id) maxId =\n      /** @type {number} */\n      module.id;\n      if (minId > module.id) minId =\n      /** @type {number} */\n      module.id;\n    }\n\n    if (minId < 16 + (\"\" + minId).length) {\n      // add minId x ',' instead of 'Array(minId).concat(…)'\n      minId = 0;\n    }\n\n    const objectOverhead = modules.map(module => (module.id + \"\").length + 2).reduce((a, b) => a + b, -1);\n    const arrayOverhead = minId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n    return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n  }\n  /**\n   * @param {Chunk} chunk chunk whose modules will be rendered\n   * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n   * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n   * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n   * @param {string=} prefix applying prefix strings\n   * @returns {ConcatSource} rendered chunk modules in a Source object\n   */\n\n\n  static renderChunkModules(chunk, filterFn, moduleTemplate, dependencyTemplates, prefix = \"\") {\n    const source = new ConcatSource();\n    const modules = chunk.getModules().filter(filterFn);\n    let removedModules;\n\n    if (chunk instanceof HotUpdateChunk) {\n      removedModules = chunk.removedModules;\n    }\n\n    if (modules.length === 0 && (!removedModules || removedModules.length === 0)) {\n      source.add(\"[]\");\n      return source;\n    }\n    /** @type {{id: string|number, source: Source|string}[]} */\n\n\n    const allModules = modules.map(module => {\n      return {\n        id: module.id,\n        source: moduleTemplate.render(module, dependencyTemplates, {\n          chunk\n        })\n      };\n    });\n\n    if (removedModules && removedModules.length > 0) {\n      for (const id of removedModules) {\n        allModules.push({\n          id,\n          source: \"false\"\n        });\n      }\n    }\n\n    const bounds = Template.getModulesArrayBounds(allModules);\n\n    if (bounds) {\n      // Render a spare array\n      const minId = bounds[0];\n      const maxId = bounds[1];\n\n      if (minId !== 0) {\n        source.add(`Array(${minId}).concat(`);\n      }\n\n      source.add(\"[\\n\");\n      /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\n      const modules = new Map();\n\n      for (const module of allModules) {\n        modules.set(module.id, module);\n      }\n\n      for (let idx = minId; idx <= maxId; idx++) {\n        const module = modules.get(idx);\n\n        if (idx !== minId) {\n          source.add(\",\\n\");\n        }\n\n        source.add(`/* ${idx} */`);\n\n        if (module) {\n          source.add(\"\\n\");\n          source.add(module.source);\n        }\n      }\n\n      source.add(\"\\n\" + prefix + \"]\");\n\n      if (minId !== 0) {\n        source.add(\")\");\n      }\n    } else {\n      // Render an object\n      source.add(\"{\\n\");\n      allModules.sort(stringifyIdSortPredicate).forEach((module, idx) => {\n        if (idx !== 0) {\n          source.add(\",\\n\");\n        }\n\n        source.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n        source.add(module.source);\n      });\n      source.add(`\\n\\n${prefix}}`);\n    }\n\n    return source;\n  }\n\n}\n\nmodule.exports = Template;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/Template.js"],"names":["ConcatSource","require","HotUpdateChunk","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","stringifyIdSortPredicate","a","b","aId","id","bId","Template","getFunctionContent","fn","toString","replace","toIdentifier","str","toComment","toNormalComment","toPath","numberToIdentifer","n","String","fromCharCode","Math","floor","indent","s","Array","isArray","map","join","trimRight","ind","prefix","asString","trim","getModulesArrayBounds","modules","maxId","Infinity","minId","module","length","objectOverhead","reduce","arrayOverhead","renderChunkModules","chunk","filterFn","moduleTemplate","dependencyTemplates","source","getModules","filter","removedModules","add","allModules","render","push","bounds","Map","set","idx","get","sort","forEach","JSON","stringify","exports"],"mappings":"AAAA;;;;;AAIA;;AACA;;AACA;;AACA;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,iBAAD,CAAhC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;;AAEA,MAAME,6BAA6B,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAtC;AACA,MAAMC,6BAA6B,GAAG,IAAID,UAAJ,CAAe,CAAf,CAAtC;AACA,MAAME,YAAY,GAAG,IAAIF,UAAJ,CAAe,CAAf,IAAoBD,6BAApB,GAAoD,CAAzE;AACA,MAAMI,sBAAsB,GAAG,wCAA/B;AACA,MAAMC,sBAAsB,GAAG,OAA/B;AACA,MAAMC,oBAAoB,GAAG,QAA7B;AACA,MAAMC,6BAA6B,GAAG,gBAAtC;AACA,MAAMC,2CAA2C,GAAG,iBAApD;AACA,MAAMC,iBAAiB,GAAG,OAA1B;AACA,MAAMC,iCAAiC,GAAG,2BAA1C;AACA,MAAMC,kCAAkC,GAAG,QAA3C;AAEA;;AAEA;;;;;AAKA;;;;AAIA;;;;;;AAKA,MAAMC,wBAAwB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1C,QAAMC,GAAG,GAAGF,CAAC,CAACG,EAAF,GAAO,EAAnB;AACA,QAAMC,GAAG,GAAGH,CAAC,CAACE,EAAF,GAAO,EAAnB;AACA,MAAID,GAAG,GAAGE,GAAV,EAAe,OAAO,CAAC,CAAR;AACf,MAAIF,GAAG,GAAGE,GAAV,EAAe,OAAO,CAAP;AACf,SAAO,CAAP;AACA,CAND;;AAQA,MAAMC,QAAN,CAAe;AACd;;;;;AAKA,SAAOC,kBAAP,CAA0BC,EAA1B,EAA8B;AAC7B,WAAOA,EAAE,CACPC,QADK,GAELC,OAFK,CAEGlB,sBAFH,EAE2B,EAF3B,EAGLkB,OAHK,CAGGjB,sBAHH,EAG2B,EAH3B,EAILiB,OAJK,CAIGhB,oBAJH,EAIyB,IAJzB,CAAP;AAKA;AAED;;;;;;AAIA,SAAOiB,YAAP,CAAoBC,GAApB,EAAyB;AACxB,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAO,EAAP;AAC7B,WAAOA,GAAG,CACRF,OADK,CACGf,6BADH,EACkC,KADlC,EAELe,OAFK,CAEGd,2CAFH,EAEgD,GAFhD,CAAP;AAGA;AACD;;;;;;;AAKA,SAAOiB,SAAP,CAAiBD,GAAjB,EAAsB;AACrB,QAAI,CAACA,GAAL,EAAU,OAAO,EAAP;AACV,WAAQ,OAAMA,GAAG,CAACF,OAAJ,CAAYb,iBAAZ,EAA+B,KAA/B,CAAsC,KAApD;AACA;AAED;;;;;;;AAKA,SAAOiB,eAAP,CAAuBF,GAAvB,EAA4B;AAC3B,QAAI,CAACA,GAAL,EAAU,OAAO,EAAP;AACV,WAAQ,MAAKA,GAAG,CAACF,OAAJ,CAAYb,iBAAZ,EAA+B,KAA/B,CAAsC,KAAnD;AACA;AAED;;;;;;AAIA,SAAOkB,MAAP,CAAcH,GAAd,EAAmB;AAClB,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAO,EAAP;AAC7B,WAAOA,GAAG,CACRF,OADK,CACGZ,iCADH,EACsC,GADtC,EAELY,OAFK,CAEGX,kCAFH,EAEuC,EAFvC,CAAP;AAGA,GArDa,CAuDd;;AACA;;;;;;;AAKA,SAAOiB,iBAAP,CAAyBC,CAAzB,EAA4B;AAC3B;AACA,QAAIA,CAAC,GAAG1B,YAAR,EAAsB;AACrB,aAAO2B,MAAM,CAACC,YAAP,CAAoB/B,6BAA6B,GAAG6B,CAApD,CAAP;AACA,KAJ0B,CAM3B;;;AACA,QAAIA,CAAC,GAAG1B,YAAY,GAAG,CAAvB,EAA0B;AACzB,aAAO2B,MAAM,CAACC,YAAP,CACN7B,6BAA6B,GAAG2B,CAAhC,GAAoC1B,YAD9B,CAAP;AAGA,KAX0B,CAa3B;;;AACA,WACCe,QAAQ,CAACU,iBAAT,CAA2BC,CAAC,IAAI,IAAI1B,YAAR,CAA5B,IACAe,QAAQ,CAACU,iBAAT,CAA2BI,IAAI,CAACC,KAAL,CAAWJ,CAAC,IAAI,IAAI1B,YAAR,CAAZ,CAA3B,CAFD;AAIA;AAED;;;;;;;AAKA,SAAO+B,MAAP,CAAcC,CAAd,EAAiB;AAChB,QAAIC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAJ,EAAsB;AACrB,aAAOA,CAAC,CAACG,GAAF,CAAMpB,QAAQ,CAACgB,MAAf,EAAuBK,IAAvB,CAA4B,IAA5B,CAAP;AACA,KAFD,MAEO;AACN,YAAMf,GAAG,GAAGW,CAAC,CAACK,SAAF,EAAZ;AACA,UAAI,CAAChB,GAAL,EAAU,OAAO,EAAP;AACV,YAAMiB,GAAG,GAAGjB,GAAG,CAAC,CAAD,CAAH,KAAW,IAAX,GAAkB,EAAlB,GAAuB,IAAnC;AACA,aAAOiB,GAAG,GAAGjB,GAAG,CAACF,OAAJ,CAAY,YAAZ,EAA0B,QAA1B,CAAb;AACA;AACD;AAED;;;;;;;;AAMA,SAAOoB,MAAP,CAAcP,CAAd,EAAiBO,MAAjB,EAAyB;AACxB,UAAMlB,GAAG,GAAGN,QAAQ,CAACyB,QAAT,CAAkBR,CAAlB,EAAqBS,IAArB,EAAZ;AACA,QAAI,CAACpB,GAAL,EAAU,OAAO,EAAP;AACV,UAAMiB,GAAG,GAAGjB,GAAG,CAAC,CAAD,CAAH,KAAW,IAAX,GAAkB,EAAlB,GAAuBkB,MAAnC;AACA,WAAOD,GAAG,GAAGjB,GAAG,CAACF,OAAJ,CAAY,YAAZ,EAA0B,OAAOoB,MAAP,GAAgB,IAA1C,CAAb;AACA;AAED;;;;;;;AAKA,SAAOC,QAAP,CAAgBnB,GAAhB,EAAqB;AACpB,QAAIY,KAAK,CAACC,OAAN,CAAcb,GAAd,CAAJ,EAAwB;AACvB,aAAOA,GAAG,CAACe,IAAJ,CAAS,IAAT,CAAP;AACA;;AACD,WAAOf,GAAP;AACA;AAED;;;;;AAKA;;;;;;;AAKA,SAAOqB,qBAAP,CAA6BC,OAA7B,EAAsC;AACrC,QAAIC,KAAK,GAAG,CAACC,QAAb;AACA,QAAIC,KAAK,GAAGD,QAAZ;;AACA,SAAK,MAAME,MAAX,IAAqBJ,OAArB,EAA8B;AAC7B,UAAI,OAAOI,MAAM,CAAClC,EAAd,KAAqB,QAAzB,EAAmC,OAAO,KAAP;AACnC,UAAI+B,KAAK,GAAGG,MAAM,CAAClC,EAAnB,EAAuB+B,KAAK;AAAG;AAAuBG,MAAAA,MAAM,CAAClC,EAAtC;AACvB,UAAIiC,KAAK,GAAGC,MAAM,CAAClC,EAAnB,EAAuBiC,KAAK;AAAG;AAAuBC,MAAAA,MAAM,CAAClC,EAAtC;AACvB;;AACD,QAAIiC,KAAK,GAAG,KAAK,CAAC,KAAKA,KAAN,EAAaE,MAA9B,EAAsC;AACrC;AACAF,MAAAA,KAAK,GAAG,CAAR;AACA;;AACD,UAAMG,cAAc,GAAGN,OAAO,CAC5BR,GADqB,CACjBY,MAAM,IAAI,CAACA,MAAM,CAAClC,EAAP,GAAY,EAAb,EAAiBmC,MAAjB,GAA0B,CADnB,EAErBE,MAFqB,CAEd,CAACxC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAFA,EAEG,CAAC,CAFJ,CAAvB;AAGA,UAAMwC,aAAa,GAClBL,KAAK,KAAK,CAAV,GAAcF,KAAd,GAAsB,KAAK,CAAC,KAAKE,KAAN,EAAaE,MAAlB,GAA2BJ,KADlD;AAEA,WAAOO,aAAa,GAAGF,cAAhB,GAAiC,CAACH,KAAD,EAAQF,KAAR,CAAjC,GAAkD,KAAzD;AACA;AAED;;;;;;;;;;AAQA,SAAOQ,kBAAP,CACCC,KADD,EAECC,QAFD,EAGCC,cAHD,EAICC,mBAJD,EAKCjB,MAAM,GAAG,EALV,EAME;AACD,UAAMkB,MAAM,GAAG,IAAI/D,YAAJ,EAAf;AACA,UAAMiD,OAAO,GAAGU,KAAK,CAACK,UAAN,GAAmBC,MAAnB,CAA0BL,QAA1B,CAAhB;AACA,QAAIM,cAAJ;;AACA,QAAIP,KAAK,YAAYzD,cAArB,EAAqC;AACpCgE,MAAAA,cAAc,GAAGP,KAAK,CAACO,cAAvB;AACA;;AACD,QACCjB,OAAO,CAACK,MAAR,KAAmB,CAAnB,KACC,CAACY,cAAD,IAAmBA,cAAc,CAACZ,MAAf,KAA0B,CAD9C,CADD,EAGE;AACDS,MAAAA,MAAM,CAACI,GAAP,CAAW,IAAX;AACA,aAAOJ,MAAP;AACA;AACD;;;AACA,UAAMK,UAAU,GAAGnB,OAAO,CAACR,GAAR,CAAYY,MAAM,IAAI;AACxC,aAAO;AACNlC,QAAAA,EAAE,EAAEkC,MAAM,CAAClC,EADL;AAEN4C,QAAAA,MAAM,EAAEF,cAAc,CAACQ,MAAf,CAAsBhB,MAAtB,EAA8BS,mBAA9B,EAAmD;AAC1DH,UAAAA;AAD0D,SAAnD;AAFF,OAAP;AAMA,KAPkB,CAAnB;;AAQA,QAAIO,cAAc,IAAIA,cAAc,CAACZ,MAAf,GAAwB,CAA9C,EAAiD;AAChD,WAAK,MAAMnC,EAAX,IAAiB+C,cAAjB,EAAiC;AAChCE,QAAAA,UAAU,CAACE,IAAX,CAAgB;AACfnD,UAAAA,EADe;AAEf4C,UAAAA,MAAM,EAAE;AAFO,SAAhB;AAIA;AACD;;AACD,UAAMQ,MAAM,GAAGlD,QAAQ,CAAC2B,qBAAT,CAA+BoB,UAA/B,CAAf;;AACA,QAAIG,MAAJ,EAAY;AACX;AACA,YAAMnB,KAAK,GAAGmB,MAAM,CAAC,CAAD,CAApB;AACA,YAAMrB,KAAK,GAAGqB,MAAM,CAAC,CAAD,CAApB;;AACA,UAAInB,KAAK,KAAK,CAAd,EAAiB;AAChBW,QAAAA,MAAM,CAACI,GAAP,CAAY,SAAQf,KAAM,WAA1B;AACA;;AACDW,MAAAA,MAAM,CAACI,GAAP,CAAW,KAAX;AACA;;AACA,YAAMlB,OAAO,GAAG,IAAIuB,GAAJ,EAAhB;;AACA,WAAK,MAAMnB,MAAX,IAAqBe,UAArB,EAAiC;AAChCnB,QAAAA,OAAO,CAACwB,GAAR,CAAYpB,MAAM,CAAClC,EAAnB,EAAuBkC,MAAvB;AACA;;AACD,WAAK,IAAIqB,GAAG,GAAGtB,KAAf,EAAsBsB,GAAG,IAAIxB,KAA7B,EAAoCwB,GAAG,EAAvC,EAA2C;AAC1C,cAAMrB,MAAM,GAAGJ,OAAO,CAAC0B,GAAR,CAAYD,GAAZ,CAAf;;AACA,YAAIA,GAAG,KAAKtB,KAAZ,EAAmB;AAClBW,UAAAA,MAAM,CAACI,GAAP,CAAW,KAAX;AACA;;AACDJ,QAAAA,MAAM,CAACI,GAAP,CAAY,MAAKO,GAAI,KAArB;;AACA,YAAIrB,MAAJ,EAAY;AACXU,UAAAA,MAAM,CAACI,GAAP,CAAW,IAAX;AACAJ,UAAAA,MAAM,CAACI,GAAP,CAAWd,MAAM,CAACU,MAAlB;AACA;AACD;;AACDA,MAAAA,MAAM,CAACI,GAAP,CAAW,OAAOtB,MAAP,GAAgB,GAA3B;;AACA,UAAIO,KAAK,KAAK,CAAd,EAAiB;AAChBW,QAAAA,MAAM,CAACI,GAAP,CAAW,GAAX;AACA;AACD,KA5BD,MA4BO;AACN;AACAJ,MAAAA,MAAM,CAACI,GAAP,CAAW,KAAX;AACAC,MAAAA,UAAU,CAACQ,IAAX,CAAgB7D,wBAAhB,EAA0C8D,OAA1C,CAAkD,CAACxB,MAAD,EAASqB,GAAT,KAAiB;AAClE,YAAIA,GAAG,KAAK,CAAZ,EAAe;AACdX,UAAAA,MAAM,CAACI,GAAP,CAAW,KAAX;AACA;;AACDJ,QAAAA,MAAM,CAACI,GAAP,CAAY,WAAUW,IAAI,CAACC,SAAL,CAAe1B,MAAM,CAAClC,EAAtB,CAA0B,KAAhD;AACA4C,QAAAA,MAAM,CAACI,GAAP,CAAWd,MAAM,CAACU,MAAlB;AACA,OAND;AAOAA,MAAAA,MAAM,CAACI,GAAP,CAAY,OAAMtB,MAAO,GAAzB;AACA;;AACD,WAAOkB,MAAP;AACA;;AA/Oa;;AAkPfV,MAAM,CAAC2B,OAAP,GAAiB3D,QAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst HotUpdateChunk = require(\"./HotUpdateChunk\");\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\nconst stringifyIdSortPredicate = (a, b) => {\n\tconst aId = a.id + \"\";\n\tconst bId = b.id + \"\";\n\tif (aId < bId) return -1;\n\tif (aId > bId) return 1;\n\treturn 0;\n};\n\nclass Template {\n\t/**\n\t *\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\n\t * @returns {string} the updated and normalized function string\n\t */\n\tstatic getFunctionContent(fn) {\n\t\treturn fn\n\t\t\t.toString()\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\n\t}\n\n\t/**\n\t * @param {string} str the string converted to identifier\n\t * @returns {string} created identifier\n\t */\n\tstatic toIdentifier(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n\t}\n\t/**\n\t *\n\t * @param {string} str string to be converted to commented in bundle code\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t *\n\t * @param {string} str string to be converted to \"normal comment\"\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toNormalComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t * @param {string} str string path to be normalized\n\t * @returns {string} normalized bundle-safe path\n\t */\n\tstatic toPath(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n\t}\n\n\t// map number to a single character a-z, A-Z or <_ + number> if number is too big\n\t/**\n\t *\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifer(n) {\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z * 2) {\n\t\t\treturn String.fromCharCode(\n\t\t\t\tSTART_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z\n\t\t\t);\n\t\t}\n\n\t\t// use multiple letters\n\t\treturn (\n\t\t\tTemplate.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) +\n\t\t\tTemplate.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)))\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param {string | string[]} s string to convert to identity\n\t * @returns {string} converted identity\n\t */\n\tstatic indent(s) {\n\t\tif (Array.isArray(s)) {\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\n\t\t} else {\n\t\t\tconst str = s.trimRight();\n\t\t\tif (!str) return \"\";\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} s string to create prefix for\n\t * @param {string} prefix prefix to compose\n\t * @returns {string} returns new prefix string\n\t */\n\tstatic prefix(s, prefix) {\n\t\tconst str = Template.asString(s).trim();\n\t\tif (!str) return \"\";\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} str string or string collection\n\t * @returns {string} returns a single string from array\n\t */\n\tstatic asString(str) {\n\t\tif (Array.isArray(str)) {\n\t\t\treturn str.join(\"\\n\");\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @typedef {Object} WithId\n\t * @property {string|number} id\n\t */\n\n\t/**\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\n\t * or false if not every module has a number based id\n\t */\n\tstatic getModulesArrayBounds(modules) {\n\t\tlet maxId = -Infinity;\n\t\tlet minId = Infinity;\n\t\tfor (const module of modules) {\n\t\t\tif (typeof module.id !== \"number\") return false;\n\t\t\tif (maxId < module.id) maxId = /** @type {number} */ (module.id);\n\t\t\tif (minId > module.id) minId = /** @type {number} */ (module.id);\n\t\t}\n\t\tif (minId < 16 + (\"\" + minId).length) {\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\n\t\t\tminId = 0;\n\t\t}\n\t\tconst objectOverhead = modules\n\t\t\t.map(module => (module.id + \"\").length + 2)\n\t\t\t.reduce((a, b) => a + b, -1);\n\t\tconst arrayOverhead =\n\t\t\tminId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk whose modules will be rendered\n\t * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n\t * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n\t * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n\t * @param {string=} prefix applying prefix strings\n\t * @returns {ConcatSource} rendered chunk modules in a Source object\n\t */\n\tstatic renderChunkModules(\n\t\tchunk,\n\t\tfilterFn,\n\t\tmoduleTemplate,\n\t\tdependencyTemplates,\n\t\tprefix = \"\"\n\t) {\n\t\tconst source = new ConcatSource();\n\t\tconst modules = chunk.getModules().filter(filterFn);\n\t\tlet removedModules;\n\t\tif (chunk instanceof HotUpdateChunk) {\n\t\t\tremovedModules = chunk.removedModules;\n\t\t}\n\t\tif (\n\t\t\tmodules.length === 0 &&\n\t\t\t(!removedModules || removedModules.length === 0)\n\t\t) {\n\t\t\tsource.add(\"[]\");\n\t\t\treturn source;\n\t\t}\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\n\t\tconst allModules = modules.map(module => {\n\t\t\treturn {\n\t\t\t\tid: module.id,\n\t\t\t\tsource: moduleTemplate.render(module, dependencyTemplates, {\n\t\t\t\t\tchunk\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t\tif (removedModules && removedModules.length > 0) {\n\t\t\tfor (const id of removedModules) {\n\t\t\t\tallModules.push({\n\t\t\t\t\tid,\n\t\t\t\t\tsource: \"false\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\n\t\tif (bounds) {\n\t\t\t// Render a spare array\n\t\t\tconst minId = bounds[0];\n\t\t\tconst maxId = bounds[1];\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\n\t\t\t}\n\t\t\tsource.add(\"[\\n\");\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\t\t\tconst modules = new Map();\n\t\t\tfor (const module of allModules) {\n\t\t\t\tmodules.set(module.id, module);\n\t\t\t}\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\n\t\t\t\tconst module = modules.get(idx);\n\t\t\t\tif (idx !== minId) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`/* ${idx} */`);\n\t\t\t\tif (module) {\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t\tsource.add(module.source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(\")\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Render an object\n\t\t\tsource.add(\"{\\n\");\n\t\t\tallModules.sort(stringifyIdSortPredicate).forEach((module, idx) => {\n\t\t\t\tif (idx !== 0) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n\t\t\t\tsource.add(module.source);\n\t\t\t});\n\t\t\tsource.add(`\\n\\n${prefix}}`);\n\t\t}\n\t\treturn source;\n\t}\n}\n\nmodule.exports = Template;\n"]},"metadata":{},"sourceType":"script"}