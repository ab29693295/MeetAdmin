{"ast":null,"code":"\"use strict\";\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\n\nclass SortableSet extends Set {\n  /**\n   * Create a new sortable set\n   * @param {Iterable<T>=} initialIterable The initial iterable value\n   * @typedef {function(T, T): number} SortFunction\n   * @param {SortFunction=} defaultSort Default sorting function\n   */\n  constructor(initialIterable, defaultSort) {\n    super(initialIterable);\n    /** @private @type {function(T, T): number}} */\n\n    this._sortFn = defaultSort;\n    /** @private @type {function(T, T): number} | null} */\n\n    this._lastActiveSortFn = null;\n    /** @private @type {Map<Function, T[]> | undefined} */\n\n    this._cache = undefined;\n    /** @private @type {Map<Function, T[]|string|number> | undefined} */\n\n    this._cacheOrderIndependent = undefined;\n  }\n  /**\n   * @param {T} value value to add to set\n   * @returns {this} returns itself\n   */\n\n\n  add(value) {\n    this._lastActiveSortFn = null;\n\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    super.add(value);\n    return this;\n  }\n  /**\n   * @param {T} value value to delete\n   * @returns {boolean} true if value existed in set, false otherwise\n   */\n\n\n  delete(value) {\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    return super.delete(value);\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    return super.clear();\n  }\n  /**\n   * Sort with a comparer function\n   * @param {SortFunction} sortFn Sorting comparer function\n   * @returns {void}\n   */\n\n\n  sortWith(sortFn) {\n    if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n      // already sorted - nothing to do\n      return;\n    }\n\n    const sortedArray = Array.from(this).sort(sortFn);\n    super.clear();\n\n    for (let i = 0; i < sortedArray.length; i += 1) {\n      super.add(sortedArray[i]);\n    }\n\n    this._lastActiveSortFn = sortFn;\n\n    this._invalidateCache();\n  }\n\n  sort() {\n    this.sortWith(this._sortFn);\n  }\n  /**\n   * Get data from cache\n   * @param {function(SortableSet<T>): T[]} fn function to calculate value\n   * @returns {T[]} returns result of fn(this), cached until set changes\n   */\n\n\n  getFromCache(fn) {\n    if (this._cache === undefined) {\n      this._cache = new Map();\n    } else {\n      const data = this._cache.get(fn);\n\n      if (data !== undefined) {\n        return data;\n      }\n    }\n\n    const newData = fn(this);\n\n    this._cache.set(fn, newData);\n\n    return newData;\n  }\n  /**\n   * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value\n   * @returns {any} returns result of fn(this), cached until set changes\n   */\n\n\n  getFromUnorderedCache(fn) {\n    if (this._cacheOrderIndependent === undefined) {\n      this._cacheOrderIndependent = new Map();\n    } else {\n      const data = this._cacheOrderIndependent.get(fn);\n\n      if (data !== undefined) {\n        return data;\n      }\n    }\n\n    const newData = fn(this);\n\n    this._cacheOrderIndependent.set(fn, newData);\n\n    return newData;\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  _invalidateCache() {\n    if (this._cache !== undefined) {\n      this._cache.clear();\n    }\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  _invalidateOrderedCache() {\n    if (this._cacheOrderIndependent !== undefined) {\n      this._cacheOrderIndependent.clear();\n    }\n  }\n\n}\n\nmodule.exports = SortableSet;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/util/SortableSet.js"],"names":["SortableSet","Set","constructor","initialIterable","defaultSort","_sortFn","_lastActiveSortFn","_cache","undefined","_cacheOrderIndependent","add","value","_invalidateCache","_invalidateOrderedCache","delete","clear","sortWith","sortFn","size","sortedArray","Array","from","sort","i","length","getFromCache","fn","Map","data","get","newData","set","getFromUnorderedCache","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\nclass SortableSet extends Set {\n\t/**\n\t * Create a new sortable set\n\t * @param {Iterable<T>=} initialIterable The initial iterable value\n\t * @typedef {function(T, T): number} SortFunction\n\t * @param {SortFunction=} defaultSort Default sorting function\n\t */\n\tconstructor(initialIterable, defaultSort) {\n\t\tsuper(initialIterable);\n\t\t/** @private @type {function(T, T): number}} */\n\t\tthis._sortFn = defaultSort;\n\t\t/** @private @type {function(T, T): number} | null} */\n\t\tthis._lastActiveSortFn = null;\n\t\t/** @private @type {Map<Function, T[]> | undefined} */\n\t\tthis._cache = undefined;\n\t\t/** @private @type {Map<Function, T[]|string|number> | undefined} */\n\t\tthis._cacheOrderIndependent = undefined;\n\t}\n\n\t/**\n\t * @param {T} value value to add to set\n\t * @returns {this} returns itself\n\t */\n\tadd(value) {\n\t\tthis._lastActiveSortFn = null;\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\tsuper.add(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {T} value value to delete\n\t * @returns {boolean} true if value existed in set, false otherwise\n\t */\n\tdelete(value) {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.delete(value);\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tclear() {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.clear();\n\t}\n\n\t/**\n\t * Sort with a comparer function\n\t * @param {SortFunction} sortFn Sorting comparer function\n\t * @returns {void}\n\t */\n\tsortWith(sortFn) {\n\t\tif (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n\t\t\t// already sorted - nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst sortedArray = Array.from(this).sort(sortFn);\n\t\tsuper.clear();\n\t\tfor (let i = 0; i < sortedArray.length; i += 1) {\n\t\t\tsuper.add(sortedArray[i]);\n\t\t}\n\t\tthis._lastActiveSortFn = sortFn;\n\t\tthis._invalidateCache();\n\t}\n\n\tsort() {\n\t\tthis.sortWith(this._sortFn);\n\t}\n\n\t/**\n\t * Get data from cache\n\t * @param {function(SortableSet<T>): T[]} fn function to calculate value\n\t * @returns {T[]} returns result of fn(this), cached until set changes\n\t */\n\tgetFromCache(fn) {\n\t\tif (this._cache === undefined) {\n\t\t\tthis._cache = new Map();\n\t\t} else {\n\t\t\tconst data = this._cache.get(fn);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cache.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value\n\t * @returns {any} returns result of fn(this), cached until set changes\n\t */\n\tgetFromUnorderedCache(fn) {\n\t\tif (this._cacheOrderIndependent === undefined) {\n\t\t\tthis._cacheOrderIndependent = new Map();\n\t\t} else {\n\t\t\tconst data = this._cacheOrderIndependent.get(fn);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cacheOrderIndependent.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateCache() {\n\t\tif (this._cache !== undefined) {\n\t\t\tthis._cache.clear();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateOrderedCache() {\n\t\tif (this._cacheOrderIndependent !== undefined) {\n\t\t\tthis._cacheOrderIndependent.clear();\n\t\t}\n\t}\n}\n\nmodule.exports = SortableSet;\n"]},"metadata":{},"sourceType":"script"}