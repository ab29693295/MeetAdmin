{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\n\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass MultiEntryPlugin {\n  /**\n   * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n   * @param {string} context context path\n   * @param {string[]} entries array of entry paths\n   * @param {string} name entry key name\n   */\n  constructor(context, entries, name) {\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"MultiEntryPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const multiModuleFactory = new MultiModuleFactory();\n      compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n      compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n    });\n    compiler.hooks.make.tapAsync(\"MultiEntryPlugin\", (compilation, callback) => {\n      const {\n        context,\n        entries,\n        name\n      } = this;\n      const dep = MultiEntryPlugin.createDependency(entries, name);\n      compilation.addEntry(context, dep, name, callback);\n    });\n  }\n  /**\n   * @param {string[]} entries each entry path string\n   * @param {string} name name of the entry\n   * @returns {MultiEntryDependency} returns a constructed Dependency\n   */\n\n\n  static createDependency(entries, name) {\n    return new MultiEntryDependency(entries.map((e, idx) => {\n      const dep = new SingleEntryDependency(e); // Because entrypoints are not dependencies found in an\n      // existing module, we give it a synthetic id\n\n      dep.loc = {\n        name,\n        index: idx\n      };\n      return dep;\n    }), name);\n  }\n\n}\n\nmodule.exports = MultiEntryPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/MultiEntryPlugin.js"],"names":["MultiEntryDependency","require","SingleEntryDependency","MultiModuleFactory","MultiEntryPlugin","constructor","context","entries","name","apply","compiler","hooks","compilation","tap","normalModuleFactory","multiModuleFactory","dependencyFactories","set","make","tapAsync","callback","dep","createDependency","addEntry","map","e","idx","loc","index","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,qCAAD,CAApC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,sCAAD,CAArC;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAlC;AAEA;;;AAEA,MAAMG,gBAAN,CAAuB;AACtB;;;;;;AAMAC,EAAAA,WAAW,CAACC,OAAD,EAAUC,OAAV,EAAmBC,IAAnB,EAAyB;AACnC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA;AAED;;;;;;AAIAC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,kBADD,EAEC,CAACD,WAAD,EAAc;AAAEE,MAAAA;AAAF,KAAd,KAA0C;AACzC,YAAMC,kBAAkB,GAAG,IAAIZ,kBAAJ,EAA3B;AAEAS,MAAAA,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCjB,oBADD,EAECe,kBAFD;AAIAH,MAAAA,WAAW,CAACI,mBAAZ,CAAgCC,GAAhC,CACCf,qBADD,EAECY,mBAFD;AAIA,KAbF;AAgBAJ,IAAAA,QAAQ,CAACC,KAAT,CAAeO,IAAf,CAAoBC,QAApB,CACC,kBADD,EAEC,CAACP,WAAD,EAAcQ,QAAd,KAA2B;AAC1B,YAAM;AAAEd,QAAAA,OAAF;AAAWC,QAAAA,OAAX;AAAoBC,QAAAA;AAApB,UAA6B,IAAnC;AAEA,YAAMa,GAAG,GAAGjB,gBAAgB,CAACkB,gBAAjB,CAAkCf,OAAlC,EAA2CC,IAA3C,CAAZ;AACAI,MAAAA,WAAW,CAACW,QAAZ,CAAqBjB,OAArB,EAA8Be,GAA9B,EAAmCb,IAAnC,EAAyCY,QAAzC;AACA,KAPF;AASA;AAED;;;;;;;AAKA,SAAOE,gBAAP,CAAwBf,OAAxB,EAAiCC,IAAjC,EAAuC;AACtC,WAAO,IAAIR,oBAAJ,CACNO,OAAO,CAACiB,GAAR,CAAY,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACvB,YAAML,GAAG,GAAG,IAAInB,qBAAJ,CAA0BuB,CAA1B,CAAZ,CADuB,CAEvB;AACA;;AACAJ,MAAAA,GAAG,CAACM,GAAJ,GAAU;AACTnB,QAAAA,IADS;AAEToB,QAAAA,KAAK,EAAEF;AAFE,OAAV;AAIA,aAAOL,GAAP;AACA,KATD,CADM,EAWNb,IAXM,CAAP;AAaA;;AAhEqB;;AAmEvBqB,MAAM,CAACC,OAAP,GAAiB1B,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass MultiEntryPlugin {\n\t/**\n\t * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n\t * @param {string} context context path\n\t * @param {string[]} entries array of entry paths\n\t * @param {string} name entry key name\n\t */\n\tconstructor(context, entries, name) {\n\t\tthis.context = context;\n\t\tthis.entries = entries;\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst multiModuleFactory = new MultiModuleFactory();\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tMultiEntryDependency,\n\t\t\t\t\tmultiModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst { context, entries, name } = this;\n\n\t\t\t\tconst dep = MultiEntryPlugin.createDependency(entries, name);\n\t\t\t\tcompilation.addEntry(context, dep, name, callback);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {string[]} entries each entry path string\n\t * @param {string} name name of the entry\n\t * @returns {MultiEntryDependency} returns a constructed Dependency\n\t */\n\tstatic createDependency(entries, name) {\n\t\treturn new MultiEntryDependency(\n\t\t\tentries.map((e, idx) => {\n\t\t\t\tconst dep = new SingleEntryDependency(e);\n\t\t\t\t// Because entrypoints are not dependencies found in an\n\t\t\t\t// existing module, we give it a synthetic id\n\t\t\t\tdep.loc = {\n\t\t\t\t\tname,\n\t\t\t\t\tindex: idx\n\t\t\t\t};\n\t\t\t\treturn dep;\n\t\t\t}),\n\t\t\tname\n\t\t);\n\t}\n}\n\nmodule.exports = MultiEntryPlugin;\n"]},"metadata":{},"sourceType":"script"}