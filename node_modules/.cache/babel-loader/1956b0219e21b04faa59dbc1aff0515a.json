{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\n\nclass LoaderOptionsPlugin {\n  /**\n   * @param {LoaderOptionsPluginOptions} options options object\n   */\n  constructor(options) {\n    validateOptions(schema, options || {}, \"Loader Options Plugin\");\n    if (typeof options !== \"object\") options = {};\n\n    if (!options.test) {\n      options.test = {\n        test: () => true\n      };\n    }\n\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", compilation => {\n      compilation.hooks.normalModuleLoader.tap(\"LoaderOptionsPlugin\", (context, module) => {\n        const resource = module.resource;\n        if (!resource) return;\n        const i = resource.indexOf(\"?\");\n\n        if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.substr(0, i))) {\n          for (const key of Object.keys(options)) {\n            if (key === \"include\" || key === \"exclude\" || key === \"test\") {\n              continue;\n            }\n\n            context[key] = options[key];\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = LoaderOptionsPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/LoaderOptionsPlugin.js"],"names":["ModuleFilenameHelpers","require","validateOptions","schema","LoaderOptionsPlugin","constructor","options","test","apply","compiler","hooks","compilation","tap","normalModuleLoader","context","module","resource","i","indexOf","matchObject","substr","key","Object","keys","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAArC;;AAEA,MAAMC,eAAe,GAAGD,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,6CAAD,CAAtB;AAEA;;;AAEA,MAAMG,mBAAN,CAA0B;AACzB;;;AAGAC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpBJ,IAAAA,eAAe,CAACC,MAAD,EAASG,OAAO,IAAI,EAApB,EAAwB,uBAAxB,CAAf;AAEA,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCA,OAAO,GAAG,EAAV;;AACjC,QAAI,CAACA,OAAO,CAACC,IAAb,EAAmB;AAClBD,MAAAA,OAAO,CAACC,IAAR,GAAe;AACdA,QAAAA,IAAI,EAAE,MAAM;AADE,OAAf;AAGA;;AACD,SAAKD,OAAL,GAAeA,OAAf;AACA;;AAEDE,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMH,OAAO,GAAG,KAAKA,OAArB;AACAG,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,qBAA/B,EAAsDD,WAAW,IAAI;AACpEA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,kBAAlB,CAAqCD,GAArC,CACC,qBADD,EAEC,CAACE,OAAD,EAAUC,MAAV,KAAqB;AACpB,cAAMC,QAAQ,GAAGD,MAAM,CAACC,QAAxB;AACA,YAAI,CAACA,QAAL,EAAe;AACf,cAAMC,CAAC,GAAGD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,CAAV;;AACA,YACClB,qBAAqB,CAACmB,WAAtB,CACCb,OADD,EAECW,CAAC,GAAG,CAAJ,GAAQD,QAAR,GAAmBA,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmBH,CAAnB,CAFpB,CADD,EAKE;AACD,eAAK,MAAMI,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYjB,OAAZ,CAAlB,EAAwC;AACvC,gBAAIe,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,SAA7B,IAA0CA,GAAG,KAAK,MAAtD,EAA8D;AAC7D;AACA;;AACDP,YAAAA,OAAO,CAACO,GAAD,CAAP,GAAef,OAAO,CAACe,GAAD,CAAtB;AACA;AACD;AACD,OAnBF;AAqBA,KAtBD;AAuBA;;AAzCwB;;AA4C1BN,MAAM,CAACS,OAAP,GAAiBpB,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\nclass LoaderOptionsPlugin {\n\t/**\n\t * @param {LoaderOptionsPluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options || {}, \"Loader Options Plugin\");\n\n\t\tif (typeof options !== \"object\") options = {};\n\t\tif (!options.test) {\n\t\t\toptions.test = {\n\t\t\t\ttest: () => true\n\t\t\t};\n\t\t}\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", compilation => {\n\t\t\tcompilation.hooks.normalModuleLoader.tap(\n\t\t\t\t\"LoaderOptionsPlugin\",\n\t\t\t\t(context, module) => {\n\t\t\t\t\tconst resource = module.resource;\n\t\t\t\t\tif (!resource) return;\n\t\t\t\t\tconst i = resource.indexOf(\"?\");\n\t\t\t\t\tif (\n\t\t\t\t\t\tModuleFilenameHelpers.matchObject(\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\ti < 0 ? resource : resource.substr(0, i)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tfor (const key of Object.keys(options)) {\n\t\t\t\t\t\t\tif (key === \"include\" || key === \"exclude\" || key === \"test\") {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontext[key] = options[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = LoaderOptionsPlugin;\n"]},"metadata":{},"sourceType":"script"}