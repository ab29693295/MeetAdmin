{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n\nconst MultiEntryPlugin = require(\"./MultiEntryPlugin\");\n\nconst DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryItem} EntryItem */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string} context context path\n * @param {EntryItem} item entry array or single path\n * @param {string} name entry key name\n * @returns {SingleEntryPlugin | MultiEntryPlugin} returns either a single or multi entry plugin\n */\n\n\nconst itemToPlugin = (context, item, name) => {\n  if (Array.isArray(item)) {\n    return new MultiEntryPlugin(context, item, name);\n  }\n\n  return new SingleEntryPlugin(context, item, name);\n};\n\nmodule.exports = class EntryOptionPlugin {\n  /**\n   * @param {Compiler} compiler the compiler instance one is tapping into\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n      if (typeof entry === \"string\" || Array.isArray(entry)) {\n        itemToPlugin(context, entry, \"main\").apply(compiler);\n      } else if (typeof entry === \"object\") {\n        for (const name of Object.keys(entry)) {\n          itemToPlugin(context, entry[name], name).apply(compiler);\n        }\n      } else if (typeof entry === \"function\") {\n        new DynamicEntryPlugin(context, entry).apply(compiler);\n      }\n\n      return true;\n    });\n  }\n\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/EntryOptionPlugin.js"],"names":["SingleEntryPlugin","require","MultiEntryPlugin","DynamicEntryPlugin","itemToPlugin","context","item","name","Array","isArray","module","exports","EntryOptionPlugin","apply","compiler","hooks","entryOption","tap","entry","Object","keys"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAAhC;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAlC;AAEA;;AACA;;AAEA;;;;;;;;AAMA,MAAMG,YAAY,GAAG,CAACC,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,KAAyB;AAC7C,MAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AACxB,WAAO,IAAIJ,gBAAJ,CAAqBG,OAArB,EAA8BC,IAA9B,EAAoCC,IAApC,CAAP;AACA;;AACD,SAAO,IAAIP,iBAAJ,CAAsBK,OAAtB,EAA+BC,IAA/B,EAAqCC,IAArC,CAAP;AACA,CALD;;AAOAG,MAAM,CAACC,OAAP,GAAiB,MAAMC,iBAAN,CAAwB;AACxC;;;;AAIAC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,mBAA/B,EAAoD,CAACZ,OAAD,EAAUa,KAAV,KAAoB;AACvE,UAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BV,KAAK,CAACC,OAAN,CAAcS,KAAd,CAAjC,EAAuD;AACtDd,QAAAA,YAAY,CAACC,OAAD,EAAUa,KAAV,EAAiB,MAAjB,CAAZ,CAAqCL,KAArC,CAA2CC,QAA3C;AACA,OAFD,MAEO,IAAI,OAAOI,KAAP,KAAiB,QAArB,EAA+B;AACrC,aAAK,MAAMX,IAAX,IAAmBY,MAAM,CAACC,IAAP,CAAYF,KAAZ,CAAnB,EAAuC;AACtCd,UAAAA,YAAY,CAACC,OAAD,EAAUa,KAAK,CAACX,IAAD,CAAf,EAAuBA,IAAvB,CAAZ,CAAyCM,KAAzC,CAA+CC,QAA/C;AACA;AACD,OAJM,MAIA,IAAI,OAAOI,KAAP,KAAiB,UAArB,EAAiC;AACvC,YAAIf,kBAAJ,CAAuBE,OAAvB,EAAgCa,KAAhC,EAAuCL,KAAvC,CAA6CC,QAA7C;AACA;;AACD,aAAO,IAAP;AACA,KAXD;AAYA;;AAlBuC,CAAzC","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SingleEntryPlugin = require(\"./SingleEntryPlugin\");\nconst MultiEntryPlugin = require(\"./MultiEntryPlugin\");\nconst DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryItem} EntryItem */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string} context context path\n * @param {EntryItem} item entry array or single path\n * @param {string} name entry key name\n * @returns {SingleEntryPlugin | MultiEntryPlugin} returns either a single or multi entry plugin\n */\nconst itemToPlugin = (context, item, name) => {\n\tif (Array.isArray(item)) {\n\t\treturn new MultiEntryPlugin(context, item, name);\n\t}\n\treturn new SingleEntryPlugin(context, item, name);\n};\n\nmodule.exports = class EntryOptionPlugin {\n\t/**\n\t * @param {Compiler} compiler the compiler instance one is tapping into\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n\t\t\tif (typeof entry === \"string\" || Array.isArray(entry)) {\n\t\t\t\titemToPlugin(context, entry, \"main\").apply(compiler);\n\t\t\t} else if (typeof entry === \"object\") {\n\t\t\t\tfor (const name of Object.keys(entry)) {\n\t\t\t\t\titemToPlugin(context, entry[name], name).apply(compiler);\n\t\t\t\t}\n\t\t\t} else if (typeof entry === \"function\") {\n\t\t\t\tnew DynamicEntryPlugin(context, entry).apply(compiler);\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}