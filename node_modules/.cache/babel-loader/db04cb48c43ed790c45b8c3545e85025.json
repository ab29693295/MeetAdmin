{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AsyncDependenciesBlock = require(\"../AsyncDependenciesBlock\");\n\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nmodule.exports = class AMDRequireDependenciesBlock extends AsyncDependenciesBlock {\n  constructor(expr, arrayRange, functionRange, errorCallbackRange, module, loc, request) {\n    super(null, module, loc, request);\n    this.expr = expr;\n    this.outerRange = expr.range;\n    this.arrayRange = arrayRange;\n    this.functionBindThis = false;\n    this.functionRange = functionRange;\n    this.errorCallbackBindThis = false;\n    this.errorCallbackRange = errorCallbackRange;\n    this.bindThis = true;\n\n    if (arrayRange && functionRange && errorCallbackRange) {\n      this.range = [arrayRange[0], errorCallbackRange[1]];\n    } else if (arrayRange && functionRange) {\n      this.range = [arrayRange[0], functionRange[1]];\n    } else if (arrayRange) {\n      this.range = arrayRange;\n    } else if (functionRange) {\n      this.range = functionRange;\n    } else {\n      this.range = expr.range;\n    }\n\n    const dep = this.newRequireDependency();\n    dep.loc = loc;\n    this.addDependency(dep);\n  }\n\n  newRequireDependency() {\n    return new AMDRequireDependency(this);\n  }\n\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/dependencies/AMDRequireDependenciesBlock.js"],"names":["AsyncDependenciesBlock","require","AMDRequireDependency","module","exports","AMDRequireDependenciesBlock","constructor","expr","arrayRange","functionRange","errorCallbackRange","loc","request","outerRange","range","functionBindThis","errorCallbackBindThis","bindThis","dep","newRequireDependency","addDependency"],"mappings":"AAAA;;;;AAIA;;AACA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,2BAAD,CAAtC;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAApC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,2BAAN,SAA0CL,sBAA1C,CAAiE;AACjFM,EAAAA,WAAW,CACVC,IADU,EAEVC,UAFU,EAGVC,aAHU,EAIVC,kBAJU,EAKVP,MALU,EAMVQ,GANU,EAOVC,OAPU,EAQT;AACD,UAAM,IAAN,EAAYT,MAAZ,EAAoBQ,GAApB,EAAyBC,OAAzB;AACA,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKM,UAAL,GAAkBN,IAAI,CAACO,KAAvB;AACA,SAAKN,UAAL,GAAkBA,UAAlB;AACA,SAAKO,gBAAL,GAAwB,KAAxB;AACA,SAAKN,aAAL,GAAqBA,aAArB;AACA,SAAKO,qBAAL,GAA6B,KAA7B;AACA,SAAKN,kBAAL,GAA0BA,kBAA1B;AACA,SAAKO,QAAL,GAAgB,IAAhB;;AACA,QAAIT,UAAU,IAAIC,aAAd,IAA+BC,kBAAnC,EAAuD;AACtD,WAAKI,KAAL,GAAa,CAACN,UAAU,CAAC,CAAD,CAAX,EAAgBE,kBAAkB,CAAC,CAAD,CAAlC,CAAb;AACA,KAFD,MAEO,IAAIF,UAAU,IAAIC,aAAlB,EAAiC;AACvC,WAAKK,KAAL,GAAa,CAACN,UAAU,CAAC,CAAD,CAAX,EAAgBC,aAAa,CAAC,CAAD,CAA7B,CAAb;AACA,KAFM,MAEA,IAAID,UAAJ,EAAgB;AACtB,WAAKM,KAAL,GAAaN,UAAb;AACA,KAFM,MAEA,IAAIC,aAAJ,EAAmB;AACzB,WAAKK,KAAL,GAAaL,aAAb;AACA,KAFM,MAEA;AACN,WAAKK,KAAL,GAAaP,IAAI,CAACO,KAAlB;AACA;;AACD,UAAMI,GAAG,GAAG,KAAKC,oBAAL,EAAZ;AACAD,IAAAA,GAAG,CAACP,GAAJ,GAAUA,GAAV;AACA,SAAKS,aAAL,CAAmBF,GAAnB;AACA;;AAEDC,EAAAA,oBAAoB,GAAG;AACtB,WAAO,IAAIjB,oBAAJ,CAAyB,IAAzB,CAAP;AACA;;AArCgF,CAAlF","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst AsyncDependenciesBlock = require(\"../AsyncDependenciesBlock\");\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nmodule.exports = class AMDRequireDependenciesBlock extends AsyncDependenciesBlock {\n\tconstructor(\n\t\texpr,\n\t\tarrayRange,\n\t\tfunctionRange,\n\t\terrorCallbackRange,\n\t\tmodule,\n\t\tloc,\n\t\trequest\n\t) {\n\t\tsuper(null, module, loc, request);\n\t\tthis.expr = expr;\n\t\tthis.outerRange = expr.range;\n\t\tthis.arrayRange = arrayRange;\n\t\tthis.functionBindThis = false;\n\t\tthis.functionRange = functionRange;\n\t\tthis.errorCallbackBindThis = false;\n\t\tthis.errorCallbackRange = errorCallbackRange;\n\t\tthis.bindThis = true;\n\t\tif (arrayRange && functionRange && errorCallbackRange) {\n\t\t\tthis.range = [arrayRange[0], errorCallbackRange[1]];\n\t\t} else if (arrayRange && functionRange) {\n\t\t\tthis.range = [arrayRange[0], functionRange[1]];\n\t\t} else if (arrayRange) {\n\t\t\tthis.range = arrayRange;\n\t\t} else if (functionRange) {\n\t\t\tthis.range = functionRange;\n\t\t} else {\n\t\t\tthis.range = expr.range;\n\t\t}\n\t\tconst dep = this.newRequireDependency();\n\t\tdep.loc = loc;\n\t\tthis.addDependency(dep);\n\t}\n\n\tnewRequireDependency() {\n\t\treturn new AMDRequireDependency(this);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}