{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { print } from \"@webassemblyjs/wast-printer\";\nvar SHOW_LINES_AROUND_POINTER = 5;\n\nfunction repeat(char, nb) {\n  return Array(nb).fill(char).join(\"\");\n} // TODO(sven): allow arbitrary ast nodes\n\n\nexport function codeFrameFromAst(ast, loc) {\n  return codeFrameFromSource(print(ast), loc);\n}\nexport function codeFrameFromSource(source, loc) {\n  var start = loc.start,\n      end = loc.end;\n  var length = 1;\n\n  if (_typeof(end) === \"object\") {\n    length = end.column - start.column + 1;\n  }\n\n  return source.split(\"\\n\").reduce(function (acc, line, lineNbr) {\n    if (Math.abs(start.line - lineNbr) < SHOW_LINES_AROUND_POINTER) {\n      acc += line + \"\\n\";\n    } // Add a new line with the pointer padded left\n\n\n    if (lineNbr === start.line - 1) {\n      acc += repeat(\" \", start.column - 1);\n      acc += repeat(\"^\", length);\n      acc += \"\\n\";\n    }\n\n    return acc;\n  }, \"\");\n}","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/@webassemblyjs/helper-code-frame/esm/index.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","print","SHOW_LINES_AROUND_POINTER","repeat","char","nb","Array","fill","join","codeFrameFromAst","ast","loc","codeFrameFromSource","source","start","end","length","column","split","reduce","acc","line","lineNbr","Math","abs"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE/V,SAASK,KAAT,QAAsB,6BAAtB;AACA,IAAIC,yBAAyB,GAAG,CAAhC;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,EAAtB,EAA0B;AACxB,SAAOC,KAAK,CAACD,EAAD,CAAL,CAAUE,IAAV,CAAeH,IAAf,EAAqBI,IAArB,CAA0B,EAA1B,CAAP;AACD,C,CAAC;;;AAGF,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AACzC,SAAOC,mBAAmB,CAACX,KAAK,CAACS,GAAD,CAAN,EAAaC,GAAb,CAA1B;AACD;AACD,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCF,GAArC,EAA0C;AAC/C,MAAIG,KAAK,GAAGH,GAAG,CAACG,KAAhB;AAAA,MACIC,GAAG,GAAGJ,GAAG,CAACI,GADd;AAEA,MAAIC,MAAM,GAAG,CAAb;;AAEA,MAAIrB,OAAO,CAACoB,GAAD,CAAP,KAAiB,QAArB,EAA+B;AAC7BC,IAAAA,MAAM,GAAGD,GAAG,CAACE,MAAJ,GAAaH,KAAK,CAACG,MAAnB,GAA4B,CAArC;AACD;;AAED,SAAOJ,MAAM,CAACK,KAAP,CAAa,IAAb,EAAmBC,MAAnB,CAA0B,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC7D,QAAIC,IAAI,CAACC,GAAL,CAASV,KAAK,CAACO,IAAN,GAAaC,OAAtB,IAAiCpB,yBAArC,EAAgE;AAC9DkB,MAAAA,GAAG,IAAIC,IAAI,GAAG,IAAd;AACD,KAH4D,CAG3D;;;AAGF,QAAIC,OAAO,KAAKR,KAAK,CAACO,IAAN,GAAa,CAA7B,EAAgC;AAC9BD,MAAAA,GAAG,IAAIjB,MAAM,CAAC,GAAD,EAAMW,KAAK,CAACG,MAAN,GAAe,CAArB,CAAb;AACAG,MAAAA,GAAG,IAAIjB,MAAM,CAAC,GAAD,EAAMa,MAAN,CAAb;AACAI,MAAAA,GAAG,IAAI,IAAP;AACD;;AAED,WAAOA,GAAP;AACD,GAbM,EAaJ,EAbI,CAAP;AAcD","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { print } from \"@webassemblyjs/wast-printer\";\nvar SHOW_LINES_AROUND_POINTER = 5;\n\nfunction repeat(char, nb) {\n  return Array(nb).fill(char).join(\"\");\n} // TODO(sven): allow arbitrary ast nodes\n\n\nexport function codeFrameFromAst(ast, loc) {\n  return codeFrameFromSource(print(ast), loc);\n}\nexport function codeFrameFromSource(source, loc) {\n  var start = loc.start,\n      end = loc.end;\n  var length = 1;\n\n  if (_typeof(end) === \"object\") {\n    length = end.column - start.column + 1;\n  }\n\n  return source.split(\"\\n\").reduce(function (acc, line, lineNbr) {\n    if (Math.abs(start.line - lineNbr) < SHOW_LINES_AROUND_POINTER) {\n      acc += line + \"\\n\";\n    } // Add a new line with the pointer padded left\n\n\n    if (lineNbr === start.line - 1) {\n      acc += repeat(\" \", start.column - 1);\n      acc += repeat(\"^\", length);\n      acc += \"\\n\";\n    }\n\n    return acc;\n  }, \"\");\n}"]},"metadata":{},"sourceType":"module"}