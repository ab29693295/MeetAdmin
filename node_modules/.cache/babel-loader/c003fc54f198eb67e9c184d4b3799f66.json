{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass NamedChunksPlugin {\n  static defaultNameResolver(chunk) {\n    return chunk.name || null;\n  }\n\n  constructor(nameResolver) {\n    this.nameResolver = nameResolver || NamedChunksPlugin.defaultNameResolver;\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"NamedChunksPlugin\", compilation => {\n      compilation.hooks.beforeChunkIds.tap(\"NamedChunksPlugin\", chunks => {\n        for (const chunk of chunks) {\n          if (chunk.id === null) {\n            chunk.id = this.nameResolver(chunk);\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = NamedChunksPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/NamedChunksPlugin.js"],"names":["NamedChunksPlugin","defaultNameResolver","chunk","name","constructor","nameResolver","apply","compiler","hooks","compilation","tap","beforeChunkIds","chunks","id","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,iBAAN,CAAwB;AACvB,SAAOC,mBAAP,CAA2BC,KAA3B,EAAkC;AACjC,WAAOA,KAAK,CAACC,IAAN,IAAc,IAArB;AACA;;AAEDC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACzB,SAAKA,YAAL,GAAoBA,YAAY,IAAIL,iBAAiB,CAACC,mBAAtD;AACA;;AAEDK,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,mBAA/B,EAAoDD,WAAW,IAAI;AAClEA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,cAAlB,CAAiCD,GAAjC,CAAqC,mBAArC,EAA0DE,MAAM,IAAI;AACnE,aAAK,MAAMV,KAAX,IAAoBU,MAApB,EAA4B;AAC3B,cAAIV,KAAK,CAACW,EAAN,KAAa,IAAjB,EAAuB;AACtBX,YAAAA,KAAK,CAACW,EAAN,GAAW,KAAKR,YAAL,CAAkBH,KAAlB,CAAX;AACA;AACD;AACD,OAND;AAOA,KARD;AASA;;AAnBsB;;AAsBxBY,MAAM,CAACC,OAAP,GAAiBf,iBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass NamedChunksPlugin {\n\tstatic defaultNameResolver(chunk) {\n\t\treturn chunk.name || null;\n\t}\n\n\tconstructor(nameResolver) {\n\t\tthis.nameResolver = nameResolver || NamedChunksPlugin.defaultNameResolver;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"NamedChunksPlugin\", compilation => {\n\t\t\tcompilation.hooks.beforeChunkIds.tap(\"NamedChunksPlugin\", chunks => {\n\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\tif (chunk.id === null) {\n\t\t\t\t\t\tchunk.id = this.nameResolver(chunk);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NamedChunksPlugin;\n"]},"metadata":{},"sourceType":"script"}