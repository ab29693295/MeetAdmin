{"ast":null,"code":"// string literal characters cannot contain control codes\nvar CONTROL_CODES = [0, // null\n7, // bell\n8, // backspace\n9, // horizontal\n10, // line feed\n11, // vertical tab\n12, // form feed\n13, // carriage return\n26, // Control-Z\n27, // escape\n127 // delete\n]; // escaped sequences can either be a two character hex value, or one of the\n// following single character codes\n\nfunction decodeControlCharacter(char) {\n  switch (char) {\n    case \"t\":\n      return 0x09;\n\n    case \"n\":\n      return 0x0a;\n\n    case \"r\":\n      return 0x0d;\n\n    case '\"':\n      return 0x22;\n\n    case \"′\":\n      return 0x27;\n\n    case \"\\\\\":\n      return 0x5c;\n  }\n\n  return -1;\n}\n\nvar ESCAPE_CHAR = 92; // backslash\n\nvar QUOTE_CHAR = 34; // backslash\n// parse string as per the spec:\n// https://webassembly.github.io/spec/core/multipage/text/values.html#text-string\n\nexport function parseString(value) {\n  var byteArray = [];\n  var index = 0;\n\n  while (index < value.length) {\n    var charCode = value.charCodeAt(index);\n\n    if (CONTROL_CODES.indexOf(charCode) !== -1) {\n      throw new Error(\"ASCII control characters are not permitted within string literals\");\n    }\n\n    if (charCode === QUOTE_CHAR) {\n      throw new Error(\"quotes are not permitted within string literals\");\n    }\n\n    if (charCode === ESCAPE_CHAR) {\n      var firstChar = value.substr(index + 1, 1);\n      var decodedControlChar = decodeControlCharacter(firstChar);\n\n      if (decodedControlChar !== -1) {\n        // single character escaped values, e.g. \\r\n        byteArray.push(decodedControlChar);\n        index += 2;\n      } else {\n        // hex escaped values, e.g. \\2a\n        var hexValue = value.substr(index + 1, 2);\n\n        if (!/^[0-9A-F]{2}$/i.test(hexValue)) {\n          throw new Error(\"invalid character encoding\");\n        }\n\n        byteArray.push(parseInt(hexValue, 16));\n        index += 3;\n      }\n    } else {\n      // ASCII encoded values\n      byteArray.push(charCode);\n      index++;\n    }\n  }\n\n  return byteArray;\n}","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/@webassemblyjs/wast-parser/esm/string-literals.js"],"names":["CONTROL_CODES","decodeControlCharacter","char","ESCAPE_CHAR","QUOTE_CHAR","parseString","value","byteArray","index","length","charCode","charCodeAt","indexOf","Error","firstChar","substr","decodedControlChar","push","hexValue","test","parseInt"],"mappings":"AAAA;AACA,IAAIA,aAAa,GAAG,CAAC,CAAD,EAAI;AACxB,CADoB,EACjB;AACH,CAFoB,EAEjB;AACH,CAHoB,EAGjB;AACH,EAJoB,EAIhB;AACJ,EALoB,EAKhB;AACJ,EANoB,EAMhB;AACJ,EAPoB,EAOhB;AACJ,EARoB,EAQhB;AACJ,EAToB,EAShB;AACJ,GAVoB,CAUhB;AAVgB,CAApB,C,CAWG;AACH;;AAEA,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AACpC,UAAQA,IAAR;AACE,SAAK,GAAL;AACE,aAAO,IAAP;;AAEF,SAAK,GAAL;AACE,aAAO,IAAP;;AAEF,SAAK,GAAL;AACE,aAAO,IAAP;;AAEF,SAAK,GAAL;AACE,aAAO,IAAP;;AAEF,SAAK,GAAL;AACE,aAAO,IAAP;;AAEF,SAAK,IAAL;AACE,aAAO,IAAP;AAjBJ;;AAoBA,SAAO,CAAC,CAAR;AACD;;AAED,IAAIC,WAAW,GAAG,EAAlB,C,CAAsB;;AAEtB,IAAIC,UAAU,GAAG,EAAjB,C,CAAqB;AACrB;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACjC,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAOA,KAAK,GAAGF,KAAK,CAACG,MAArB,EAA6B;AAC3B,QAAIC,QAAQ,GAAGJ,KAAK,CAACK,UAAN,CAAiBH,KAAjB,CAAf;;AAEA,QAAIR,aAAa,CAACY,OAAd,CAAsBF,QAAtB,MAAoC,CAAC,CAAzC,EAA4C;AAC1C,YAAM,IAAIG,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAED,QAAIH,QAAQ,KAAKN,UAAjB,EAA6B;AAC3B,YAAM,IAAIS,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,QAAIH,QAAQ,KAAKP,WAAjB,EAA8B;AAC5B,UAAIW,SAAS,GAAGR,KAAK,CAACS,MAAN,CAAaP,KAAK,GAAG,CAArB,EAAwB,CAAxB,CAAhB;AACA,UAAIQ,kBAAkB,GAAGf,sBAAsB,CAACa,SAAD,CAA/C;;AAEA,UAAIE,kBAAkB,KAAK,CAAC,CAA5B,EAA+B;AAC7B;AACAT,QAAAA,SAAS,CAACU,IAAV,CAAeD,kBAAf;AACAR,QAAAA,KAAK,IAAI,CAAT;AACD,OAJD,MAIO;AACL;AACA,YAAIU,QAAQ,GAAGZ,KAAK,CAACS,MAAN,CAAaP,KAAK,GAAG,CAArB,EAAwB,CAAxB,CAAf;;AAEA,YAAI,CAAC,iBAAiBW,IAAjB,CAAsBD,QAAtB,CAAL,EAAsC;AACpC,gBAAM,IAAIL,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAEDN,QAAAA,SAAS,CAACU,IAAV,CAAeG,QAAQ,CAACF,QAAD,EAAW,EAAX,CAAvB;AACAV,QAAAA,KAAK,IAAI,CAAT;AACD;AACF,KAnBD,MAmBO;AACL;AACAD,MAAAA,SAAS,CAACU,IAAV,CAAeP,QAAf;AACAF,MAAAA,KAAK;AACN;AACF;;AAED,SAAOD,SAAP;AACD","sourcesContent":["// string literal characters cannot contain control codes\nvar CONTROL_CODES = [0, // null\n7, // bell\n8, // backspace\n9, // horizontal\n10, // line feed\n11, // vertical tab\n12, // form feed\n13, // carriage return\n26, // Control-Z\n27, // escape\n127 // delete\n]; // escaped sequences can either be a two character hex value, or one of the\n// following single character codes\n\nfunction decodeControlCharacter(char) {\n  switch (char) {\n    case \"t\":\n      return 0x09;\n\n    case \"n\":\n      return 0x0a;\n\n    case \"r\":\n      return 0x0d;\n\n    case '\"':\n      return 0x22;\n\n    case \"′\":\n      return 0x27;\n\n    case \"\\\\\":\n      return 0x5c;\n  }\n\n  return -1;\n}\n\nvar ESCAPE_CHAR = 92; // backslash\n\nvar QUOTE_CHAR = 34; // backslash\n// parse string as per the spec:\n// https://webassembly.github.io/spec/core/multipage/text/values.html#text-string\n\nexport function parseString(value) {\n  var byteArray = [];\n  var index = 0;\n\n  while (index < value.length) {\n    var charCode = value.charCodeAt(index);\n\n    if (CONTROL_CODES.indexOf(charCode) !== -1) {\n      throw new Error(\"ASCII control characters are not permitted within string literals\");\n    }\n\n    if (charCode === QUOTE_CHAR) {\n      throw new Error(\"quotes are not permitted within string literals\");\n    }\n\n    if (charCode === ESCAPE_CHAR) {\n      var firstChar = value.substr(index + 1, 1);\n      var decodedControlChar = decodeControlCharacter(firstChar);\n\n      if (decodedControlChar !== -1) {\n        // single character escaped values, e.g. \\r\n        byteArray.push(decodedControlChar);\n        index += 2;\n      } else {\n        // hex escaped values, e.g. \\2a\n        var hexValue = value.substr(index + 1, 2);\n\n        if (!/^[0-9A-F]{2}$/i.test(hexValue)) {\n          throw new Error(\"invalid character encoding\");\n        }\n\n        byteArray.push(parseInt(hexValue, 16));\n        index += 3;\n      }\n    } else {\n      // ASCII encoded values\n      byteArray.push(charCode);\n      index++;\n    }\n  }\n\n  return byteArray;\n}"]},"metadata":{},"sourceType":"module"}