{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\n\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AACA\";\n\nclass SourceNode {\n  constructor(generatedCode, source, originalSource, startingLine) {\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.startingLine = startingLine || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n\n  clone() {\n    return new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n  }\n\n  getGeneratedCode() {\n    return this.generatedCode;\n  }\n\n  addGeneratedCode(code) {\n    this.generatedCode += code;\n    this._numberOfLines += getNumberOfLines(code);\n    this._endsWithNewLine = code[code.length - 1] === \"\\n\";\n  }\n\n  getMappings(mappingsContext) {\n    if (!this.generatedCode) return \"\";\n    const lines = this._numberOfLines;\n    const sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n    let mappings = \"A\"; // generated column 0\n\n    if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n    mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\n    mappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n\n    mappings += \"A\"; // original column 0\n\n    mappingsContext.currentSource = sourceIdx;\n    mappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n    const unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n    mappings += Array(lines).join(LINE_MAPPING);\n\n    if (unfinishedGeneratedLine === 0) {\n      mappings += \";\";\n    } else {\n      if (lines !== 0) {\n        mappings += LINE_MAPPING;\n      }\n\n      mappingsContext.currentOriginalLine++;\n    }\n\n    return mappings;\n  }\n\n  mapGeneratedCode(fn) {\n    throw new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n  }\n\n  getNormalizedNodes() {\n    var results = [];\n    var currentLine = this.startingLine;\n    var generatedCode = this.generatedCode;\n    var index = 0;\n    var indexEnd = generatedCode.length;\n\n    while (index < indexEnd) {\n      // get one generated line\n      var nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n      if (nextLine === 0) nextLine = indexEnd;\n      var lineGenerated = generatedCode.substr(index, nextLine - index);\n      results.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine)); // move cursors\n\n      index = nextLine;\n      currentLine++;\n    }\n\n    return results;\n  }\n\n  merge(otherNode) {\n    if (otherNode instanceof SourceNode) {\n      return this.mergeSourceNode(otherNode);\n    } else if (otherNode instanceof SingleLineNode) {\n      return this.mergeSingleLineNode(otherNode);\n    }\n\n    return false;\n  }\n\n  mergeSourceNode(otherNode) {\n    if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.startingLine) {\n      this.generatedCode += otherNode.generatedCode;\n      this._numberOfLines += otherNode._numberOfLines;\n      this._endsWithNewLine = otherNode._endsWithNewLine;\n      return this;\n    }\n\n    return false;\n  }\n\n  mergeSingleLineNode(otherNode) {\n    if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.line && otherNode._numberOfLines <= 1) {\n      this.addSingleLineNode(otherNode);\n      return this;\n    }\n\n    return false;\n  }\n\n  addSingleLineNode(otherNode) {\n    this.generatedCode += otherNode.generatedCode;\n    this._numberOfLines += otherNode._numberOfLines;\n    this._endsWithNewLine = otherNode._endsWithNewLine;\n  }\n\n}\n\nmodule.exports = SourceNode;\n\nconst SingleLineNode = require(\"./SingleLineNode\"); // circular dependency","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/source-list-map/lib/SourceNode.js"],"names":["base64VLQ","require","getNumberOfLines","getUnfinishedLine","LINE_MAPPING","SourceNode","constructor","generatedCode","source","originalSource","startingLine","_numberOfLines","_endsWithNewLine","length","clone","getGeneratedCode","addGeneratedCode","code","getMappings","mappingsContext","lines","sourceIdx","ensureSource","mappings","unfinishedGeneratedLine","encode","currentSource","currentOriginalLine","Array","join","mapGeneratedCode","fn","Error","getNormalizedNodes","results","currentLine","index","indexEnd","nextLine","indexOf","lineGenerated","substr","push","SingleLineNode","merge","otherNode","mergeSourceNode","mergeSingleLineNode","line","addSingleLineNode","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AACA\";\n\nclass SourceNode {\n\n\tconstructor(generatedCode, source, originalSource, startingLine) {\n\t\tthis.generatedCode = generatedCode;\n\t\tthis.originalSource = originalSource;\n\t\tthis.source = source;\n\t\tthis.startingLine = startingLine || 1;\n\t\tthis._numberOfLines = getNumberOfLines(this.generatedCode);\n\t\tthis._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n\t}\n\n\tclone() {\n\t\treturn new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n\t}\n\n\tgetGeneratedCode() {\n\t\treturn this.generatedCode;\n\t}\n\n\taddGeneratedCode(code) {\n\t\tthis.generatedCode += code;\n\t\tthis._numberOfLines += getNumberOfLines(code);\n\t\tthis._endsWithNewLine = code[code.length - 1] === \"\\n\";\n\t}\n\n\tgetMappings(mappingsContext) {\n\t\tif(!this.generatedCode)\n\t\t\treturn \"\";\n\t\tconst lines = this._numberOfLines;\n\t\tconst sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n\t\tlet mappings = \"A\"; // generated column 0\n\t\tif(mappingsContext.unfinishedGeneratedLine)\n\t\t\tmappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n\t\tmappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\t\tmappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n\t\tmappings += \"A\"; // original column 0\n\t\tmappingsContext.currentSource = sourceIdx;\n\t\tmappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n\t\tconst unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode)\n\t\tmappings += Array(lines).join(LINE_MAPPING);\n\t\tif(unfinishedGeneratedLine === 0) {\n\t\t\tmappings += \";\";\n\t\t} else {\n\t\t\tif(lines !== 0) {\n\t\t\t\tmappings += LINE_MAPPING;\n\t\t\t}\n\t\t\tmappingsContext.currentOriginalLine++;\n\t\t}\n\t\treturn mappings;\n\t}\n\n\tmapGeneratedCode(fn) {\n\t\tthrow new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n\t}\n\n\tgetNormalizedNodes() {\n\t\tvar results = [];\n\t\tvar currentLine = this.startingLine;\n\t\tvar generatedCode = this.generatedCode;\n\t\tvar index = 0;\n\t\tvar indexEnd = generatedCode.length;\n\t\twhile(index < indexEnd) {\n\t\t\t// get one generated line\n\t\t\tvar nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n\t\t\tif(nextLine === 0) nextLine = indexEnd;\n\t\t\tvar lineGenerated = generatedCode.substr(index, nextLine - index);\n\n\t\t\tresults.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine));\n\n\t\t\t// move cursors\n\t\t\tindex = nextLine;\n\t\t\tcurrentLine++;\n\t\t}\n\t\treturn results;\n\t}\n\n\tmerge(otherNode) {\n\t\tif(otherNode instanceof SourceNode) {\n\t\t\treturn this.mergeSourceNode(otherNode);\n\t\t} else if(otherNode instanceof SingleLineNode) {\n\t\t\treturn this.mergeSingleLineNode(otherNode);\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSourceNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis._endsWithNewLine &&\n\t\t\tthis.startingLine + this._numberOfLines === otherNode.startingLine) {\n\t\t\tthis.generatedCode += otherNode.generatedCode;\n\t\t\tthis._numberOfLines += otherNode._numberOfLines;\n\t\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n\n\tmergeSingleLineNode(otherNode) {\n\t\tif(this.source === otherNode.source &&\n\t\t\tthis._endsWithNewLine &&\n\t\t\tthis.startingLine + this._numberOfLines === otherNode.line &&\n\t\t\totherNode._numberOfLines <= 1) {\n\t\t\tthis.addSingleLineNode(otherNode);\n\t\t\treturn this;\n\t\t}\n\t\treturn false;\n\t}\n\n\taddSingleLineNode(otherNode) {\n\t\tthis.generatedCode += otherNode.generatedCode;\n\t\tthis._numberOfLines += otherNode._numberOfLines\n\t\tthis._endsWithNewLine = otherNode._endsWithNewLine;\n\t}\n}\n\nmodule.exports = SourceNode;\nconst SingleLineNode = require(\"./SingleLineNode\"); // circular dependency\n"]},"metadata":{},"sourceType":"script"}