{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass UseStrictPlugin {\n  /**\n   * @param {Compiler} compiler Webpack Compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"UseStrictPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const handler = parser => {\n        parser.hooks.program.tap(\"UseStrictPlugin\", ast => {\n          const firstNode = ast.body[0];\n\n          if (firstNode && firstNode.type === \"ExpressionStatement\" && firstNode.expression.type === \"Literal\" && firstNode.expression.value === \"use strict\") {\n            // Remove \"use strict\" expression. It will be added later by the renderer again.\n            // This is necessary in order to not break the strict mode when webpack prepends code.\n            // @see https://github.com/webpack/webpack/issues/1970\n            const dep = new ConstDependency(\"\", firstNode.range);\n            dep.loc = firstNode.loc;\n            parser.state.current.addDependency(dep);\n            parser.state.module.buildInfo.strict = true;\n          }\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"UseStrictPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"UseStrictPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"UseStrictPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = UseStrictPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/UseStrictPlugin.js"],"names":["ConstDependency","require","UseStrictPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","handler","parser","program","ast","firstNode","body","type","expression","value","dep","range","loc","state","current","addDependency","module","buildInfo","strict","for","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,gCAAD,CAA/B;AAEA;;;AAEA,MAAMC,eAAN,CAAsB;AACrB;;;;AAIAC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,iBADD,EAEC,CAACD,WAAD,EAAc;AAAEE,MAAAA;AAAF,KAAd,KAA0C;AACzC,YAAMC,OAAO,GAAGC,MAAM,IAAI;AACzBA,QAAAA,MAAM,CAACL,KAAP,CAAaM,OAAb,CAAqBJ,GAArB,CAAyB,iBAAzB,EAA4CK,GAAG,IAAI;AAClD,gBAAMC,SAAS,GAAGD,GAAG,CAACE,IAAJ,CAAS,CAAT,CAAlB;;AACA,cACCD,SAAS,IACTA,SAAS,CAACE,IAAV,KAAmB,qBADnB,IAEAF,SAAS,CAACG,UAAV,CAAqBD,IAArB,KAA8B,SAF9B,IAGAF,SAAS,CAACG,UAAV,CAAqBC,KAArB,KAA+B,YAJhC,EAKE;AACD;AACA;AACA;AACA,kBAAMC,GAAG,GAAG,IAAIlB,eAAJ,CAAoB,EAApB,EAAwBa,SAAS,CAACM,KAAlC,CAAZ;AACAD,YAAAA,GAAG,CAACE,GAAJ,GAAUP,SAAS,CAACO,GAApB;AACAV,YAAAA,MAAM,CAACW,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCL,GAAnC;AACAR,YAAAA,MAAM,CAACW,KAAP,CAAaG,MAAb,CAAoBC,SAApB,CAA8BC,MAA9B,GAAuC,IAAvC;AACA;AACD,SAhBD;AAiBA,OAlBD;;AAoBAlB,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACEiB,GADF,CACM,iBADN,EAEEpB,GAFF,CAEM,iBAFN,EAEyBE,OAFzB;AAGAD,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACEiB,GADF,CACM,oBADN,EAEEpB,GAFF,CAEM,iBAFN,EAEyBE,OAFzB;AAGAD,MAAAA,mBAAmB,CAACH,KAApB,CAA0BK,MAA1B,CACEiB,GADF,CACM,gBADN,EAEEpB,GAFF,CAEM,iBAFN,EAEyBE,OAFzB;AAGA,KAhCF;AAkCA;;AAxCoB;;AA2CtBe,MAAM,CAACI,OAAP,GAAiB1B,eAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass UseStrictPlugin {\n\t/**\n\t * @param {Compiler} compiler Webpack Compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"UseStrictPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst handler = parser => {\n\t\t\t\t\tparser.hooks.program.tap(\"UseStrictPlugin\", ast => {\n\t\t\t\t\t\tconst firstNode = ast.body[0];\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tfirstNode &&\n\t\t\t\t\t\t\tfirstNode.type === \"ExpressionStatement\" &&\n\t\t\t\t\t\t\tfirstNode.expression.type === \"Literal\" &&\n\t\t\t\t\t\t\tfirstNode.expression.value === \"use strict\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Remove \"use strict\" expression. It will be added later by the renderer again.\n\t\t\t\t\t\t\t// This is necessary in order to not break the strict mode when webpack prepends code.\n\t\t\t\t\t\t\t// @see https://github.com/webpack/webpack/issues/1970\n\t\t\t\t\t\t\tconst dep = new ConstDependency(\"\", firstNode.range);\n\t\t\t\t\t\t\tdep.loc = firstNode.loc;\n\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\tparser.state.module.buildInfo.strict = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"UseStrictPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"UseStrictPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"UseStrictPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = UseStrictPlugin;\n"]},"metadata":{},"sourceType":"script"}