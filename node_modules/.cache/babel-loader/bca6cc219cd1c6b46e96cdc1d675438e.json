{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n\nconst NullFactory = require(\"./NullFactory\");\n\nconst ParserHelpers = require(\"./ParserHelpers\");\n\nconst getQuery = request => {\n  const i = request.indexOf(\"?\");\n  return i !== -1 ? request.substr(i) : \"\";\n};\n\nconst collectDeclaration = (declarations, pattern) => {\n  const stack = [pattern];\n\n  while (stack.length > 0) {\n    const node = stack.pop();\n\n    switch (node.type) {\n      case \"Identifier\":\n        declarations.add(node.name);\n        break;\n\n      case \"ArrayPattern\":\n        for (const element of node.elements) {\n          if (element) {\n            stack.push(element);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        stack.push(node.left);\n        break;\n\n      case \"ObjectPattern\":\n        for (const property of node.properties) {\n          stack.push(property.value);\n        }\n\n        break;\n\n      case \"RestElement\":\n        stack.push(node.argument);\n        break;\n    }\n  }\n};\n\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n  const declarations = new Set();\n  const stack = [branch];\n\n  while (stack.length > 0) {\n    const node = stack.pop(); // Some node could be `null` or `undefined`.\n\n    if (!node) continue;\n\n    switch (node.type) {\n      // Walk through control statements to look for hoisted declarations.\n      // Some branches are skipped since they do not allow declarations.\n      case \"BlockStatement\":\n        for (const stmt of node.body) {\n          stack.push(stmt);\n        }\n\n        break;\n\n      case \"IfStatement\":\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n        break;\n\n      case \"ForStatement\":\n        stack.push(node.init);\n        stack.push(node.body);\n        break;\n\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        stack.push(node.left);\n        stack.push(node.body);\n        break;\n\n      case \"DoWhileStatement\":\n      case \"WhileStatement\":\n      case \"LabeledStatement\":\n        stack.push(node.body);\n        break;\n\n      case \"SwitchStatement\":\n        for (const cs of node.cases) {\n          for (const consequent of cs.consequent) {\n            stack.push(consequent);\n          }\n        }\n\n        break;\n\n      case \"TryStatement\":\n        stack.push(node.block);\n\n        if (node.handler) {\n          stack.push(node.handler.body);\n        }\n\n        stack.push(node.finalizer);\n        break;\n\n      case \"FunctionDeclaration\":\n        if (includeFunctionDeclarations) {\n          collectDeclaration(declarations, node.id);\n        }\n\n        break;\n\n      case \"VariableDeclaration\":\n        if (node.kind === \"var\") {\n          for (const decl of node.declarations) {\n            collectDeclaration(declarations, decl.id);\n          }\n        }\n\n        break;\n    }\n  }\n\n  return Array.from(declarations);\n};\n\nclass ConstPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ConstPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n\n      const handler = parser => {\n        parser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n          if (parser.scope.isAsmJs) return;\n          const param = parser.evaluateExpression(statement.test);\n          const bool = param.asBool();\n\n          if (typeof bool === \"boolean\") {\n            if (statement.test.type !== \"Literal\") {\n              const dep = new ConstDependency(`${bool}`, param.range);\n              dep.loc = statement.loc;\n              parser.state.current.addDependency(dep);\n            }\n\n            const branchToRemove = bool ? statement.alternate : statement.consequent;\n\n            if (branchToRemove) {\n              // Before removing the dead branch, the hoisted declarations\n              // must be collected.\n              //\n              // Given the following code:\n              //\n              //     if (true) f() else g()\n              //     if (false) {\n              //       function f() {}\n              //       const g = function g() {}\n              //       if (someTest) {\n              //         let a = 1\n              //         var x, {y, z} = obj\n              //       }\n              //     } else {\n              //       …\n              //     }\n              //\n              // the generated code is:\n              //\n              //     if (true) f() else {}\n              //     if (false) {\n              //       var f, x, y, z;   (in loose mode)\n              //       var x, y, z;      (in strict mode)\n              //     } else {\n              //       …\n              //     }\n              //\n              // NOTE: When code runs in strict mode, `var` declarations\n              // are hoisted but `function` declarations don't.\n              //\n              let declarations;\n\n              if (parser.scope.isStrict) {\n                // If the code runs in strict mode, variable declarations\n                // using `var` must be hoisted.\n                declarations = getHoistedDeclarations(branchToRemove, false);\n              } else {\n                // Otherwise, collect all hoisted declaration.\n                declarations = getHoistedDeclarations(branchToRemove, true);\n              }\n\n              let replacement;\n\n              if (declarations.length > 0) {\n                replacement = `{ var ${declarations.join(\", \")}; }`;\n              } else {\n                replacement = \"{}\";\n              }\n\n              const dep = new ConstDependency(replacement, branchToRemove.range);\n              dep.loc = branchToRemove.loc;\n              parser.state.current.addDependency(dep);\n            }\n\n            return bool;\n          }\n        });\n        parser.hooks.expressionConditionalOperator.tap(\"ConstPlugin\", expression => {\n          if (parser.scope.isAsmJs) return;\n          const param = parser.evaluateExpression(expression.test);\n          const bool = param.asBool();\n\n          if (typeof bool === \"boolean\") {\n            if (expression.test.type !== \"Literal\") {\n              const dep = new ConstDependency(` ${bool}`, param.range);\n              dep.loc = expression.loc;\n              parser.state.current.addDependency(dep);\n            } // Expressions do not hoist.\n            // It is safe to remove the dead branch.\n            //\n            // Given the following code:\n            //\n            //   false ? someExpression() : otherExpression();\n            //\n            // the generated code is:\n            //\n            //   false ? undefined : otherExpression();\n            //\n\n\n            const branchToRemove = bool ? expression.alternate : expression.consequent;\n            const dep = new ConstDependency(\"undefined\", branchToRemove.range);\n            dep.loc = branchToRemove.loc;\n            parser.state.current.addDependency(dep);\n            return bool;\n          }\n        });\n        parser.hooks.expressionLogicalOperator.tap(\"ConstPlugin\", expression => {\n          if (parser.scope.isAsmJs) return;\n\n          if (expression.operator === \"&&\" || expression.operator === \"||\") {\n            const param = parser.evaluateExpression(expression.left);\n            const bool = param.asBool();\n\n            if (typeof bool === \"boolean\") {\n              // Expressions do not hoist.\n              // It is safe to remove the dead branch.\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   falsyExpression() && false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   true && someExpression();\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   truthyExpression() || false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   false && someExpression();\n              //\n              const keepRight = expression.operator === \"&&\" && bool || expression.operator === \"||\" && !bool;\n\n              if (param.isBoolean() || keepRight) {\n                // for case like\n                //\n                //   return'development'===process.env.NODE_ENV&&'foo'\n                //\n                // we need a space before the bool to prevent result like\n                //\n                //   returnfalse&&'foo'\n                //\n                const dep = new ConstDependency(` ${bool}`, param.range);\n                dep.loc = expression.loc;\n                parser.state.current.addDependency(dep);\n              } else {\n                parser.walkExpression(expression.left);\n              }\n\n              if (!keepRight) {\n                const dep = new ConstDependency(\"false\", expression.right.range);\n                dep.loc = expression.loc;\n                parser.state.current.addDependency(dep);\n              }\n\n              return keepRight;\n            }\n          }\n        });\n        parser.hooks.evaluateIdentifier.for(\"__resourceQuery\").tap(\"ConstPlugin\", expr => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          return ParserHelpers.evaluateToString(getQuery(parser.state.module.resource))(expr);\n        });\n        parser.hooks.expression.for(\"__resourceQuery\").tap(\"ConstPlugin\", () => {\n          if (parser.scope.isAsmJs) return;\n          if (!parser.state.module) return;\n          parser.state.current.addVariable(\"__resourceQuery\", JSON.stringify(getQuery(parser.state.module.resource)));\n          return true;\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ConstPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = ConstPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/ConstPlugin.js"],"names":["ConstDependency","require","NullFactory","ParserHelpers","getQuery","request","i","indexOf","substr","collectDeclaration","declarations","pattern","stack","length","node","pop","type","add","name","element","elements","push","left","property","properties","value","argument","getHoistedDeclarations","branch","includeFunctionDeclarations","Set","stmt","body","consequent","alternate","init","cs","cases","block","handler","finalizer","id","kind","decl","Array","from","ConstPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","parser","statementIf","statement","scope","isAsmJs","param","evaluateExpression","test","bool","asBool","dep","range","loc","state","current","addDependency","branchToRemove","isStrict","replacement","join","expressionConditionalOperator","expression","expressionLogicalOperator","operator","keepRight","isBoolean","walkExpression","right","evaluateIdentifier","for","expr","module","evaluateToString","resource","addVariable","JSON","stringify","exports"],"mappings":"AAAA;;;;AAIA;;AACA,MAAMA,eAAe,GAAGC,OAAO,CAAC,gCAAD,CAA/B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA7B;;AAEA,MAAMG,QAAQ,GAAGC,OAAO,IAAI;AAC3B,QAAMC,CAAC,GAAGD,OAAO,CAACE,OAAR,CAAgB,GAAhB,CAAV;AACA,SAAOD,CAAC,KAAK,CAAC,CAAP,GAAWD,OAAO,CAACG,MAAR,CAAeF,CAAf,CAAX,GAA+B,EAAtC;AACA,CAHD;;AAKA,MAAMG,kBAAkB,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AACrD,QAAMC,KAAK,GAAG,CAACD,OAAD,CAAd;;AACA,SAAOC,KAAK,CAACC,MAAN,GAAe,CAAtB,EAAyB;AACxB,UAAMC,IAAI,GAAGF,KAAK,CAACG,GAAN,EAAb;;AACA,YAAQD,IAAI,CAACE,IAAb;AACC,WAAK,YAAL;AACCN,QAAAA,YAAY,CAACO,GAAb,CAAiBH,IAAI,CAACI,IAAtB;AACA;;AACD,WAAK,cAAL;AACC,aAAK,MAAMC,OAAX,IAAsBL,IAAI,CAACM,QAA3B,EAAqC;AACpC,cAAID,OAAJ,EAAa;AACZP,YAAAA,KAAK,CAACS,IAAN,CAAWF,OAAX;AACA;AACD;;AACD;;AACD,WAAK,mBAAL;AACCP,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACQ,IAAhB;AACA;;AACD,WAAK,eAAL;AACC,aAAK,MAAMC,QAAX,IAAuBT,IAAI,CAACU,UAA5B,EAAwC;AACvCZ,UAAAA,KAAK,CAACS,IAAN,CAAWE,QAAQ,CAACE,KAApB;AACA;;AACD;;AACD,WAAK,aAAL;AACCb,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACY,QAAhB;AACA;AArBF;AAuBA;AACD,CA5BD;;AA8BA,MAAMC,sBAAsB,GAAG,CAACC,MAAD,EAASC,2BAAT,KAAyC;AACvE,QAAMnB,YAAY,GAAG,IAAIoB,GAAJ,EAArB;AACA,QAAMlB,KAAK,GAAG,CAACgB,MAAD,CAAd;;AACA,SAAOhB,KAAK,CAACC,MAAN,GAAe,CAAtB,EAAyB;AACxB,UAAMC,IAAI,GAAGF,KAAK,CAACG,GAAN,EAAb,CADwB,CAExB;;AACA,QAAI,CAACD,IAAL,EAAW;;AACX,YAAQA,IAAI,CAACE,IAAb;AACC;AACA;AACA,WAAK,gBAAL;AACC,aAAK,MAAMe,IAAX,IAAmBjB,IAAI,CAACkB,IAAxB,EAA8B;AAC7BpB,UAAAA,KAAK,CAACS,IAAN,CAAWU,IAAX;AACA;;AACD;;AACD,WAAK,aAAL;AACCnB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACmB,UAAhB;AACArB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACoB,SAAhB;AACA;;AACD,WAAK,cAAL;AACCtB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACqB,IAAhB;AACAvB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACkB,IAAhB;AACA;;AACD,WAAK,gBAAL;AACA,WAAK,gBAAL;AACCpB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACQ,IAAhB;AACAV,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACkB,IAAhB;AACA;;AACD,WAAK,kBAAL;AACA,WAAK,gBAAL;AACA,WAAK,kBAAL;AACCpB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACkB,IAAhB;AACA;;AACD,WAAK,iBAAL;AACC,aAAK,MAAMI,EAAX,IAAiBtB,IAAI,CAACuB,KAAtB,EAA6B;AAC5B,eAAK,MAAMJ,UAAX,IAAyBG,EAAE,CAACH,UAA5B,EAAwC;AACvCrB,YAAAA,KAAK,CAACS,IAAN,CAAWY,UAAX;AACA;AACD;;AACD;;AACD,WAAK,cAAL;AACCrB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACwB,KAAhB;;AACA,YAAIxB,IAAI,CAACyB,OAAT,EAAkB;AACjB3B,UAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAACyB,OAAL,CAAaP,IAAxB;AACA;;AACDpB,QAAAA,KAAK,CAACS,IAAN,CAAWP,IAAI,CAAC0B,SAAhB;AACA;;AACD,WAAK,qBAAL;AACC,YAAIX,2BAAJ,EAAiC;AAChCpB,UAAAA,kBAAkB,CAACC,YAAD,EAAeI,IAAI,CAAC2B,EAApB,CAAlB;AACA;;AACD;;AACD,WAAK,qBAAL;AACC,YAAI3B,IAAI,CAAC4B,IAAL,KAAc,KAAlB,EAAyB;AACxB,eAAK,MAAMC,IAAX,IAAmB7B,IAAI,CAACJ,YAAxB,EAAsC;AACrCD,YAAAA,kBAAkB,CAACC,YAAD,EAAeiC,IAAI,CAACF,EAApB,CAAlB;AACA;AACD;;AACD;AAnDF;AAqDA;;AACD,SAAOG,KAAK,CAACC,IAAN,CAAWnC,YAAX,CAAP;AACA,CA9DD;;AAgEA,MAAMoC,WAAN,CAAkB;AACjBC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,aADD,EAEC,CAACD,WAAD,EAAc;AAAEE,MAAAA;AAAF,KAAd,KAA0C;AACzCF,MAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CAAoCtD,eAApC,EAAqD,IAAIE,WAAJ,EAArD;AACAgD,MAAAA,WAAW,CAACK,mBAAZ,CAAgCD,GAAhC,CACCtD,eADD,EAEC,IAAIA,eAAe,CAACwD,QAApB,EAFD;;AAKA,YAAMjB,OAAO,GAAGkB,MAAM,IAAI;AACzBA,QAAAA,MAAM,CAACR,KAAP,CAAaS,WAAb,CAAyBP,GAAzB,CAA6B,aAA7B,EAA4CQ,SAAS,IAAI;AACxD,cAAIF,MAAM,CAACG,KAAP,CAAaC,OAAjB,EAA0B;AAC1B,gBAAMC,KAAK,GAAGL,MAAM,CAACM,kBAAP,CAA0BJ,SAAS,CAACK,IAApC,CAAd;AACA,gBAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,EAAb;;AACA,cAAI,OAAOD,IAAP,KAAgB,SAApB,EAA+B;AAC9B,gBAAIN,SAAS,CAACK,IAAV,CAAehD,IAAf,KAAwB,SAA5B,EAAuC;AACtC,oBAAMmD,GAAG,GAAG,IAAInE,eAAJ,CAAqB,GAAEiE,IAAK,EAA5B,EAA+BH,KAAK,CAACM,KAArC,CAAZ;AACAD,cAAAA,GAAG,CAACE,GAAJ,GAAUV,SAAS,CAACU,GAApB;AACAZ,cAAAA,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCL,GAAnC;AACA;;AACD,kBAAMM,cAAc,GAAGR,IAAI,GACxBN,SAAS,CAACzB,SADc,GAExByB,SAAS,CAAC1B,UAFb;;AAGA,gBAAIwC,cAAJ,EAAoB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAI/D,YAAJ;;AACA,kBAAI+C,MAAM,CAACG,KAAP,CAAac,QAAjB,EAA2B;AAC1B;AACA;AACAhE,gBAAAA,YAAY,GAAGiB,sBAAsB,CAAC8C,cAAD,EAAiB,KAAjB,CAArC;AACA,eAJD,MAIO;AACN;AACA/D,gBAAAA,YAAY,GAAGiB,sBAAsB,CAAC8C,cAAD,EAAiB,IAAjB,CAArC;AACA;;AACD,kBAAIE,WAAJ;;AACA,kBAAIjE,YAAY,CAACG,MAAb,GAAsB,CAA1B,EAA6B;AAC5B8D,gBAAAA,WAAW,GAAI,SAAQjE,YAAY,CAACkE,IAAb,CAAkB,IAAlB,CAAwB,KAA/C;AACA,eAFD,MAEO;AACND,gBAAAA,WAAW,GAAG,IAAd;AACA;;AACD,oBAAMR,GAAG,GAAG,IAAInE,eAAJ,CACX2E,WADW,EAEXF,cAAc,CAACL,KAFJ,CAAZ;AAIAD,cAAAA,GAAG,CAACE,GAAJ,GAAUI,cAAc,CAACJ,GAAzB;AACAZ,cAAAA,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCL,GAAnC;AACA;;AACD,mBAAOF,IAAP;AACA;AACD,SApED;AAqEAR,QAAAA,MAAM,CAACR,KAAP,CAAa4B,6BAAb,CAA2C1B,GAA3C,CACC,aADD,EAEC2B,UAAU,IAAI;AACb,cAAIrB,MAAM,CAACG,KAAP,CAAaC,OAAjB,EAA0B;AAC1B,gBAAMC,KAAK,GAAGL,MAAM,CAACM,kBAAP,CAA0Be,UAAU,CAACd,IAArC,CAAd;AACA,gBAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,EAAb;;AACA,cAAI,OAAOD,IAAP,KAAgB,SAApB,EAA+B;AAC9B,gBAAIa,UAAU,CAACd,IAAX,CAAgBhD,IAAhB,KAAyB,SAA7B,EAAwC;AACvC,oBAAMmD,GAAG,GAAG,IAAInE,eAAJ,CAAqB,IAAGiE,IAAK,EAA7B,EAAgCH,KAAK,CAACM,KAAtC,CAAZ;AACAD,cAAAA,GAAG,CAACE,GAAJ,GAAUS,UAAU,CAACT,GAArB;AACAZ,cAAAA,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCL,GAAnC;AACA,aAL6B,CAM9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,kBAAMM,cAAc,GAAGR,IAAI,GACxBa,UAAU,CAAC5C,SADa,GAExB4C,UAAU,CAAC7C,UAFd;AAGA,kBAAMkC,GAAG,GAAG,IAAInE,eAAJ,CACX,WADW,EAEXyE,cAAc,CAACL,KAFJ,CAAZ;AAIAD,YAAAA,GAAG,CAACE,GAAJ,GAAUI,cAAc,CAACJ,GAAzB;AACAZ,YAAAA,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCL,GAAnC;AACA,mBAAOF,IAAP;AACA;AACD,SAlCF;AAoCAR,QAAAA,MAAM,CAACR,KAAP,CAAa8B,yBAAb,CAAuC5B,GAAvC,CACC,aADD,EAEC2B,UAAU,IAAI;AACb,cAAIrB,MAAM,CAACG,KAAP,CAAaC,OAAjB,EAA0B;;AAC1B,cACCiB,UAAU,CAACE,QAAX,KAAwB,IAAxB,IACAF,UAAU,CAACE,QAAX,KAAwB,IAFzB,EAGE;AACD,kBAAMlB,KAAK,GAAGL,MAAM,CAACM,kBAAP,CAA0Be,UAAU,CAACxD,IAArC,CAAd;AACA,kBAAM2C,IAAI,GAAGH,KAAK,CAACI,MAAN,EAAb;;AACA,gBAAI,OAAOD,IAAP,KAAgB,SAApB,EAA+B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAMgB,SAAS,GACbH,UAAU,CAACE,QAAX,KAAwB,IAAxB,IAAgCf,IAAjC,IACCa,UAAU,CAACE,QAAX,KAAwB,IAAxB,IAAgC,CAACf,IAFnC;;AAIA,kBAAIH,KAAK,CAACoB,SAAN,MAAqBD,SAAzB,EAAoC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAMd,GAAG,GAAG,IAAInE,eAAJ,CAAqB,IAAGiE,IAAK,EAA7B,EAAgCH,KAAK,CAACM,KAAtC,CAAZ;AACAD,gBAAAA,GAAG,CAACE,GAAJ,GAAUS,UAAU,CAACT,GAArB;AACAZ,gBAAAA,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCL,GAAnC;AACA,eAZD,MAYO;AACNV,gBAAAA,MAAM,CAAC0B,cAAP,CAAsBL,UAAU,CAACxD,IAAjC;AACA;;AACD,kBAAI,CAAC2D,SAAL,EAAgB;AACf,sBAAMd,GAAG,GAAG,IAAInE,eAAJ,CACX,OADW,EAEX8E,UAAU,CAACM,KAAX,CAAiBhB,KAFN,CAAZ;AAIAD,gBAAAA,GAAG,CAACE,GAAJ,GAAUS,UAAU,CAACT,GAArB;AACAZ,gBAAAA,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBC,aAArB,CAAmCL,GAAnC;AACA;;AACD,qBAAOc,SAAP;AACA;AACD;AACD,SApFF;AAsFAxB,QAAAA,MAAM,CAACR,KAAP,CAAaoC,kBAAb,CACEC,GADF,CACM,iBADN,EAEEnC,GAFF,CAEM,aAFN,EAEqBoC,IAAI,IAAI;AAC3B,cAAI9B,MAAM,CAACG,KAAP,CAAaC,OAAjB,EAA0B;AAC1B,cAAI,CAACJ,MAAM,CAACa,KAAP,CAAakB,MAAlB,EAA0B;AAC1B,iBAAOrF,aAAa,CAACsF,gBAAd,CACNrF,QAAQ,CAACqD,MAAM,CAACa,KAAP,CAAakB,MAAb,CAAoBE,QAArB,CADF,EAELH,IAFK,CAAP;AAGA,SARF;AASA9B,QAAAA,MAAM,CAACR,KAAP,CAAa6B,UAAb,CACEQ,GADF,CACM,iBADN,EAEEnC,GAFF,CAEM,aAFN,EAEqB,MAAM;AACzB,cAAIM,MAAM,CAACG,KAAP,CAAaC,OAAjB,EAA0B;AAC1B,cAAI,CAACJ,MAAM,CAACa,KAAP,CAAakB,MAAlB,EAA0B;AAC1B/B,UAAAA,MAAM,CAACa,KAAP,CAAaC,OAAb,CAAqBoB,WAArB,CACC,iBADD,EAECC,IAAI,CAACC,SAAL,CAAezF,QAAQ,CAACqD,MAAM,CAACa,KAAP,CAAakB,MAAb,CAAoBE,QAArB,CAAvB,CAFD;AAIA,iBAAO,IAAP;AACA,SAVF;AAWA,OApND;;AAsNAtC,MAAAA,mBAAmB,CAACH,KAApB,CAA0BQ,MAA1B,CACE6B,GADF,CACM,iBADN,EAEEnC,GAFF,CAEM,aAFN,EAEqBZ,OAFrB;AAGAa,MAAAA,mBAAmB,CAACH,KAApB,CAA0BQ,MAA1B,CACE6B,GADF,CACM,oBADN,EAEEnC,GAFF,CAEM,aAFN,EAEqBZ,OAFrB;AAGAa,MAAAA,mBAAmB,CAACH,KAApB,CAA0BQ,MAA1B,CACE6B,GADF,CACM,gBADN,EAEEnC,GAFF,CAEM,aAFN,EAEqBZ,OAFrB;AAGA,KAxOF;AA0OA;;AA5OgB;;AA+OlBiD,MAAM,CAACM,OAAP,GAAiBhD,WAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst ParserHelpers = require(\"./ParserHelpers\");\n\nconst getQuery = request => {\n\tconst i = request.indexOf(\"?\");\n\treturn i !== -1 ? request.substr(i) : \"\";\n};\n\nconst collectDeclaration = (declarations, pattern) => {\n\tconst stack = [pattern];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\tswitch (node.type) {\n\t\t\tcase \"Identifier\":\n\t\t\t\tdeclarations.add(node.name);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tfor (const element of node.elements) {\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\tstack.push(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tfor (const property of node.properties) {\n\t\t\t\t\tstack.push(property.value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tstack.push(node.argument);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n\tconst declarations = new Set();\n\tconst stack = [branch];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\t// Some node could be `null` or `undefined`.\n\t\tif (!node) continue;\n\t\tswitch (node.type) {\n\t\t\t// Walk through control statements to look for hoisted declarations.\n\t\t\t// Some branches are skipped since they do not allow declarations.\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tfor (const stmt of node.body) {\n\t\t\t\t\tstack.push(stmt);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tstack.push(node.consequent);\n\t\t\t\tstack.push(node.alternate);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tstack.push(node.init);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\tcase \"WhileStatement\":\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tfor (const cs of node.cases) {\n\t\t\t\t\tfor (const consequent of cs.consequent) {\n\t\t\t\t\t\tstack.push(consequent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tstack.push(node.block);\n\t\t\t\tif (node.handler) {\n\t\t\t\t\tstack.push(node.handler.body);\n\t\t\t\t}\n\t\t\t\tstack.push(node.finalizer);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (includeFunctionDeclarations) {\n\t\t\t\t\tcollectDeclaration(declarations, node.id);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tif (node.kind === \"var\") {\n\t\t\t\t\tfor (const decl of node.declarations) {\n\t\t\t\t\t\tcollectDeclaration(declarations, decl.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn Array.from(declarations);\n};\n\nclass ConstPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ConstPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(ConstDependency, new NullFactory());\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tConstDependency,\n\t\t\t\t\tnew ConstDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = parser => {\n\t\t\t\t\tparser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\tconst param = parser.evaluateExpression(statement.test);\n\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\tif (statement.test.type !== \"Literal\") {\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(`${bool}`, param.range);\n\t\t\t\t\t\t\t\tdep.loc = statement.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t? statement.alternate\n\t\t\t\t\t\t\t\t: statement.consequent;\n\t\t\t\t\t\t\tif (branchToRemove) {\n\t\t\t\t\t\t\t\t// Before removing the dead branch, the hoisted declarations\n\t\t\t\t\t\t\t\t// must be collected.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else g()\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       function f() {}\n\t\t\t\t\t\t\t\t//       const g = function g() {}\n\t\t\t\t\t\t\t\t//       if (someTest) {\n\t\t\t\t\t\t\t\t//         let a = 1\n\t\t\t\t\t\t\t\t//         var x, {y, z} = obj\n\t\t\t\t\t\t\t\t//       }\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else {}\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       var f, x, y, z;   (in loose mode)\n\t\t\t\t\t\t\t\t//       var x, y, z;      (in strict mode)\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// NOTE: When code runs in strict mode, `var` declarations\n\t\t\t\t\t\t\t\t// are hoisted but `function` declarations don't.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tlet declarations;\n\t\t\t\t\t\t\t\tif (parser.scope.isStrict) {\n\t\t\t\t\t\t\t\t\t// If the code runs in strict mode, variable declarations\n\t\t\t\t\t\t\t\t\t// using `var` must be hoisted.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Otherwise, collect all hoisted declaration.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet replacement;\n\t\t\t\t\t\t\t\tif (declarations.length > 0) {\n\t\t\t\t\t\t\t\t\treplacement = `{ var ${declarations.join(\", \")}; }`;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treplacement = \"{}\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\treplacement,\n\t\t\t\t\t\t\t\t\tbranchToRemove.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expressionConditionalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.test);\n\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\tif (expression.test.type !== \"Literal\") {\n\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? someExpression() : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? undefined : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t\t? expression.alternate\n\t\t\t\t\t\t\t\t\t: expression.consequent;\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\"undefined\",\n\t\t\t\t\t\t\t\t\tbranchToRemove.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.expressionLogicalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\texpression.operator === \"&&\" ||\n\t\t\t\t\t\t\t\texpression.operator === \"||\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.left);\n\t\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   true && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   false && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\tconst keepRight =\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"&&\" && bool) ||\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"||\" && !bool);\n\n\t\t\t\t\t\t\t\t\tif (param.isBoolean() || keepRight) {\n\t\t\t\t\t\t\t\t\t\t// for case like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   return'development'===process.env.NODE_ENV&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t// we need a space before the bool to prevent result like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   returnfalse&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tparser.walkExpression(expression.left);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!keepRight) {\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\t\t\"false\",\n\t\t\t\t\t\t\t\t\t\t\texpression.right.range\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn keepRight;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\treturn ParserHelpers.evaluateToString(\n\t\t\t\t\t\t\t\tgetQuery(parser.state.module.resource)\n\t\t\t\t\t\t\t)(expr);\n\t\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", () => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\tparser.state.current.addVariable(\n\t\t\t\t\t\t\t\t\"__resourceQuery\",\n\t\t\t\t\t\t\t\tJSON.stringify(getQuery(parser.state.module.resource))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ConstPlugin;\n"]},"metadata":{},"sourceType":"script"}