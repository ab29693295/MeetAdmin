{"ast":null,"code":"'use strict';\n\nconst LRU = require('lru-cache');\n\nconst MAX_SIZE = 50 * 1024 * 1024; // 50MB\n\nconst MAX_AGE = 3 * 60 * 1000;\nlet MEMOIZED = new LRU({\n  max: MAX_SIZE,\n  maxAge: MAX_AGE,\n  length: (entry, key) => {\n    if (key.startsWith('key:')) {\n      return entry.data.length;\n    } else if (key.startsWith('digest:')) {\n      return entry.length;\n    }\n  }\n});\nmodule.exports.clearMemoized = clearMemoized;\n\nfunction clearMemoized() {\n  const old = {};\n  MEMOIZED.forEach((v, k) => {\n    old[k] = v;\n  });\n  MEMOIZED.reset();\n  return old;\n}\n\nmodule.exports.put = put;\n\nfunction put(cache, entry, data, opts) {\n  pickMem(opts).set(`key:${cache}:${entry.key}`, {\n    entry,\n    data\n  });\n  putDigest(cache, entry.integrity, data, opts);\n}\n\nmodule.exports.put.byDigest = putDigest;\n\nfunction putDigest(cache, integrity, data, opts) {\n  pickMem(opts).set(`digest:${cache}:${integrity}`, data);\n}\n\nmodule.exports.get = get;\n\nfunction get(cache, key, opts) {\n  return pickMem(opts).get(`key:${cache}:${key}`);\n}\n\nmodule.exports.get.byDigest = getDigest;\n\nfunction getDigest(cache, integrity, opts) {\n  return pickMem(opts).get(`digest:${cache}:${integrity}`);\n}\n\nclass ObjProxy {\n  constructor(obj) {\n    this.obj = obj;\n  }\n\n  get(key) {\n    return this.obj[key];\n  }\n\n  set(key, val) {\n    this.obj[key] = val;\n  }\n\n}\n\nfunction pickMem(opts) {\n  if (!opts || !opts.memoize) {\n    return MEMOIZED;\n  } else if (opts.memoize.get && opts.memoize.set) {\n    return opts.memoize;\n  } else if (typeof opts.memoize === 'object') {\n    return new ObjProxy(opts.memoize);\n  } else {\n    return MEMOIZED;\n  }\n}","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/node_modules/cacache/lib/memoization.js"],"names":["LRU","require","MAX_SIZE","MAX_AGE","MEMOIZED","max","maxAge","length","entry","key","startsWith","data","module","exports","clearMemoized","old","forEach","v","k","reset","put","cache","opts","pickMem","set","putDigest","integrity","byDigest","get","getDigest","ObjProxy","constructor","obj","val","memoize"],"mappings":"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","sourcesContent":["'use strict'\n\nconst LRU = require('lru-cache')\n\nconst MAX_SIZE = 50 * 1024 * 1024 // 50MB\nconst MAX_AGE = 3 * 60 * 1000\n\nlet MEMOIZED = new LRU({\n  max: MAX_SIZE,\n  maxAge: MAX_AGE,\n  length: (entry, key) => {\n    if (key.startsWith('key:')) {\n      return entry.data.length\n    } else if (key.startsWith('digest:')) {\n      return entry.length\n    }\n  }\n})\n\nmodule.exports.clearMemoized = clearMemoized\nfunction clearMemoized () {\n  const old = {}\n  MEMOIZED.forEach((v, k) => {\n    old[k] = v\n  })\n  MEMOIZED.reset()\n  return old\n}\n\nmodule.exports.put = put\nfunction put (cache, entry, data, opts) {\n  pickMem(opts).set(`key:${cache}:${entry.key}`, { entry, data })\n  putDigest(cache, entry.integrity, data, opts)\n}\n\nmodule.exports.put.byDigest = putDigest\nfunction putDigest (cache, integrity, data, opts) {\n  pickMem(opts).set(`digest:${cache}:${integrity}`, data)\n}\n\nmodule.exports.get = get\nfunction get (cache, key, opts) {\n  return pickMem(opts).get(`key:${cache}:${key}`)\n}\n\nmodule.exports.get.byDigest = getDigest\nfunction getDigest (cache, integrity, opts) {\n  return pickMem(opts).get(`digest:${cache}:${integrity}`)\n}\n\nclass ObjProxy {\n  constructor (obj) {\n    this.obj = obj\n  }\n  get (key) { return this.obj[key] }\n  set (key, val) { this.obj[key] = val }\n}\n\nfunction pickMem (opts) {\n  if (!opts || !opts.memoize) {\n    return MEMOIZED\n  } else if (opts.memoize.get && opts.memoize.set) {\n    return opts.memoize\n  } else if (typeof opts.memoize === 'object') {\n    return new ObjProxy(opts.memoize)\n  } else {\n    return MEMOIZED\n  }\n}\n"]},"metadata":{},"sourceType":"script"}