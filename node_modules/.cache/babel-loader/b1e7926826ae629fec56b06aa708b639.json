{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AbstractMethodError = require(\"../AbstractMethodError\");\n\nconst BULK_SIZE = 1000;\n\nclass Hash {\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    throw new AbstractMethodError();\n  }\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n\n\n  digest(encoding) {\n    throw new AbstractMethodError();\n  }\n\n}\n\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nclass BulkUpdateDecorator extends Hash {\n  /**\n   * @param {Hash} hash hash\n   */\n  constructor(hash) {\n    super();\n    this.hash = hash;\n    this.buffer = \"\";\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  update(data, inputEncoding) {\n    if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n\n      this.hash.update(data, inputEncoding);\n    } else {\n      this.buffer += data;\n\n      if (this.buffer.length > BULK_SIZE) {\n        this.hash.update(this.buffer);\n        this.buffer = \"\";\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n\n\n  digest(encoding) {\n    if (this.buffer.length > 0) {\n      this.hash.update(this.buffer);\n    }\n\n    var digestResult = this.hash.digest(encoding);\n    return typeof digestResult === \"string\" ? digestResult : digestResult.toString();\n  }\n\n}\n/**\n * istanbul ignore next\n */\n\n\nclass DebugHash extends Hash {\n  constructor() {\n    super();\n    this.string = \"\";\n  }\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n\n\n  update(data, inputEncoding) {\n    if (typeof data !== \"string\") data = data.toString(\"utf-8\");\n    this.string += data;\n    return this;\n  }\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n\n\n  digest(encoding) {\n    return this.string.replace(/[^a-z0-9]+/gi, m => Buffer.from(m).toString(\"hex\"));\n  }\n\n}\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\n\n\nmodule.exports = algorithm => {\n  if (typeof algorithm === \"function\") {\n    return new BulkUpdateDecorator(new algorithm());\n  }\n\n  switch (algorithm) {\n    // TODO add non-cryptographic algorithm here\n    case \"debug\":\n      return new DebugHash();\n\n    default:\n      return new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n  }\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/util/createHash.js"],"names":["AbstractMethodError","require","BULK_SIZE","Hash","update","data","inputEncoding","digest","encoding","exports","BulkUpdateDecorator","constructor","hash","buffer","undefined","length","digestResult","toString","DebugHash","string","replace","m","Buffer","from","module","algorithm","createHash"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,wBAAD,CAAnC;;AAEA,MAAMC,SAAS,GAAG,IAAlB;;AAEA,MAAMC,IAAN,CAAW;AACV;;;;;;AAMAC,EAAAA,MAAM,CAACC,IAAD,EAAOC,aAAP,EAAsB;AAC3B,UAAM,IAAIN,mBAAJ,EAAN;AACA;AAED;;;;;;;AAKAO,EAAAA,MAAM,CAACC,QAAD,EAAW;AAChB,UAAM,IAAIR,mBAAJ,EAAN;AACA;;AAlBS;;AAqBXS,OAAO,CAACN,IAAR,GAAeA,IAAf;AACA;;AAEA,MAAMO,mBAAN,SAAkCP,IAAlC,CAAuC;AACtC;;;AAGAQ,EAAAA,WAAW,CAACC,IAAD,EAAO;AACjB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACA;AAED;;;;;;;;AAMAT,EAAAA,MAAM,CAACC,IAAD,EAAOC,aAAP,EAAsB;AAC3B,QACCA,aAAa,KAAKQ,SAAlB,IACA,OAAOT,IAAP,KAAgB,QADhB,IAEAA,IAAI,CAACU,MAAL,GAAcb,SAHf,EAIE;AACD,UAAI,KAAKW,MAAL,CAAYE,MAAZ,GAAqB,CAAzB,EAA4B;AAC3B,aAAKH,IAAL,CAAUR,MAAV,CAAiB,KAAKS,MAAtB;AACA,aAAKA,MAAL,GAAc,EAAd;AACA;;AACD,WAAKD,IAAL,CAAUR,MAAV,CAAiBC,IAAjB,EAAuBC,aAAvB;AACA,KAVD,MAUO;AACN,WAAKO,MAAL,IAAeR,IAAf;;AACA,UAAI,KAAKQ,MAAL,CAAYE,MAAZ,GAAqBb,SAAzB,EAAoC;AACnC,aAAKU,IAAL,CAAUR,MAAV,CAAiB,KAAKS,MAAtB;AACA,aAAKA,MAAL,GAAc,EAAd;AACA;AACD;;AACD,WAAO,IAAP;AACA;AAED;;;;;;;AAKAN,EAAAA,MAAM,CAACC,QAAD,EAAW;AAChB,QAAI,KAAKK,MAAL,CAAYE,MAAZ,GAAqB,CAAzB,EAA4B;AAC3B,WAAKH,IAAL,CAAUR,MAAV,CAAiB,KAAKS,MAAtB;AACA;;AACD,QAAIG,YAAY,GAAG,KAAKJ,IAAL,CAAUL,MAAV,CAAiBC,QAAjB,CAAnB;AACA,WAAO,OAAOQ,YAAP,KAAwB,QAAxB,GACJA,YADI,GAEJA,YAAY,CAACC,QAAb,EAFH;AAGA;;AAlDqC;AAqDvC;;;;;AAGA,MAAMC,SAAN,SAAwBf,IAAxB,CAA6B;AAC5BQ,EAAAA,WAAW,GAAG;AACb;AACA,SAAKQ,MAAL,GAAc,EAAd;AACA;AAED;;;;;;;;AAMAf,EAAAA,MAAM,CAACC,IAAD,EAAOC,aAAP,EAAsB;AAC3B,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8BA,IAAI,GAAGA,IAAI,CAACY,QAAL,CAAc,OAAd,CAAP;AAC9B,SAAKE,MAAL,IAAed,IAAf;AACA,WAAO,IAAP;AACA;AAED;;;;;;;AAKAE,EAAAA,MAAM,CAACC,QAAD,EAAW;AAChB,WAAO,KAAKW,MAAL,CAAYC,OAAZ,CAAoB,cAApB,EAAoCC,CAAC,IAC3CC,MAAM,CAACC,IAAP,CAAYF,CAAZ,EAAeJ,QAAf,CAAwB,KAAxB,CADM,CAAP;AAGA;;AA3B2B;AA8B7B;;;;;;;AAKAO,MAAM,CAACf,OAAP,GAAiBgB,SAAS,IAAI;AAC7B,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACpC,WAAO,IAAIf,mBAAJ,CAAwB,IAAIe,SAAJ,EAAxB,CAAP;AACA;;AACD,UAAQA,SAAR;AACC;AACA,SAAK,OAAL;AACC,aAAO,IAAIP,SAAJ,EAAP;;AACD;AACC,aAAO,IAAIR,mBAAJ,CAAwBT,OAAO,CAAC,QAAD,CAAP,CAAkByB,UAAlB,CAA6BD,SAA7B,CAAxB,CAAP;AALF;AAOA,CAXD","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AbstractMethodError = require(\"../AbstractMethodError\");\n\nconst BULK_SIZE = 1000;\n\nclass Hash {\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n}\n\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nclass BulkUpdateDecorator extends Hash {\n\t/**\n\t * @param {Hash} hash hash\n\t */\n\tconstructor(hash) {\n\t\tsuper();\n\t\tthis.hash = hash;\n\t\tthis.buffer = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (\n\t\t\tinputEncoding !== undefined ||\n\t\t\ttypeof data !== \"string\" ||\n\t\t\tdata.length > BULK_SIZE\n\t\t) {\n\t\t\tif (this.buffer.length > 0) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t\tthis.hash.update(data, inputEncoding);\n\t\t} else {\n\t\t\tthis.buffer += data;\n\t\t\tif (this.buffer.length > BULK_SIZE) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tif (this.buffer.length > 0) {\n\t\t\tthis.hash.update(this.buffer);\n\t\t}\n\t\tvar digestResult = this.hash.digest(encoding);\n\t\treturn typeof digestResult === \"string\"\n\t\t\t? digestResult\n\t\t\t: digestResult.toString();\n\t}\n}\n\n/**\n * istanbul ignore next\n */\nclass DebugHash extends Hash {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.string = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (typeof data !== \"string\") data = data.toString(\"utf-8\");\n\t\tthis.string += data;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\treturn this.string.replace(/[^a-z0-9]+/gi, m =>\n\t\t\tBuffer.from(m).toString(\"hex\")\n\t\t);\n\t}\n}\n\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = algorithm => {\n\tif (typeof algorithm === \"function\") {\n\t\treturn new BulkUpdateDecorator(new algorithm());\n\t}\n\tswitch (algorithm) {\n\t\t// TODO add non-cryptographic algorithm here\n\t\tcase \"debug\":\n\t\t\treturn new DebugHash();\n\t\tdefault:\n\t\t\treturn new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}