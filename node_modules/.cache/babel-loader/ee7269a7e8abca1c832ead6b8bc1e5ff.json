{"ast":null,"code":"var prr = require('prr');\n\nfunction init(type, message, cause) {\n  if (!!message && typeof message != 'string') {\n    message = message.message || message.name;\n  }\n\n  prr(this, {\n    type: type,\n    name: type // can be passed just a 'cause'\n    ,\n    cause: typeof message != 'string' ? message : cause,\n    message: message\n  }, 'ewr');\n} // generic prototype, not intended to be actually used - helpful for `instanceof`\n\n\nfunction CustomError(message, cause) {\n  Error.call(this);\n  if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);\n  init.call(this, 'CustomError', message, cause);\n}\n\nCustomError.prototype = new Error();\n\nfunction createError(errno, type, proto) {\n  var err = function (message, cause) {\n    init.call(this, type, message, cause); //TODO: the specificity here is stupid, errno should be available everywhere\n\n    if (type == 'FilesystemError') {\n      this.code = this.cause.code;\n      this.path = this.cause.path;\n      this.errno = this.cause.errno;\n      this.message = (errno.errno[this.cause.errno] ? errno.errno[this.cause.errno].description : this.cause.message) + (this.cause.path ? ' [' + this.cause.path + ']' : '');\n    }\n\n    Error.call(this);\n    if (Error.captureStackTrace) Error.captureStackTrace(this, err);\n  };\n\n  err.prototype = !!proto ? new proto() : new CustomError();\n  return err;\n}\n\nmodule.exports = function (errno) {\n  var ce = function (type, proto) {\n    return createError(errno, type, proto);\n  };\n\n  return {\n    CustomError: CustomError,\n    FilesystemError: ce('FilesystemError'),\n    createError: ce\n  };\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/errno/custom.js"],"names":["prr","require","init","type","message","cause","name","CustomError","Error","call","captureStackTrace","constructor","prototype","createError","errno","proto","err","code","path","description","module","exports","ce","FilesystemError"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,SAASC,IAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8BC,KAA9B,EAAqC;AACnC,MAAI,CAAC,CAACD,OAAF,IAAa,OAAOA,OAAP,IAAkB,QAAnC,EAA6C;AAC3CA,IAAAA,OAAO,GAAGA,OAAO,CAACA,OAAR,IAAmBA,OAAO,CAACE,IAArC;AACD;;AACDN,EAAAA,GAAG,CAAC,IAAD,EAAO;AACNG,IAAAA,IAAI,EAAMA,IADJ;AAENG,IAAAA,IAAI,EAAMH,IAFJ,CAGN;AAHM;AAINE,IAAAA,KAAK,EAAK,OAAOD,OAAP,IAAkB,QAAlB,GAA6BA,OAA7B,GAAuCC,KAJ3C;AAKND,IAAAA,OAAO,EAAGA;AALJ,GAAP,EAMA,KANA,CAAH;AAOD,C,CAED;;;AACA,SAASG,WAAT,CAAsBH,OAAtB,EAA+BC,KAA/B,EAAsC;AACpCG,EAAAA,KAAK,CAACC,IAAN,CAAW,IAAX;AACA,MAAID,KAAK,CAACE,iBAAV,EACEF,KAAK,CAACE,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACFT,EAAAA,IAAI,CAACO,IAAL,CAAU,IAAV,EAAgB,aAAhB,EAA+BL,OAA/B,EAAwCC,KAAxC;AACD;;AAEDE,WAAW,CAACK,SAAZ,GAAwB,IAAIJ,KAAJ,EAAxB;;AAEA,SAASK,WAAT,CAAsBC,KAAtB,EAA6BX,IAA7B,EAAmCY,KAAnC,EAA0C;AACxC,MAAIC,GAAG,GAAG,UAAUZ,OAAV,EAAmBC,KAAnB,EAA0B;AAClCH,IAAAA,IAAI,CAACO,IAAL,CAAU,IAAV,EAAgBN,IAAhB,EAAsBC,OAAtB,EAA+BC,KAA/B,EADkC,CAElC;;AACA,QAAIF,IAAI,IAAI,iBAAZ,EAA+B;AAC7B,WAAKc,IAAL,GAAe,KAAKZ,KAAL,CAAWY,IAA1B;AACA,WAAKC,IAAL,GAAe,KAAKb,KAAL,CAAWa,IAA1B;AACA,WAAKJ,KAAL,GAAe,KAAKT,KAAL,CAAWS,KAA1B;AACA,WAAKV,OAAL,GACE,CAACU,KAAK,CAACA,KAAN,CAAY,KAAKT,KAAL,CAAWS,KAAvB,IACGA,KAAK,CAACA,KAAN,CAAY,KAAKT,KAAL,CAAWS,KAAvB,EAA8BK,WADjC,GAEG,KAAKd,KAAL,CAAWD,OAFf,KAGG,KAAKC,KAAL,CAAWa,IAAX,GAAkB,OAAO,KAAKb,KAAL,CAAWa,IAAlB,GAAyB,GAA3C,GAAiD,EAHpD,CADF;AAKD;;AACDV,IAAAA,KAAK,CAACC,IAAN,CAAW,IAAX;AACA,QAAID,KAAK,CAACE,iBAAV,EACEF,KAAK,CAACE,iBAAN,CAAwB,IAAxB,EAA8BM,GAA9B;AACH,GAhBD;;AAiBAA,EAAAA,GAAG,CAACJ,SAAJ,GAAgB,CAAC,CAACG,KAAF,GAAU,IAAIA,KAAJ,EAAV,GAAwB,IAAIR,WAAJ,EAAxC;AACA,SAAOS,GAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB,UAAUP,KAAV,EAAiB;AAChC,MAAIQ,EAAE,GAAG,UAAUnB,IAAV,EAAgBY,KAAhB,EAAuB;AAC9B,WAAOF,WAAW,CAACC,KAAD,EAAQX,IAAR,EAAcY,KAAd,CAAlB;AACD,GAFD;;AAGA,SAAO;AACHR,IAAAA,WAAW,EAAOA,WADf;AAEHgB,IAAAA,eAAe,EAAGD,EAAE,CAAC,iBAAD,CAFjB;AAGHT,IAAAA,WAAW,EAAOS;AAHf,GAAP;AAKD,CATD","sourcesContent":["var prr = require('prr')\n\nfunction init (type, message, cause) {\n  if (!!message && typeof message != 'string') {\n    message = message.message || message.name\n  }\n  prr(this, {\n      type    : type\n    , name    : type\n      // can be passed just a 'cause'\n    , cause   : typeof message != 'string' ? message : cause\n    , message : message\n  }, 'ewr')\n}\n\n// generic prototype, not intended to be actually used - helpful for `instanceof`\nfunction CustomError (message, cause) {\n  Error.call(this)\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, this.constructor)\n  init.call(this, 'CustomError', message, cause)\n}\n\nCustomError.prototype = new Error()\n\nfunction createError (errno, type, proto) {\n  var err = function (message, cause) {\n    init.call(this, type, message, cause)\n    //TODO: the specificity here is stupid, errno should be available everywhere\n    if (type == 'FilesystemError') {\n      this.code    = this.cause.code\n      this.path    = this.cause.path\n      this.errno   = this.cause.errno\n      this.message =\n        (errno.errno[this.cause.errno]\n          ? errno.errno[this.cause.errno].description\n          : this.cause.message)\n        + (this.cause.path ? ' [' + this.cause.path + ']' : '')\n    }\n    Error.call(this)\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(this, err)\n  }\n  err.prototype = !!proto ? new proto() : new CustomError()\n  return err\n}\n\nmodule.exports = function (errno) {\n  var ce = function (type, proto) {\n    return createError(errno, type, proto)\n  }\n  return {\n      CustomError     : CustomError\n    , FilesystemError : ce('FilesystemError')\n    , createError     : ce\n  }\n}\n"]},"metadata":{},"sourceType":"script"}