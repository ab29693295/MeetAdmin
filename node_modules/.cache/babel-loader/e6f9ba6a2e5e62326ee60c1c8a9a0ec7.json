{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\n\nconst isInside = (path, parent) => {\n  if (!path.startsWith(parent)) return false;\n  if (path.length === parent.length) return true;\n  const charCode = path.charCodeAt(parent.length);\n  return charCode === slashCode || charCode === backslashCode;\n};\n\nmodule.exports = class RestrictionsPlugin {\n  constructor(source, restrictions) {\n    this.source = source;\n    this.restrictions = restrictions;\n  }\n\n  apply(resolver) {\n    resolver.getHook(this.source).tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n      if (typeof request.path === \"string\") {\n        const path = request.path;\n\n        for (let i = 0; i < this.restrictions.length; i++) {\n          const rule = this.restrictions[i];\n\n          if (typeof rule === \"string\") {\n            if (!isInside(path, rule)) {\n              if (resolveContext.log) {\n                resolveContext.log(`${path} is not inside of the restriction ${rule}`);\n              }\n\n              return callback(null, null);\n            }\n          } else if (!rule.test(path)) {\n            if (resolveContext.log) {\n              resolveContext.log(`${path} doesn't match the restriction ${rule}`);\n            }\n\n            return callback(null, null);\n          }\n        }\n      }\n\n      callback();\n    });\n  }\n\n};","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/enhanced-resolve/lib/RestrictionsPlugin.js"],"names":["slashCode","charCodeAt","backslashCode","isInside","path","parent","startsWith","length","charCode","module","exports","RestrictionsPlugin","constructor","source","restrictions","apply","resolver","getHook","tapAsync","request","resolveContext","callback","i","rule","log","test"],"mappings":"AAAA;;;;AAKA;;AAEA,MAAMA,SAAS,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAlB;AACA,MAAMC,aAAa,GAAG,KAAKD,UAAL,CAAgB,CAAhB,CAAtB;;AAEA,MAAME,QAAQ,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAClC,MAAI,CAACD,IAAI,CAACE,UAAL,CAAgBD,MAAhB,CAAL,EAA8B,OAAO,KAAP;AAC9B,MAAID,IAAI,CAACG,MAAL,KAAgBF,MAAM,CAACE,MAA3B,EAAmC,OAAO,IAAP;AACnC,QAAMC,QAAQ,GAAGJ,IAAI,CAACH,UAAL,CAAgBI,MAAM,CAACE,MAAvB,CAAjB;AACA,SAAOC,QAAQ,KAAKR,SAAb,IAA0BQ,QAAQ,KAAKN,aAA9C;AACA,CALD;;AAOAO,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;AACzCC,EAAAA,WAAW,CAACC,MAAD,EAASC,YAAT,EAAuB;AACjC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CACNC,OADF,CACU,KAAKJ,MADf,EAEEK,QAFF,CAEW,oBAFX,EAEiC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACtE,UAAI,OAAOF,OAAO,CAACf,IAAf,KAAwB,QAA5B,EAAsC;AACrC,cAAMA,IAAI,GAAGe,OAAO,CAACf,IAArB;;AAEA,aAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,YAAL,CAAkBP,MAAtC,EAA8Ce,CAAC,EAA/C,EAAmD;AAClD,gBAAMC,IAAI,GAAG,KAAKT,YAAL,CAAkBQ,CAAlB,CAAb;;AACA,cAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC7B,gBAAI,CAACpB,QAAQ,CAACC,IAAD,EAAOmB,IAAP,CAAb,EAA2B;AAC1B,kBAAIH,cAAc,CAACI,GAAnB,EAAwB;AACvBJ,gBAAAA,cAAc,CAACI,GAAf,CACE,GAAEpB,IAAK,qCAAoCmB,IAAK,EADlD;AAGA;;AACD,qBAAOF,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACA;AACD,WATD,MASO,IAAI,CAACE,IAAI,CAACE,IAAL,CAAUrB,IAAV,CAAL,EAAsB;AAC5B,gBAAIgB,cAAc,CAACI,GAAnB,EAAwB;AACvBJ,cAAAA,cAAc,CAACI,GAAf,CACE,GAAEpB,IAAK,kCAAiCmB,IAAK,EAD/C;AAGA;;AACD,mBAAOF,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACA;AACD;AACD;;AAEDA,MAAAA,QAAQ;AACR,KA7BF;AA8BA;;AArCwC,CAA1C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\n\nconst isInside = (path, parent) => {\n\tif (!path.startsWith(parent)) return false;\n\tif (path.length === parent.length) return true;\n\tconst charCode = path.charCodeAt(parent.length);\n\treturn charCode === slashCode || charCode === backslashCode;\n};\n\nmodule.exports = class RestrictionsPlugin {\n\tconstructor(source, restrictions) {\n\t\tthis.source = source;\n\t\tthis.restrictions = restrictions;\n\t}\n\n\tapply(resolver) {\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (typeof request.path === \"string\") {\n\t\t\t\t\tconst path = request.path;\n\n\t\t\t\t\tfor (let i = 0; i < this.restrictions.length; i++) {\n\t\t\t\t\t\tconst rule = this.restrictions[i];\n\t\t\t\t\t\tif (typeof rule === \"string\") {\n\t\t\t\t\t\t\tif (!isInside(path, rule)) {\n\t\t\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t\t`${path} is not inside of the restriction ${rule}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!rule.test(path)) {\n\t\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t`${path} doesn't match the restriction ${rule}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback();\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}