{"ast":null,"code":"'use strict';\n\nmodule.exports = move;\n\nvar nodeFs = require('fs');\n\nvar rimraf = require('rimraf');\n\nvar validate = require('aproba');\n\nvar copy = require('copy-concurrently');\n\nvar RunQueue = require('run-queue');\n\nvar extend = Object.assign || require('util')._extend;\n\nfunction promisify(Promise, fn) {\n  return function () {\n    var args = [].slice.call(arguments);\n    return new Promise(function (resolve, reject) {\n      return fn.apply(null, args.concat(function (err, value) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(value);\n        }\n      }));\n    });\n  };\n}\n\nfunction move(from, to, opts) {\n  validate('SSO|SS', arguments);\n  opts = extend({}, opts || {});\n  var Promise = opts.Promise || global.Promise;\n  var fs = opts.fs || nodeFs;\n  var rimrafAsync = promisify(Promise, rimraf);\n  var renameAsync = promisify(Promise, fs.rename);\n  opts.top = from;\n  var queue = new RunQueue({\n    maxConcurrency: opts.maxConcurrency,\n    Promise: Promise\n  });\n  opts.queue = queue;\n  opts.recurseWith = rename;\n  queue.add(0, rename, [from, to, opts]);\n  return queue.run().then(function () {\n    return remove(from);\n  }, function (err) {\n    // if the target already exists don't clobber it\n    if (err.code === 'EEXIST' || err.code === 'EPERM') {\n      return passThroughError();\n    } else {\n      return remove(to).then(passThroughError, passThroughError);\n    }\n\n    function passThroughError() {\n      return Promise.reject(err);\n    }\n  });\n\n  function remove(target) {\n    var opts = {\n      unlink: fs.unlink,\n      chmod: fs.chmod,\n      stat: fs.stat,\n      lstat: fs.lstat,\n      rmdir: fs.rmdir,\n      readdir: fs.readdir,\n      glob: false\n    };\n    return rimrafAsync(target, opts);\n  }\n\n  function rename(from, to, opts, done) {\n    return renameAsync(from, to).catch(function (err) {\n      if (err.code !== 'EXDEV') {\n        return Promise.reject(err);\n      } else {\n        return remove(to).then(function () {\n          return copy.item(from, to, opts);\n        });\n      }\n    });\n  }\n}","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/move-concurrently/move.js"],"names":["module","exports","move","nodeFs","require","rimraf","validate","copy","RunQueue","extend","Object","assign","_extend","promisify","Promise","fn","args","slice","call","arguments","resolve","reject","apply","concat","err","value","from","to","opts","global","fs","rimrafAsync","renameAsync","rename","top","queue","maxConcurrency","recurseWith","add","run","then","remove","code","passThroughError","target","unlink","chmod","stat","lstat","rmdir","readdir","glob","done","catch","item"],"mappings":"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","sourcesContent":["'use strict'\nmodule.exports = move\n\nvar nodeFs = require('fs')\nvar rimraf = require('rimraf')\nvar validate = require('aproba')\nvar copy = require('copy-concurrently')\nvar RunQueue = require('run-queue')\nvar extend = Object.assign || require('util')._extend\n\nfunction promisify (Promise, fn) {\n  return function () {\n    var args = [].slice.call(arguments)\n    return new Promise(function (resolve, reject) {\n      return fn.apply(null, args.concat(function (err, value) {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(value)\n        }\n      }))\n    })\n  }\n}\n\nfunction move (from, to, opts) {\n  validate('SSO|SS', arguments)\n  opts = extend({}, opts || {})\n\n  var Promise = opts.Promise || global.Promise\n  var fs = opts.fs || nodeFs\n  var rimrafAsync = promisify(Promise, rimraf)\n  var renameAsync = promisify(Promise, fs.rename)\n\n  opts.top = from\n\n  var queue = new RunQueue({\n    maxConcurrency: opts.maxConcurrency,\n    Promise: Promise\n  })\n  opts.queue = queue\n  opts.recurseWith = rename\n\n  queue.add(0, rename, [from, to, opts])\n\n  return queue.run().then(function () {\n    return remove(from)\n  }, function (err) {\n    // if the target already exists don't clobber it\n    if (err.code === 'EEXIST' || err.code === 'EPERM') {\n      return passThroughError()\n    } else {\n      return remove(to).then(passThroughError, passThroughError)\n    }\n    function passThroughError () {\n      return Promise.reject(err)\n    }\n  })\n\n  function remove (target) {\n    var opts = {\n      unlink: fs.unlink,\n      chmod: fs.chmod,\n      stat: fs.stat,\n      lstat: fs.lstat,\n      rmdir: fs.rmdir,\n      readdir: fs.readdir,\n      glob: false\n    }\n    return rimrafAsync(target, opts)\n  }\n\n  function rename (from, to, opts, done) {\n    return renameAsync(from, to).catch(function (err) {\n      if (err.code !== 'EXDEV') {\n        return Promise.reject(err)\n      } else {\n        return remove(to).then(function () {\n          return copy.item(from, to, opts)\n        })\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}