{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderChunkIdsPlugin.json\");\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderChunkIdsPlugin\").OccurrenceOrderChunkIdsPluginOptions} OccurrenceOrderChunkIdsPluginOptions */\n\n\nclass OccurrenceOrderChunkIdsPlugin {\n  /**\n   * @param {OccurrenceOrderChunkIdsPluginOptions=} options options object\n   */\n  constructor(options = {}) {\n    validateOptions(schema, options, \"Occurrence Order Chunk Ids Plugin\");\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const prioritiseInitial = this.options.prioritiseInitial;\n    compiler.hooks.compilation.tap(\"OccurrenceOrderChunkIdsPlugin\", compilation => {\n      compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderChunkIdsPlugin\", chunks => {\n        const occursInInitialChunksMap = new Map();\n        const originalOrder = new Map();\n        let i = 0;\n\n        for (const c of chunks) {\n          let occurs = 0;\n\n          for (const chunkGroup of c.groupsIterable) {\n            for (const parent of chunkGroup.parentsIterable) {\n              if (parent.isInitial()) occurs++;\n            }\n          }\n\n          occursInInitialChunksMap.set(c, occurs);\n          originalOrder.set(c, i++);\n        }\n\n        chunks.sort((a, b) => {\n          if (prioritiseInitial) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n\n          const aOccurs = a.getNumberOfGroups();\n          const bOccurs = b.getNumberOfGroups();\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = OccurrenceOrderChunkIdsPlugin;","map":{"version":3,"sources":["E:/Users/cnki/source/repos/ab29693295/MeetAdmin/node_modules/webpack/lib/optimize/OccurrenceChunkOrderPlugin.js"],"names":["validateOptions","require","schema","OccurrenceOrderChunkIdsPlugin","constructor","options","apply","compiler","prioritiseInitial","hooks","compilation","tap","optimizeChunkOrder","chunks","occursInInitialChunksMap","Map","originalOrder","i","c","occurs","chunkGroup","groupsIterable","parent","parentsIterable","isInitial","set","sort","a","b","aEntryOccurs","get","bEntryOccurs","aOccurs","getNumberOfGroups","bOccurs","orgA","orgB","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,cAAD,CAA/B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,mEAAD,CAAtB;AAEA;;;AAEA,MAAME,6BAAN,CAAoC;AACnC;;;AAGAC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACzBL,IAAAA,eAAe,CAACE,MAAD,EAASG,OAAT,EAAkB,mCAAlB,CAAf;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA;;AAEDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMC,iBAAiB,GAAG,KAAKH,OAAL,CAAaG,iBAAvC;AACAD,IAAAA,QAAQ,CAACE,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,+BADD,EAECD,WAAW,IAAI;AACdA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,kBAAlB,CAAqCD,GAArC,CACC,+BADD,EAECE,MAAM,IAAI;AACT,cAAMC,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;AACA,cAAMC,aAAa,GAAG,IAAID,GAAJ,EAAtB;AAEA,YAAIE,CAAC,GAAG,CAAR;;AACA,aAAK,MAAMC,CAAX,IAAgBL,MAAhB,EAAwB;AACvB,cAAIM,MAAM,GAAG,CAAb;;AACA,eAAK,MAAMC,UAAX,IAAyBF,CAAC,CAACG,cAA3B,EAA2C;AAC1C,iBAAK,MAAMC,MAAX,IAAqBF,UAAU,CAACG,eAAhC,EAAiD;AAChD,kBAAID,MAAM,CAACE,SAAP,EAAJ,EAAwBL,MAAM;AAC9B;AACD;;AACDL,UAAAA,wBAAwB,CAACW,GAAzB,CAA6BP,CAA7B,EAAgCC,MAAhC;AACAH,UAAAA,aAAa,CAACS,GAAd,CAAkBP,CAAlB,EAAqBD,CAAC,EAAtB;AACA;;AAEDJ,QAAAA,MAAM,CAACa,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,cAAIpB,iBAAJ,EAAuB;AACtB,kBAAMqB,YAAY,GAAGf,wBAAwB,CAACgB,GAAzB,CAA6BH,CAA7B,CAArB;AACA,kBAAMI,YAAY,GAAGjB,wBAAwB,CAACgB,GAAzB,CAA6BF,CAA7B,CAArB;AACA,gBAAIC,YAAY,GAAGE,YAAnB,EAAiC,OAAO,CAAC,CAAR;AACjC,gBAAIF,YAAY,GAAGE,YAAnB,EAAiC,OAAO,CAAP;AACjC;;AACD,gBAAMC,OAAO,GAAGL,CAAC,CAACM,iBAAF,EAAhB;AACA,gBAAMC,OAAO,GAAGN,CAAC,CAACK,iBAAF,EAAhB;AACA,cAAID,OAAO,GAAGE,OAAd,EAAuB,OAAO,CAAC,CAAR;AACvB,cAAIF,OAAO,GAAGE,OAAd,EAAuB,OAAO,CAAP;AACvB,gBAAMC,IAAI,GAAGnB,aAAa,CAACc,GAAd,CAAkBH,CAAlB,CAAb;AACA,gBAAMS,IAAI,GAAGpB,aAAa,CAACc,GAAd,CAAkBF,CAAlB,CAAb;AACA,iBAAOO,IAAI,GAAGC,IAAd;AACA,SAdD;AAeA,OAjCF;AAmCA,KAtCF;AAwCA;;AAnDkC;;AAsDpCC,MAAM,CAACC,OAAP,GAAiBnC,6BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderChunkIdsPlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderChunkIdsPlugin\").OccurrenceOrderChunkIdsPluginOptions} OccurrenceOrderChunkIdsPluginOptions */\n\nclass OccurrenceOrderChunkIdsPlugin {\n\t/**\n\t * @param {OccurrenceOrderChunkIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidateOptions(schema, options, \"Occurrence Order Chunk Ids Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"OccurrenceOrderChunkIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeChunkOrder.tap(\n\t\t\t\t\t\"OccurrenceOrderChunkIdsPlugin\",\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\t\tconst originalOrder = new Map();\n\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t\t\t\toriginalOrder.set(c, i++);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchunks.sort((a, b) => {\n\t\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = OccurrenceOrderChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}