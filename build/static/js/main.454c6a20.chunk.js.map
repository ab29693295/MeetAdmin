{"version":3,"sources":["common/js/tools.js","AsyncComponent.js","route/index.js","route/login.js","redux/reducers/menu.js","redux/reducers/index.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["setStorage","key","value","time","data","expirse","Date","getTime","localStorage","setItem","JSON","stringify","getStorage","parse","getItem","removeItem","asyncComponent","importComponent","props","state","component","default","this","setState","C","Component","Login","AsyncComponent","Layout","RoutesIndex","exact","path","Comp","login","to","pathname","search","location","from","initialState","siderList","menu","action","type","payload","combineReducers","loggerMiddleware","createLogger","store","createStore","reducers","applyMiddleware","thunk","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GAAO,SAASA,EAAWC,EAAIC,EAAMC,GACjC,IAAIC,EAAO,CAAEF,MAAOA,EAAOG,QAAS,IAAIC,KAAKH,GAAMI,WACnDC,aAAaC,QAAQR,EAAKS,KAAKC,UAAUP,IAEtC,SAASQ,EAAWX,GACvB,IAAIG,EAAOM,KAAKG,MAAML,aAAaM,QAAQb,IAC3C,GAAa,OAATG,EAAe,CACf,KAAoB,MAAhBA,EAAKC,SAAmBD,EAAKC,SAAU,IAAIC,MAAOC,WAGlD,OAAOH,EAAKF,MAFZM,aAAaO,WAAWd,GAKhC,OAAO,KAbX,qE,oPCCe,SAASe,EAAeC,GAmBnC,OAnBoD,kDAEhD,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,UAAW,MAHA,EAF6B,kMASPH,IATO,gBAS3BG,EAT2B,EASpCC,QACRC,KAAKC,SAAS,CACVH,UAAWA,IAX6B,qIAe5C,IAAMI,EAAIF,KAAKH,MAAMC,UACrB,OAAOI,EAAI,kBAACA,EAAMF,KAAKJ,OAAY,SAhBS,GACvBO,a,YCG3BC,EAAQC,GAAe,kBAAM,uDAC7BC,EAASD,GAAe,kBAAM,8DAuBrBE,E,kDApBX,aAAe,wC,kGASX,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASX,UAAWM,IACtC,kBAAC,IAAD,CAAQK,KAAK,IAAIX,WClBtBY,EDkBsCJ,ECjBnD,kDACM,aAAe,IAAD,8BACV,gBACKT,MAAQ,CACTc,OAAO,GAHD,EADpB,gEAScrB,YAAW,YACXU,KAAKC,SAAS,CACVU,OAAO,MAXzB,+BAkBU,OAAIrB,YAAW,WACJ,kBAACoB,EAASV,KAAKJ,OAEf,kBAAC,IAAD,CAAUgB,GAAI,CACjBC,SAAS,SACTC,OAAQ,cAAcd,KAAKJ,MAAMmB,SAASF,SAC1ChB,MAAOG,KAAKJ,MAAMmB,SAASF,UAC5BG,KAAK,UAzBtB,GAAkCb,kBADrB,IAAAO,M,GDIWP,a,uCERpBc,EAAe,CACjBC,UAAU,IAmBCC,EAjBJ,WAA8B,IAA7BtB,EAA4B,uDAAtBoB,EAAaG,EAAS,uCACpC,OAAQA,EAAOC,MACX,IAAK,iBACJ,IAEOH,EACAE,EAAOE,QADPJ,UAGJ,OAAO,2BACArB,GADP,IAEIqB,cAGR,QACI,OAAOrB,ICfJ0B,cAAgB,CAC3BJ,SCCEK,EAAmBC,yBAMVC,EAJDC,YACVC,EACAC,YAAgBC,IAAON,ICSZO,MAZf,WACE,OACI,kBAAC,IAAD,CAAUL,MAAOA,GACjB,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,UCEUM,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.454c6a20.chunk.js","sourcesContent":["export function setStorage(key,value,time){\r\n    let data = { value: value, expirse: new Date(time).getTime() };\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n}\r\nexport function getStorage(key) {\r\n    let data = JSON.parse(localStorage.getItem(key));\r\n    if (data !== null) {\r\n        if (data.expirse != null && data.expirse < new Date().getTime()) {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            return data.value;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n","import React, { Component } from 'react';\r\nexport default function asyncComponent(importComponent) {\r\n    class AsyncComponent extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                component: null\r\n            };\r\n        }\r\n        async componentDidMount() {\r\n            const { default: component } = await importComponent();\r\n            this.setState({\r\n                component: component\r\n            });\r\n        }\r\n        render() {\r\n            const C = this.state.component;\r\n            return C ? <C {...this.props} /> : null;\r\n        }\r\n    }\r\n    return AsyncComponent;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport AsyncComponent from \"../AsyncComponent\";\r\nimport Comp from './login'\r\n/*路由配置*/\r\nconst Login = AsyncComponent(() => import(\"../view/Login\")); //登录\r\nconst Layout = AsyncComponent(() => import(\"../view/Layout\")); //\r\n\r\nclass RoutesIndex extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path=\"/login\" component={Login}/>\r\n                    <Route  path=\"/\" component={Comp(Layout)}/>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RoutesIndex;\r\n","/*登录管理*/\r\nimport React, {Component} from \"react\";\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport {getStorage} from '../common/js/tools'\r\nexport default Comp => {\r\n  return  class ConvertComp extends Component {\r\n        constructor() {\r\n            super();\r\n            this.state = {\r\n                login: false\r\n            };\r\n        }\r\n\r\n        componentDidMount() {\r\n            if (getStorage('isLogin')) {\r\n                this.setState({\r\n                    login: true\r\n                })\r\n            }\r\n        }\r\n\r\n        render() {\r\n\r\n            if (getStorage('isLogin')) {\r\n                return <Comp {...this.props}   />;\r\n            } else  {\r\n                return <Redirect to={{\r\n                    pathname:'/login',\r\n                    search: \"?returnUrl=\"+this.props.location.pathname,\r\n                    state: this.props.location.pathname,\r\n                }} from='/' />\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","const initialState = {\r\n    siderList:[]\r\n};\r\nconst menu=(state=initialState,action)=>{\r\n    switch (action.type){\r\n        case \"SET_SIDER_MENU\":\r\n        {\r\n            const {\r\n                siderList\r\n            } = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                siderList\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default menu;\r\n","import {combineReducers} from 'redux'\r\nimport menu from './menu'\r\nexport default combineReducers({\r\n    menu\r\n})\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\nimport reducers from './reducers/index'\r\nconst loggerMiddleware = createLogger()\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk, loggerMiddleware)\r\n)\r\nexport default store\r\n","import React from 'react';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport RouteIndex from \"./route\";\r\nimport {Provider} from 'react-redux'\r\nimport store from './redux/store'\r\nfunction App() {\r\n  return (\r\n      <Provider store={store} >\r\n      <Router>\r\n        <div>\r\n          <RouteIndex />\r\n        </div>\r\n      </Router>\r\n      </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'antd/dist/antd.css';\r\nimport './common/css/reset.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}